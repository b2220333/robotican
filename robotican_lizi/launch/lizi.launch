<?xml version="1.0"?>
<launch>
  
  <arg name="gazebo" default='false'/>
  
  <arg name="controllers" default='true'/>

  <arg name="robot_localization" default='true'/>
  <arg name="navigation" default='false'/>
  
  <arg name="rqt" default='false'/>

  <arg name="front_camera" default='false'/>
  <arg name="lidar" default='false'/>
  <arg name="gps" default='false'/>
  <arg name="urf" default='false'/>
  <arg name="imu" default='false'/>
  
  <arg name="x" default="0.0"/>
  <arg name="y" default="0.0"/>
  <arg name="z" default="0.1"/>
  <arg name="R" default="0.0" />
  <arg name="P" default="0.0" />
  <arg name="Y" default="0.0" />
  
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen"/>
    
      
  <group if="$(arg gazebo)">
    
    <param name="robot_description" command="$(find xacro)/xacro.py '$(find robotican_lizi)/description/models/lizi_gazebo.xacro' 
	   controllers:=$(arg controllers)
	   front_camera:=$(arg front_camera)
	   lidar:=$(arg lidar)
	   urf:=$(arg urf)
	   imu:=$(arg imu)
	   gps:=$(arg gps)
	   " /> 
	  
    <arg name="paused" default="false"/>
    <arg name="use_sim_time" default="true"/>
    <arg name="gui" default="true"/>
    <arg name="headless" default="false"/>
    <arg name="debug" default="false"/>
    
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
     <!--  <arg name="world_name" value="$(find robotican_demos)/worlds/gas_station.world"/> -->
     <!--  <arg name="world_name" value="$(find robotican_common)/worlds/UPlat.sdf"/> -->
      <arg name="debug" value="$(arg debug)" />
      <arg name="gui" value="$(arg gui)" />
      <arg name="paused" value="$(arg paused)"/>
      <arg name="use_sim_time" value="$(arg use_sim_time)"/>
      <arg name="headless" value="$(arg headless)"/>
    </include>
    

    <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" 
	  args="-urdf -model lizi -param robot_description -x $(arg x) -y $(arg y) -z $(arg z) -R $(arg R) -P $(arg P) -Y $(arg Y)"/> 
    
    
    </group>
    
    <group unless="$(arg gazebo)">
		<group if="$(arg front_camera)">
			<include file="$(find robotican_hardware_interface)/launch/usb_cam.launch">
				<arg name="input_dev" value="/dev/video0" />
				<arg name="camera_frame_id" value="front_cam_link" />
				<arg name="pixel_format" value="mjpeg" /> <!-- mjpeg, yuyv, uyvy  -->
				<arg name="image_width" value="800" />
				<arg name="image_height" value="800" />
				<arg name="node_name" value="front_cam" />
			</include>
		</group>

		<group if="$(arg lidar)">
			<include file="$(find robotican_hardware_interface)/launch/hokuyo_laser.launch">
				<arg name="input_dev" value="/dev/Hokuyo" />
				<arg name="frame_id" value="laser_link" />
			</include>
		</group>
		

		<param name="robot_description" command="$(find xacro)/xacro.py '$(find robotican_armadillo)/description/models/armadillo.xacro'" />
		<rosparam file="$(find robotican_armadillo)/config/hardware_interface_config.yaml" command="load"/>	
		<node name="robotican_hardware_interface" pkg="robotican_hardware_interface" type="robotican_hardware_interface_node" respawn="false" output="screen" >
		</node> 
    </group>
    
    

  <group if="$(arg controllers)">
    
    <rosparam file="$(find robotican_armadillo)/config/controllers.yaml" command="load"/>
    
    
    	<group if="$(arg robot_localization)">
		<include file="$(find robotican_common)/launch/robot_localization.launch"/>
		<param name="/mobile_base_controller/enable_odom_tf" value="false" />
	</group>
    
    <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="	  
      robot_state_controller
	  mobile_base_controller
	  " />
     </group>

	<group if="$(arg navigation)">
		<rosparam file="$(find robotican_armadillo)/navigation/config/move_base_params.yaml" command="load" ns="move_base"/>
		<rosparam file="$(find robotican_armadillo)/navigation/config/costmap_common_params.yaml" command="load" ns="move_base/global_costmap" />
		<rosparam file="$(find robotican_armadillo)navigation/config/costmap_common_params.yaml" command="load" ns="move_base/local_costmap" />
		<rosparam file="$(find robotican_armadillo)/navigation/config/local_costmap_params.yaml" command="load" ns="move_base/local_costmap" />
		<rosparam file="$(find robotican_armadillo)/navigation/config/global_costmap_params.yaml" command="load" ns="move_base/global_costmap"/>
		<include file="$(find robotican_common)/launch/move_base.launch"/>
	</group>

	<group if="$(arg rqt)">
		<node pkg="rqt_gui" type="rqt_gui" name="rqt_gui" output="screen" respawn="true" />
	</group>
  <!--  args="-d $(find polar_scan_matcher)/demo/demo.vcg"/> -->
</launch>


/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 62 generated on 2016-11-17 10:54:38.686887
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==62);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25;
x0=IKcos(j[3]);
x1=IKcos(j[0]);
x2=IKsin(j[0]);
x3=IKsin(j[2]);
x4=IKcos(j[2]);
x5=IKsin(j[1]);
x6=IKcos(j[1]);
x7=IKsin(j[3]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
x10=((IkReal(0.224000000000000))*(x4));
x11=((IkReal(0.0137000000000000))*(x6));
x12=((IkReal(0.304750000000000))*(x1));
x13=((IkReal(0.0137000000000000))*(x4));
x14=((IkReal(1.00000000000000))*(x4));
x15=((IkReal(1.00000000000000))*(x6));
x16=((IkReal(1.00000000000000))*(x5));
x17=((x2)*(x3));
x18=((x1)*(x5));
x19=((x4)*(x7));
x20=((x2)*(x5));
x21=((x0)*(x1));
x22=((x0)*(x2));
x23=((x6)*(x7));
x24=((x1)*(x3));
x25=((IkReal(0.304750000000000))*(x4)*(x5));
eetrans[0]=((IkReal(-0.0962780000000000))+(((x0)*(((((IkReal(-0.304750000000000))*(x17)))+(((x12)*(x4)*(x5)))))))+(((IkReal(-0.224000000000000))*(x17)))+(((x11)*(x21)))+(((IkReal(0.000251160000000000))*(x2)))+(((x7)*(((((IkReal(-1.00000000000000))*(x13)*(x18)))+(((IkReal(0.0137000000000000))*(x17)))))))+(((x12)*(x23)))+(((x10)*(x18)))+(((IkReal(0.266305430000000))*(x18))));
eetrans[1]=((((IkReal(-0.000251160000000000))*(x1)))+(((IkReal(0.224000000000000))*(x24)))+(((x0)*(((((IkReal(0.304750000000000))*(x20)*(x4)))+(((x12)*(x3)))))))+(((x7)*(((((IkReal(-0.0137000000000000))*(x24)))+(((IkReal(-1.00000000000000))*(x13)*(x20)))))))+(((x11)*(x22)))+(((x10)*(x20)))+(((IkReal(0.304750000000000))*(x2)*(x23)))+(((IkReal(0.266305430000000))*(x20))));
eetrans[2]=((IkReal(0.138400000000000))+(((IkReal(-0.0137000000000000))*(x0)*(x5)))+(((IkReal(-1.00000000000000))*(x11)*(x19)))+(((IkReal(-0.304750000000000))*(x5)*(x7)))+(((x10)*(x6)))+(((IkReal(0.304750000000000))*(x0)*(x4)*(x6)))+(((IkReal(0.266305430000000))*(x6))));
IkReal x26=((IkReal(1.00000000000000))*(x14));
eerot[0]=((((x9)*(((((x21)*(x6)))+(((x7)*(((((IkReal(-1.00000000000000))*(x18)*(x26)))+(x17)))))))))+(((x8)*(((((IkReal(-1.00000000000000))*(x16)*(x24)))+(((IkReal(-1.00000000000000))*(x2)*(x26))))))));
eerot[1]=((((x9)*(((((x22)*(x6)))+(((x7)*(((((IkReal(-1.00000000000000))*(x24)))+(((IkReal(-1.00000000000000))*(x14)*(x20)))))))))))+(((x8)*(((((x1)*(x4)))+(((IkReal(-1.00000000000000))*(x16)*(x17))))))));
eerot[2]=((((IkReal(-1.00000000000000))*(x15)*(x3)*(x8)))+(((x9)*(((((IkReal(-1.00000000000000))*(x0)*(x16)))+(((IkReal(-1.00000000000000))*(x14)*(x23))))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=((IkReal(0.0962780000000000))+(px));
new_r01=r01;
new_py=py;
new_r02=r02;
new_pz=((IkReal(-0.138400000000000))+(pz));
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
IkReal op[72], zeror[48];
int numroots;
IkReal x27=((IkReal(0.980610860000000))*(pz));
IkReal x28=((IkReal(0.000502320000000000))*(py));
IkReal x29=((IkReal(1.00000000000000))*(pp));
IkReal x30=((IkReal(0.0846108600000000))*(pz));
IkReal x31=(px)*(px);
IkReal x32=(pz)*(pz);
IkReal x33=((IkReal(0.00511599572605407))*(r00));
IkReal x34=((IkReal(0.113802771466139))*(r02));
IkReal x35=((IkReal(0.000133770543597600))*(r01));
IkReal x36=((IkReal(0.0912705661738607))*(r01));
IkReal x37=((IkReal(2.12508635976000e-5))*(r02));
IkReal x38=((pp)*(r02));
IkReal x39=((IkReal(0.0102319914521081))*(r02));
IkReal x40=((IkReal(0.227605542932279))*(r00));
IkReal x41=((IkReal(0.000246290223597600))*(r02));
IkReal x42=((IkReal(0.147339099106139))*(r01));
IkReal x43=((IkReal(0.00100464000000000))*(px));
IkReal x44=(py)*(py);
IkReal x45=((IkReal(0.0102319914521081))*(r01));
IkReal x46=((IkReal(0.000267541087195200))*(r00));
IkReal x47=((IkReal(0.182541132347721))*(r00));
IkReal x48=((IkReal(0.455211085864557))*(r01));
IkReal x49=((IkReal(0.294678198212279))*(r00));
IkReal x50=((IkReal(0.448000000000000))*(py));
IkReal x51=((IkReal(0.000112519680000000))+(((IkReal(-1.00000000000000))*(x50))));
IkReal x52=((IkReal(4.25017271952000e-5))*(r00));
IkReal x53=((pp)*(r01));
IkReal x54=((IkReal(0.000492580447195200))*(r00));
IkReal x55=((pz)*(r02));
IkReal x56=((py)*(r01));
IkReal x57=((IkReal(4.00000000000000))*(px));
IkReal x58=((px)*(r00));
IkReal x59=((IkReal(0.179819524200164))*(pz));
IkReal x60=((py)*(r02));
IkReal x61=((py)*(r00));
IkReal x62=((pz)*(r01));
IkReal x63=((IkReal(0.179819524200164))*(py));
IkReal x64=((IkReal(8.00000000000000))*(py));
IkReal x65=((IkReal(1.96122172000000))*(px));
IkReal x66=((px)*(r02));
IkReal x67=((IkReal(2.00000000000000))*(py));
IkReal x68=((pz)*(r00));
IkReal x69=((px)*(r01));
IkReal x70=((IkReal(2.00000000000000))*(pz));
IkReal x71=((IkReal(0.0899097621000820))*(px));
IkReal x72=((pp)*(r00));
IkReal x73=((IkReal(0.000112519680000000))+(x50));
IkReal x74=((IkReal(2.25817358490566e-5))*(x61));
IkReal x75=((IkReal(0.0449548810500410))*(x72));
IkReal x76=((IkReal(0.0239434578572600))*(x68));
IkReal x77=((r02)*(x28));
IkReal x78=((IkReal(0.532610860000000))*(x58));
IkReal x79=((IkReal(0.532610860000000))*(x56));
IkReal x80=((IkReal(0.000502320000000000))*(x62));
IkReal x81=((IkReal(2.25817358490566e-5))*(x69));
IkReal x82=((IkReal(0.0239434578572600))*(x66));
IkReal x83=((IkReal(0.532610860000000))*(x55));
IkReal x84=((IkReal(0.000502320000000000))*(x55));
IkReal x85=((r01)*(x28));
IkReal x86=((IkReal(0.000502320000000000))*(x58));
IkReal x87=((IkReal(0.0846108600000000))*(x60));
IkReal x88=((r01)*(x30));
IkReal x89=((r01)*(x29));
IkReal x90=((IkReal(2.00000000000000))*(x72));
IkReal x91=((IkReal(0.00100464000000000))*(x61));
IkReal x92=((IkReal(0.0899097621000820))*(x38));
IkReal x93=((IkReal(4.51634716981132e-5))*(x60));
IkReal x94=((r01)*(x43));
IkReal x95=((IkReal(4.51634716981132e-5))*(x62));
IkReal x96=((IkReal(0.980610860000000))*(x60));
IkReal x97=((r01)*(x27));
IkReal x98=((r02)*(x29));
IkReal x99=((IkReal(-0.896000000000000))*(px));
IkReal x100=((IkReal(0.00100464000000000))*(x68));
IkReal x101=((IkReal(0.0478869157145201))*(x62));
IkReal x102=((IkReal(0.0899097621000820))*(x53));
IkReal x103=((IkReal(0.0478869157145201))*(x60));
IkReal x104=((r02)*(x43));
IkReal x105=((IkReal(0.169221720000000))*(x68));
IkReal x106=((IkReal(0.169221720000000))*(x66));
IkReal x107=((IkReal(4.00000000000000))*(x53));
IkReal x108=((IkReal(9.03269433962264e-5))*(x68));
IkReal x109=((IkReal(9.03269433962264e-5))*(x66));
IkReal x110=((IkReal(1.96122172000000))*(x68));
IkReal x111=((r02)*(x65));
IkReal x112=((IkReal(0.169221720000000))*(x69));
IkReal x113=((IkReal(0.169221720000000))*(x61));
IkReal x114=((r01)*(x65));
IkReal x115=((IkReal(1.96122172000000))*(x61));
IkReal x116=((IkReal(0.0912704400111695))+(x28));
IkReal x117=((IkReal(-0.147339225268831))+(x27));
IkReal x118=((r00)*(x31));
IkReal x119=((r02)*(x32));
IkReal x120=((r01)*(x44));
IkReal x121=((x28)+(x29));
IkReal x122=((x56)*(x71));
IkReal x123=((x58)*(x70));
IkReal x124=((IkReal(0.0899097621000820))*(x118));
IkReal x125=((IkReal(2.00000000000000))*(x119));
IkReal x126=((x56)*(x70));
IkReal x127=((x55)*(x71));
IkReal x128=((x58)*(x67));
IkReal x129=((IkReal(2.00000000000000))*(x120));
IkReal x130=((x55)*(x67));
IkReal x131=((IkReal(0.179819524200164))*(x119));
IkReal x132=((x58)*(x59));
IkReal x133=((x55)*(x57));
IkReal x134=((IkReal(4.00000000000000))*(x118));
IkReal x135=((x56)*(x59));
IkReal x136=((x56)*(x57));
IkReal x137=((x58)*(x63));
IkReal x138=((IkReal(0.179819524200164))*(x120));
IkReal x139=((x55)*(x63));
IkReal x140=((IkReal(8.00000000000000))*(x120));
IkReal x141=((x55)*(x64));
IkReal x142=((x58)*(x64));
IkReal x143=((x103)+(x46));
IkReal x144=((x102)+(x45));
IkReal x145=((x37)+(x88));
IkReal x146=((x75)+(x33));
IkReal x147=((x101)+(x46));
IkReal x148=((x49)+(x90));
IkReal x149=((x77)+(x38));
IkReal x150=((x35)+(x82));
IkReal x151=((x38)+(x80));
IkReal x152=((x39)+(x92));
IkReal x153=((x40)+(x91));
IkReal x154=((x42)+(x89));
IkReal x155=((x37)+(x87));
IkReal x156=((x90)+(x93));
IkReal x157=((x76)+(x74));
IkReal x158=((x80)+(x98));
IkReal x159=((x77)+(x98));
IkReal x160=((x82)+(x81));
IkReal x161=((x95)+(x94));
IkReal x162=((x76)+(x35)+(x81));
IkReal x163=((x86)+(x84)+(x85));
IkReal x164=((x79)+(x78)+(x83));
IkReal x165=((x163)+(x53));
IkReal x166=((x137)+(x139)+(x138));
IkReal x167=((x134)+(x136)+(x133));
IkReal x168=((x135)+(x131)+(x132));
IkReal x169=((x130)+(x128)+(x129));
IkReal x170=((x127)+(x124)+(x122));
IkReal x171=((x169)+(x41));
IkReal x172=((x140)+(x141)+(x142)+(x48));
IkReal x173=((x126)+(x125)+(x123)+(x35)+(x34));
IkReal x174=((x126)+(x125)+(x123)+(x34)+(x81));
IkReal x175=((x126)+(x125)+(x123)+(x74)+(x34)+(x82));
IkReal x176=((x170)+(x164));
op[0]=((((IkReal(-1.00000000000000))*(x121)))+(x117));
op[1]=x73;
op[2]=x65;
op[3]=IkReal(0);
op[4]=((IkReal(-0.147339225268831))+(((IkReal(-1.00000000000000))*(x27)))+(((IkReal(-1.00000000000000))*(x121))));
op[5]=x73;
op[6]=x73;
op[7]=((IkReal(0.0912704400111695))+(((IkReal(-1.00000000000000))*(x121)))+(x30));
op[8]=IkReal(0);
op[9]=((IkReal(0.169221720000000))*(px));
op[10]=x73;
op[11]=((IkReal(0.0912704400111695))+(((IkReal(-1.00000000000000))*(x30)))+(((IkReal(-1.00000000000000))*(x121))));
op[12]=((((IkReal(-1.00000000000000))*(x146)))+(((IkReal(-1.00000000000000))*(x150)))+(((IkReal(-1.00000000000000))*(x159)))+(((IkReal(-1.00000000000000))*(x164)))+(((IkReal(-1.00000000000000))*(x74)))+(x170)+(x174)+(x76)+(x80));
op[13]=((((IkReal(-1.00000000000000))*(x155)))+(x169)+(x163)+(x36)+(x88)+(((IkReal(-1.00000000000000))*(x89))));
op[14]=((((IkReal(-1.00000000000000))*(x168)))+(x167)+(x152)+(x40)+(x93)+(x94)+(((IkReal(-1.00000000000000))*(x90)))+(((IkReal(-1.00000000000000))*(x91)))+(((IkReal(-1.00000000000000))*(x95))));
op[15]=((((IkReal(-1.00000000000000))*(x113)))+(x112)+(((IkReal(-1.00000000000000))*(x52))));
op[16]=((((IkReal(-1.00000000000000))*(x150)))+(((IkReal(-1.00000000000000))*(x176)))+(((IkReal(-1.00000000000000))*(x174)))+(x157)+(x146)+(x149)+(((IkReal(-1.00000000000000))*(x80))));
op[17]=((x169)+(x163)+(x155)+(x36)+(((IkReal(-1.00000000000000))*(x89)))+(((IkReal(-1.00000000000000))*(x88))));
op[18]=((((IkReal(-1.00000000000000))*(x154)))+(((IkReal(-1.00000000000000))*(x41)))+(x169)+(x163)+(x97)+(((IkReal(-1.00000000000000))*(x96))));
op[19]=((((IkReal(-1.00000000000000))*(x146)))+(((IkReal(-1.00000000000000))*(x175)))+(x176)+(x162)+(x149)+(((IkReal(-1.00000000000000))*(x80))));
op[20]=((((IkReal(-1.00000000000000))*(x115)))+(x114)+(((IkReal(-1.00000000000000))*(x54))));
op[21]=((((IkReal(-1.00000000000000))*(x168)))+(((IkReal(-1.00000000000000))*(x167)))+(((IkReal(-1.00000000000000))*(x161)))+(((IkReal(-1.00000000000000))*(x40)))+(x156)+(x152)+(x91));
op[22]=((((IkReal(-1.00000000000000))*(x154)))+(x171)+(x163)+(x96)+(((IkReal(-1.00000000000000))*(x97))));
op[23]=((((IkReal(-1.00000000000000))*(x159)))+(((IkReal(-1.00000000000000))*(x160)))+(((IkReal(-1.00000000000000))*(x170)))+(x173)+(x164)+(x157)+(x146)+(x80));
op[24]=x43;
op[25]=x99;
op[26]=((IkReal(3.92244344000000))*(py));
op[27]=IkReal(0);
op[28]=x43;
op[29]=x99;
op[30]=x99;
op[31]=x43;
op[32]=IkReal(0);
op[33]=((IkReal(0.338443440000000))*(py));
op[34]=x99;
op[35]=x43;
op[36]=((((IkReal(-1.00000000000000))*(x144)))+(((IkReal(-1.00000000000000))*(x100)))+(((IkReal(-1.00000000000000))*(x103)))+(x166)+(x147)+(x104));
op[37]=((((IkReal(-1.00000000000000))*(x167)))+(((IkReal(-1.00000000000000))*(x47)))+(((IkReal(-1.00000000000000))*(x105)))+(x106)+(x90));
op[38]=((((IkReal(-1.00000000000000))*(x109)))+(((IkReal(-1.00000000000000))*(x107)))+(x172)+(x108));
op[39]=((IkReal(-8.50034543904000e-5))*(r01));
op[40]=((((IkReal(-1.00000000000000))*(x166)))+(((IkReal(-1.00000000000000))*(x104)))+(((IkReal(-1.00000000000000))*(x103)))+(x144)+(x147)+(x100));
op[41]=((((IkReal(-1.00000000000000))*(x167)))+(((IkReal(-1.00000000000000))*(x47)))+(((IkReal(-1.00000000000000))*(x106)))+(x105)+(x90));
op[42]=((((IkReal(-1.00000000000000))*(x167)))+(((IkReal(-1.00000000000000))*(x110)))+(x148)+(x111));
op[43]=((((IkReal(-1.00000000000000))*(x144)))+(((IkReal(-1.00000000000000))*(x143)))+(((IkReal(-1.00000000000000))*(x104)))+(x166)+(x100)+(x101));
op[44]=((IkReal(-0.000985160894390400))*(r01));
op[45]=((((IkReal(-1.00000000000000))*(x172)))+(((IkReal(-1.00000000000000))*(x109)))+(x108)+(x107));
op[46]=((((IkReal(-1.00000000000000))*(x167)))+(((IkReal(-1.00000000000000))*(x111)))+(x148)+(x110));
op[47]=((((IkReal(-1.00000000000000))*(x143)))+(((IkReal(-1.00000000000000))*(x166)))+(((IkReal(-1.00000000000000))*(x100)))+(x144)+(x104)+(x101));
op[48]=((((IkReal(-1.00000000000000))*(x29)))+(x117)+(x28));
op[49]=x51;
op[50]=((IkReal(-1.96122172000000))*(px));
op[51]=IkReal(0);
op[52]=((IkReal(-0.147339225268831))+(((IkReal(-1.00000000000000))*(x27)))+(((IkReal(-1.00000000000000))*(x29)))+(x28));
op[53]=x51;
op[54]=x51;
op[55]=((((IkReal(-1.00000000000000))*(x29)))+(x116)+(x30));
op[56]=IkReal(0);
op[57]=((IkReal(-0.169221720000000))*(px));
op[58]=x51;
op[59]=((((IkReal(-1.00000000000000))*(x29)))+(((IkReal(-1.00000000000000))*(x30)))+(x116));
op[60]=((((IkReal(-1.00000000000000))*(x157)))+(((IkReal(-1.00000000000000))*(x158)))+(((IkReal(-1.00000000000000))*(x176)))+(x174)+(x150)+(x146)+(x77));
op[61]=((((IkReal(-1.00000000000000))*(x145)))+(((IkReal(-1.00000000000000))*(x169)))+(((IkReal(-1.00000000000000))*(x36)))+(x165)+(x87));
op[62]=((((IkReal(-1.00000000000000))*(x153)))+(((IkReal(-1.00000000000000))*(x168)))+(((IkReal(-1.00000000000000))*(x167)))+(x161)+(x152)+(x90)+(((IkReal(-1.00000000000000))*(x93))));
op[63]=((((IkReal(-1.00000000000000))*(x113)))+(x112)+(x52));
op[64]=((((IkReal(-1.00000000000000))*(x146)))+(((IkReal(-1.00000000000000))*(x164)))+(((IkReal(-1.00000000000000))*(x76)))+(((IkReal(-1.00000000000000))*(x77)))+(((IkReal(-1.00000000000000))*(x174)))+(x170)+(x151)+(x150)+(x74));
op[65]=((((IkReal(-1.00000000000000))*(x169)))+(((IkReal(-1.00000000000000))*(x36)))+(x165)+(x145)+(((IkReal(-1.00000000000000))*(x87))));
op[66]=((((IkReal(-1.00000000000000))*(x171)))+(x165)+(x42)+(x96)+(((IkReal(-1.00000000000000))*(x97))));
op[67]=((((IkReal(-1.00000000000000))*(x157)))+(((IkReal(-1.00000000000000))*(x77)))+(((IkReal(-1.00000000000000))*(x170)))+(((IkReal(-1.00000000000000))*(x173)))+(x160)+(x164)+(x151)+(x146));
op[68]=((((IkReal(-1.00000000000000))*(x115)))+(x114)+(x54));
op[69]=((((IkReal(-1.00000000000000))*(x156)))+(((IkReal(-1.00000000000000))*(x168)))+(x167)+(x153)+(x152)+(x95)+(((IkReal(-1.00000000000000))*(x94))));
op[70]=((((IkReal(-1.00000000000000))*(x169)))+(x165)+(x42)+(x41)+(x97)+(((IkReal(-1.00000000000000))*(x96))));
op[71]=((((IkReal(-1.00000000000000))*(x146)))+(((IkReal(-1.00000000000000))*(x158)))+(((IkReal(-1.00000000000000))*(x162)))+(x175)+(x176)+(x77));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j0array[16], cj0array[16], sj0array[16], j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ij0 += 3)
{
IkReal htj0 = zeror[ij0+0], htj1 = zeror[ij0+1], htj2 = zeror[ij0+2];
j0array[numsolutions]=((IkReal(2.00000000000000))*(atan(htj0)));
j1array[numsolutions]=((IkReal(2.00000000000000))*(atan(htj1)));
j2array[numsolutions]=((IkReal(2.00000000000000))*(atan(htj2)));
IkReal x177=(htj0)*(htj0);
IkReal x178=(htj1)*(htj1);
IkReal x179=(htj2)*(htj2);
cj0array[numsolutions]=((((IKabs(((IkReal(1.00000000000000))+(x177))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+(x177)))):(IkReal)1.0e30))*(((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x177))))));
cj1array[numsolutions]=((((IKabs(((IkReal(1.00000000000000))+(x178))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+(x178)))):(IkReal)1.0e30))*(((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x178))))));
cj2array[numsolutions]=((((IKabs(((IkReal(1.00000000000000))+(x179))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+(x179)))):(IkReal)1.0e30))*(((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x179))))));
sj0array[numsolutions]=((IkReal(2.00000000000000))*(htj0)*(((IKabs(((IkReal(1.00000000000000))+((htj0)*(htj0)))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+((htj0)*(htj0))))):(IkReal)1.0e30)));
sj1array[numsolutions]=((IkReal(2.00000000000000))*(htj1)*(((IKabs(((IkReal(1.00000000000000))+((htj1)*(htj1)))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+((htj1)*(htj1))))):(IkReal)1.0e30)));
sj2array[numsolutions]=((IkReal(2.00000000000000))*(htj2)*(((IKabs(((IkReal(1.00000000000000))+((htj2)*(htj2)))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+((htj2)*(htj2))))):(IkReal)1.0e30)));
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j0valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj0 = 16;
_nj1 = 1;
_nj2 = 1;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
_ij1[0] = 0; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( !j0valid[iij0] ) { continue; }
if( IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(cj1array[ij0]-cj1array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij0]-sj1array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij0]-cj2array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij0]-sj2array[iij0]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j0valid[iij0]=false; _ij0[1] = iij0; _ij1[1] = 0; _ij2[1] = 0;  break; 
}
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

    j1 = j1array[ij0]; cj1 = cj1array[ij0]; sj1 = sj1array[ij0];

    j2 = j2array[ij0]; cj2 = cj2array[ij0]; sj2 = sj2array[ij0];

{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(sj2);
dummyeval[0]=sj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign(cj2);
dummyeval[0]=cj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(-0.266305430000000))+(((cj1)*(pz)))+(((cj0)*(px)*(sj1)))+(((py)*(sj0)*(sj1))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x180=((IkReal(3.27476008084117))*(cj0));
IkReal x181=((cj1)*(px));
IkReal x182=((px)*(sj0));
IkReal x183=((pz)*(sj1));
IkReal x184=((IkReal(0.147216449901638))*(cj0));
IkReal x185=((cj1)*(py)*(sj0));
if( IKabs(((IkReal(0.0329395098944095))+(((x180)*(x181)))+(((IkReal(3.27476008084117))*(x185)))+(((IkReal(-1.00000000000000))*(py)*(x184)))+(((IkReal(-3.27476008084117))*(x183)))+(((IkReal(0.147216449901638))*(x182))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.732723769366519))+(((IkReal(-0.147216449901638))*(x183)))+(((IkReal(-3.27476008084117))*(x182)))+(((IkReal(0.147216449901638))*(x185)))+(((py)*(x180)))+(((x181)*(x184))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.0329395098944095))+(((x180)*(x181)))+(((IkReal(3.27476008084117))*(x185)))+(((IkReal(-1.00000000000000))*(py)*(x184)))+(((IkReal(-3.27476008084117))*(x183)))+(((IkReal(0.147216449901638))*(x182)))))+IKsqr(((IkReal(-0.732723769366519))+(((IkReal(-0.147216449901638))*(x183)))+(((IkReal(-3.27476008084117))*(x182)))+(((IkReal(0.147216449901638))*(x185)))+(((py)*(x180)))+(((x181)*(x184)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((IkReal(0.0329395098944095))+(((x180)*(x181)))+(((IkReal(3.27476008084117))*(x185)))+(((IkReal(-1.00000000000000))*(py)*(x184)))+(((IkReal(-3.27476008084117))*(x183)))+(((IkReal(0.147216449901638))*(x182)))), ((IkReal(-0.732723769366519))+(((IkReal(-0.147216449901638))*(x183)))+(((IkReal(-3.27476008084117))*(x182)))+(((IkReal(0.147216449901638))*(x185)))+(((py)*(x180)))+(((x181)*(x184)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x186=IKsin(j3);
IkReal x187=IKcos(j3);
IkReal x188=((IkReal(1.00000000000000))*(cj1));
evalcond[0]=((IkReal(-0.223748840000000))+(((IkReal(-0.304750000000000))*(x187)))+(((IkReal(0.0137000000000000))*(x186)))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj0)*(px)*(x188)))+(((IkReal(0.0137000000000000))*(x187)))+(((IkReal(0.304750000000000))*(x186)))+(((pz)*(sj1)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x188))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x189=((IkReal(1.00000000000000))*(cj1));
IkReal x190=((py)*(sj0));
IkReal x191=((cj0)*(px));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x189)))+(((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x189))));
evalcond[2]=((IkReal(-0.210048840000000))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py))));
evalcond[3]=((IkReal(0.304750000000000))+(((IkReal(-1.00000000000000))*(x189)*(x191)))+(((IkReal(-1.00000000000000))*(x189)*(x190)))+(((pz)*(sj1))));
evalcond[4]=((IkReal(-0.266305430000000))+(((sj1)*(x190)))+(((sj1)*(x191)))+(((cj1)*(pz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x192=((IkReal(1.00000000000000))*(sj1));
if( IKabs(((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x192)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x192)))+(((IkReal(-1.00000000000000))*(cj1)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x192)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x192)))+(((IkReal(-1.00000000000000))*(cj1)*(r02)))))+IKsqr(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x192)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x192)))+(((IkReal(-1.00000000000000))*(cj1)*(r02)))), ((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(IKcos(j4))+(((cj0)*(r01))));
evalcond[1]=((((cj1)*(r02)))+(IKsin(j4))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x193=((IkReal(1.00000000000000))*(cj1));
IkReal x194=((py)*(sj0));
IkReal x195=((cj0)*(px));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x193)))+(((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x193))));
evalcond[2]=((IkReal(-0.210048840000000))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py))));
evalcond[3]=((IkReal(0.304750000000000))+(((pz)*(sj1)))+(((IkReal(-1.00000000000000))*(x193)*(x194)))+(((IkReal(-1.00000000000000))*(x193)*(x195))));
evalcond[4]=((IkReal(-0.266305430000000))+(((sj1)*(x194)))+(((sj1)*(x195)))+(((cj1)*(pz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x196=((IkReal(1.00000000000000))*(sj1));
if( IKabs(((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x196)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x196)))+(((IkReal(-1.00000000000000))*(cj1)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x196)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x196)))+(((IkReal(-1.00000000000000))*(cj1)*(r02)))))+IKsqr(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x196)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x196)))+(((IkReal(-1.00000000000000))*(cj1)*(r02)))), ((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(IKcos(j4))+(((cj0)*(r01))));
evalcond[1]=((((cj1)*(r02)))+(IKsin(j4))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x197=((IkReal(1.00000000000000))*(cj1));
IkReal x198=((py)*(sj0));
IkReal x199=((cj0)*(px));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x197)))+(((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x197))));
evalcond[2]=((IkReal(-0.237448840000000))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py))));
evalcond[3]=((IkReal(-0.304750000000000))+(((IkReal(-1.00000000000000))*(x197)*(x199)))+(((IkReal(-1.00000000000000))*(x197)*(x198)))+(((pz)*(sj1))));
evalcond[4]=((IkReal(-0.266305430000000))+(((sj1)*(x198)))+(((sj1)*(x199)))+(((cj1)*(pz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x200=((IkReal(1.00000000000000))*(sj1));
if( IKabs(((((IkReal(-1.00000000000000))*(r01)*(sj0)*(x200)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x200)))+(((IkReal(-1.00000000000000))*(cj1)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(r01)*(sj0)*(x200)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x200)))+(((IkReal(-1.00000000000000))*(cj1)*(r02)))))+IKsqr(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(-1.00000000000000))*(r01)*(sj0)*(x200)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x200)))+(((IkReal(-1.00000000000000))*(cj1)*(r02)))), ((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(IKcos(j4))))+(((cj0)*(r01))));
evalcond[1]=((((cj1)*(r02)))+(IKsin(j4))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x201=((IkReal(1.00000000000000))*(cj1));
IkReal x202=((py)*(sj0));
IkReal x203=((cj0)*(px));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r01)*(sj0)*(x201)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x201)))+(((r02)*(sj1))));
evalcond[2]=((IkReal(-0.237448840000000))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py))));
evalcond[3]=((IkReal(-0.304750000000000))+(((IkReal(-1.00000000000000))*(x201)*(x203)))+(((IkReal(-1.00000000000000))*(x201)*(x202)))+(((pz)*(sj1))));
evalcond[4]=((IkReal(-0.266305430000000))+(((sj1)*(x202)))+(((sj1)*(x203)))+(((cj1)*(pz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x204=((IkReal(1.00000000000000))*(sj1));
if( IKabs(((((IkReal(-1.00000000000000))*(r01)*(sj0)*(x204)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x204)))+(((IkReal(-1.00000000000000))*(cj1)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(r01)*(sj0)*(x204)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x204)))+(((IkReal(-1.00000000000000))*(cj1)*(r02)))))+IKsqr(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(-1.00000000000000))*(r01)*(sj0)*(x204)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x204)))+(((IkReal(-1.00000000000000))*(cj1)*(r02)))), ((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(IKcos(j4))))+(((cj0)*(r01))));
evalcond[1]=((((cj1)*(r02)))+(IKsin(j4))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x205=((IkReal(1.00000000000000))*(r02));
IkReal x206=((IkReal(1.00000000000000))*(sj1));
IkReal x207=((cj0)*(r00));
IkReal x208=((r01)*(sj0));
if( IKabs(((((IkReal(-1.00000000000000))*(cj1)*(x205)))+(((IkReal(-1.00000000000000))*(x206)*(x208)))+(((IkReal(-1.00000000000000))*(x206)*(x207))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((((cj1)*(x207)))+(((cj1)*(x208)))+(((IkReal(-1.00000000000000))*(sj1)*(x205))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj1)*(x205)))+(((IkReal(-1.00000000000000))*(x206)*(x208)))+(((IkReal(-1.00000000000000))*(x206)*(x207)))))+IKsqr(((((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((((cj1)*(x207)))+(((cj1)*(x208)))+(((IkReal(-1.00000000000000))*(sj1)*(x205)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj1)*(x205)))+(((IkReal(-1.00000000000000))*(x206)*(x208)))+(((IkReal(-1.00000000000000))*(x206)*(x207)))), ((((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((((cj1)*(x207)))+(((cj1)*(x208)))+(((IkReal(-1.00000000000000))*(sj1)*(x205)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x209=IKcos(j4);
IkReal x210=((cj0)*(r00));
IkReal x211=((r01)*(sj0));
IkReal x212=((IkReal(1.00000000000000))*(cj1));
evalcond[0]=((((sj3)*(x209)))+(((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01))));
evalcond[1]=((((cj3)*(x209)))+(((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(x210)*(x212)))+(((IkReal(-1.00000000000000))*(x211)*(x212))));
evalcond[2]=((((cj1)*(r02)))+(IKsin(j4))+(((sj1)*(x211)))+(((sj1)*(x210))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x213=((IkReal(1.00000000000000))*(cj0));
if( IKabs(((((IkReal(-1.00000000000000))*(r00)*(sj1)*(x213)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(r01)*(x213))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(r00)*(sj1)*(x213)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r02)))))+IKsqr(((((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(r01)*(x213)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(-1.00000000000000))*(r00)*(sj1)*(x213)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r02)))), ((((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(r01)*(x213)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x214=IKcos(j4);
IkReal x215=((cj0)*(r00));
IkReal x216=((r01)*(sj0));
IkReal x217=((IkReal(1.00000000000000))*(cj1));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((sj3)*(x214)))+(((cj0)*(r01))));
evalcond[1]=((((r02)*(sj1)))+(((cj3)*(x214)))+(((IkReal(-1.00000000000000))*(x216)*(x217)))+(((IkReal(-1.00000000000000))*(x215)*(x217))));
evalcond[2]=((((cj1)*(r02)))+(IKsin(j4))+(((sj1)*(x216)))+(((sj1)*(x215))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(-0.266305430000000))+(((cj1)*(pz)))+(((cj0)*(px)*(sj1)))+(((py)*(sj0)*(sj1))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x218=((IkReal(3.27476008084117))*(cj0));
IkReal x219=((cj1)*(px));
IkReal x220=((px)*(sj0));
IkReal x221=((pz)*(sj1));
IkReal x222=((IkReal(0.147216449901638))*(cj0));
IkReal x223=((cj1)*(py)*(sj0));
if( IKabs(((IkReal(0.0329395098944095))+(((x218)*(x219)))+(((IkReal(-1.00000000000000))*(py)*(x222)))+(((IkReal(0.147216449901638))*(x220)))+(((IkReal(3.27476008084117))*(x223)))+(((IkReal(-3.27476008084117))*(x221))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.732723769366519))+(((IkReal(-0.147216449901638))*(x221)))+(((py)*(x218)))+(((x219)*(x222)))+(((IkReal(0.147216449901638))*(x223)))+(((IkReal(-3.27476008084117))*(x220))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.0329395098944095))+(((x218)*(x219)))+(((IkReal(-1.00000000000000))*(py)*(x222)))+(((IkReal(0.147216449901638))*(x220)))+(((IkReal(3.27476008084117))*(x223)))+(((IkReal(-3.27476008084117))*(x221)))))+IKsqr(((IkReal(-0.732723769366519))+(((IkReal(-0.147216449901638))*(x221)))+(((py)*(x218)))+(((x219)*(x222)))+(((IkReal(0.147216449901638))*(x223)))+(((IkReal(-3.27476008084117))*(x220)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((IkReal(0.0329395098944095))+(((x218)*(x219)))+(((IkReal(-1.00000000000000))*(py)*(x222)))+(((IkReal(0.147216449901638))*(x220)))+(((IkReal(3.27476008084117))*(x223)))+(((IkReal(-3.27476008084117))*(x221)))), ((IkReal(-0.732723769366519))+(((IkReal(-0.147216449901638))*(x221)))+(((py)*(x218)))+(((x219)*(x222)))+(((IkReal(0.147216449901638))*(x223)))+(((IkReal(-3.27476008084117))*(x220)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x224=IKsin(j3);
IkReal x225=IKcos(j3);
IkReal x226=((IkReal(1.00000000000000))*(cj1));
evalcond[0]=((IkReal(-0.223748840000000))+(((IkReal(0.0137000000000000))*(x224)))+(((IkReal(-0.304750000000000))*(x225)))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py))));
evalcond[1]=((((IkReal(0.304750000000000))*(x224)))+(((IkReal(0.0137000000000000))*(x225)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x226)))+(((pz)*(sj1)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x226))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x227=((IkReal(1.00000000000000))*(cj1));
IkReal x228=((py)*(sj0));
IkReal x229=((cj0)*(px));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x227)))+(((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x227))));
evalcond[2]=((IkReal(-0.210048840000000))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py))));
evalcond[3]=((IkReal(0.304750000000000))+(((IkReal(-1.00000000000000))*(x227)*(x228)))+(((IkReal(-1.00000000000000))*(x227)*(x229)))+(((pz)*(sj1))));
evalcond[4]=((IkReal(-0.266305430000000))+(((cj1)*(pz)))+(((sj1)*(x228)))+(((sj1)*(x229))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x230=((IkReal(1.00000000000000))*(sj1));
if( IKabs(((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x230)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x230)))+(((IkReal(-1.00000000000000))*(cj1)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x230)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x230)))+(((IkReal(-1.00000000000000))*(cj1)*(r02)))))+IKsqr(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x230)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x230)))+(((IkReal(-1.00000000000000))*(cj1)*(r02)))), ((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(IKcos(j4))+(((cj0)*(r01))));
evalcond[1]=((((cj1)*(r02)))+(IKsin(j4))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x231=((IkReal(1.00000000000000))*(cj1));
IkReal x232=((py)*(sj0));
IkReal x233=((cj0)*(px));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x231)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x231)))+(((r02)*(sj1))));
evalcond[2]=((IkReal(-0.210048840000000))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py))));
evalcond[3]=((IkReal(0.304750000000000))+(((IkReal(-1.00000000000000))*(x231)*(x232)))+(((IkReal(-1.00000000000000))*(x231)*(x233)))+(((pz)*(sj1))));
evalcond[4]=((IkReal(-0.266305430000000))+(((sj1)*(x233)))+(((sj1)*(x232)))+(((cj1)*(pz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x234=((IkReal(1.00000000000000))*(sj1));
if( IKabs(((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x234)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x234)))+(((IkReal(-1.00000000000000))*(cj1)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x234)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x234)))+(((IkReal(-1.00000000000000))*(cj1)*(r02)))))+IKsqr(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x234)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x234)))+(((IkReal(-1.00000000000000))*(cj1)*(r02)))), ((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(IKcos(j4))+(((cj0)*(r01))));
evalcond[1]=((((cj1)*(r02)))+(IKsin(j4))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x235=((IkReal(1.00000000000000))*(cj1));
IkReal x236=((py)*(sj0));
IkReal x237=((cj0)*(px));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x235)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x235)))+(((r02)*(sj1))));
evalcond[2]=((IkReal(-0.237448840000000))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py))));
evalcond[3]=((IkReal(-0.304750000000000))+(((IkReal(-1.00000000000000))*(x235)*(x236)))+(((IkReal(-1.00000000000000))*(x235)*(x237)))+(((pz)*(sj1))));
evalcond[4]=((IkReal(-0.266305430000000))+(((sj1)*(x237)))+(((sj1)*(x236)))+(((cj1)*(pz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x238=((IkReal(1.00000000000000))*(sj1));
if( IKabs(((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x238)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x238)))+(((IkReal(-1.00000000000000))*(cj1)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x238)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x238)))+(((IkReal(-1.00000000000000))*(cj1)*(r02)))))+IKsqr(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x238)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x238)))+(((IkReal(-1.00000000000000))*(cj1)*(r02)))), ((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(IKcos(j4))))+(((cj0)*(r01))));
evalcond[1]=((((cj1)*(r02)))+(IKsin(j4))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x239=((IkReal(1.00000000000000))*(cj1));
IkReal x240=((py)*(sj0));
IkReal x241=((cj0)*(px));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x239)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x239)))+(((r02)*(sj1))));
evalcond[2]=((IkReal(-0.237448840000000))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py))));
evalcond[3]=((IkReal(-0.304750000000000))+(((pz)*(sj1)))+(((IkReal(-1.00000000000000))*(x239)*(x241)))+(((IkReal(-1.00000000000000))*(x239)*(x240))));
evalcond[4]=((IkReal(-0.266305430000000))+(((cj1)*(pz)))+(((sj1)*(x240)))+(((sj1)*(x241))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x242=((IkReal(1.00000000000000))*(sj1));
if( IKabs(((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x242)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x242)))+(((IkReal(-1.00000000000000))*(cj1)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x242)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x242)))+(((IkReal(-1.00000000000000))*(cj1)*(r02)))))+IKsqr(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x242)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x242)))+(((IkReal(-1.00000000000000))*(cj1)*(r02)))), ((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(IKcos(j4))))+(((cj0)*(r01))));
evalcond[1]=((((cj1)*(r02)))+(IKsin(j4))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x243=((IkReal(1.00000000000000))*(r02));
IkReal x244=((IkReal(1.00000000000000))*(sj1));
IkReal x245=((cj0)*(r00));
IkReal x246=((r01)*(sj0));
if( IKabs(((((IkReal(-1.00000000000000))*(cj1)*(x243)))+(((IkReal(-1.00000000000000))*(x244)*(x246)))+(((IkReal(-1.00000000000000))*(x244)*(x245))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(sj1)*(x243)))+(((cj1)*(x246)))+(((cj1)*(x245))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj1)*(x243)))+(((IkReal(-1.00000000000000))*(x244)*(x246)))+(((IkReal(-1.00000000000000))*(x244)*(x245)))))+IKsqr(((((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(sj1)*(x243)))+(((cj1)*(x246)))+(((cj1)*(x245)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj1)*(x243)))+(((IkReal(-1.00000000000000))*(x244)*(x246)))+(((IkReal(-1.00000000000000))*(x244)*(x245)))), ((((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(sj1)*(x243)))+(((cj1)*(x246)))+(((cj1)*(x245)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x247=IKcos(j4);
IkReal x248=((cj0)*(r00));
IkReal x249=((r01)*(sj0));
IkReal x250=((IkReal(1.00000000000000))*(cj1));
evalcond[0]=((((sj3)*(x247)))+(((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01))));
evalcond[1]=((((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(x248)*(x250)))+(((IkReal(-1.00000000000000))*(x249)*(x250)))+(((cj3)*(x247))));
evalcond[2]=((((cj1)*(r02)))+(IKsin(j4))+(((sj1)*(x248)))+(((sj1)*(x249))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x251=((IkReal(1.00000000000000))*(cj0));
if( IKabs(((((IkReal(-1.00000000000000))*(r00)*(sj1)*(x251)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(r01)*(x251))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(r00)*(sj1)*(x251)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r02)))))+IKsqr(((((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(r01)*(x251)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(-1.00000000000000))*(r00)*(sj1)*(x251)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r02)))), ((((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(r01)*(x251)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x252=IKcos(j4);
IkReal x253=((cj0)*(r00));
IkReal x254=((r01)*(sj0));
IkReal x255=((IkReal(1.00000000000000))*(cj1));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((sj3)*(x252)))+(((cj0)*(r01))));
evalcond[1]=((((cj3)*(x252)))+(((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(x254)*(x255)))+(((IkReal(-1.00000000000000))*(x253)*(x255))));
evalcond[2]=((((cj1)*(r02)))+(((sj1)*(x253)))+(((sj1)*(x254)))+(IKsin(j4)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(-0.266305430000000))+(((cj1)*(pz)))+(((cj0)*(px)*(sj1)))+(((py)*(sj0)*(sj1))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x256=((IkReal(3.27476008084117))*(cj0));
IkReal x257=((cj1)*(px));
IkReal x258=((px)*(sj0));
IkReal x259=((pz)*(sj1));
IkReal x260=((IkReal(0.147216449901638))*(cj0));
IkReal x261=((cj1)*(py)*(sj0));
if( IKabs(((IkReal(0.0330134596615241))+(((IkReal(-0.147216449901638))*(x258)))+(((x256)*(x257)))+(((IkReal(3.27476008084117))*(x261)))+(((IkReal(-3.27476008084117))*(x259)))+(((py)*(x260))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.734368746850327))+(((IkReal(-0.147216449901638))*(x259)))+(((IkReal(0.147216449901638))*(x261)))+(((IkReal(3.27476008084117))*(x258)))+(((IkReal(-1.00000000000000))*(py)*(x256)))+(((x257)*(x260))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.0330134596615241))+(((IkReal(-0.147216449901638))*(x258)))+(((x256)*(x257)))+(((IkReal(3.27476008084117))*(x261)))+(((IkReal(-3.27476008084117))*(x259)))+(((py)*(x260)))))+IKsqr(((IkReal(-0.734368746850327))+(((IkReal(-0.147216449901638))*(x259)))+(((IkReal(0.147216449901638))*(x261)))+(((IkReal(3.27476008084117))*(x258)))+(((IkReal(-1.00000000000000))*(py)*(x256)))+(((x257)*(x260)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((IkReal(0.0330134596615241))+(((IkReal(-0.147216449901638))*(x258)))+(((x256)*(x257)))+(((IkReal(3.27476008084117))*(x261)))+(((IkReal(-3.27476008084117))*(x259)))+(((py)*(x260)))), ((IkReal(-0.734368746850327))+(((IkReal(-0.147216449901638))*(x259)))+(((IkReal(0.147216449901638))*(x261)))+(((IkReal(3.27476008084117))*(x258)))+(((IkReal(-1.00000000000000))*(py)*(x256)))+(((x257)*(x260)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x262=IKsin(j3);
IkReal x263=IKcos(j3);
IkReal x264=((IkReal(1.00000000000000))*(cj1));
evalcond[0]=((IkReal(0.224251160000000))+(((IkReal(-0.0137000000000000))*(x262)))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py)))+(((IkReal(0.304750000000000))*(x263))));
evalcond[1]=((((IkReal(0.0137000000000000))*(x263)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x264)))+(((pz)*(sj1)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x264)))+(((IkReal(0.304750000000000))*(x262))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x265=((IkReal(1.00000000000000))*(cj1));
IkReal x266=((py)*(sj0));
IkReal x267=((cj0)*(px));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x265)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x265))));
evalcond[2]=((IkReal(0.210551160000000))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py))));
evalcond[3]=((IkReal(0.304750000000000))+(((IkReal(-1.00000000000000))*(x265)*(x266)))+(((IkReal(-1.00000000000000))*(x265)*(x267)))+(((pz)*(sj1))));
evalcond[4]=((IkReal(-0.266305430000000))+(((cj1)*(pz)))+(((sj1)*(x266)))+(((sj1)*(x267))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1)))))+IKsqr(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1)))), ((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(IKcos(j4))))+(((cj0)*(r01))));
evalcond[1]=((((IkReal(-1.00000000000000))*(IKsin(j4))))+(((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x268=((IkReal(1.00000000000000))*(cj1));
IkReal x269=((py)*(sj0));
IkReal x270=((cj0)*(px));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x268)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x268))));
evalcond[2]=((IkReal(0.210551160000000))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py))));
evalcond[3]=((IkReal(0.304750000000000))+(((IkReal(-1.00000000000000))*(x268)*(x269)))+(((IkReal(-1.00000000000000))*(x268)*(x270)))+(((pz)*(sj1))));
evalcond[4]=((IkReal(-0.266305430000000))+(((cj1)*(pz)))+(((sj1)*(x269)))+(((sj1)*(x270))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1)))))+IKsqr(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1)))), ((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(IKcos(j4))))+(((cj0)*(r01))));
evalcond[1]=((((IkReal(-1.00000000000000))*(IKsin(j4))))+(((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x271=((IkReal(1.00000000000000))*(cj1));
IkReal x272=((py)*(sj0));
IkReal x273=((cj0)*(px));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x271)))+(((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x271))));
evalcond[2]=((IkReal(0.237951160000000))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py))));
evalcond[3]=((IkReal(-0.304750000000000))+(((IkReal(-1.00000000000000))*(x271)*(x272)))+(((IkReal(-1.00000000000000))*(x271)*(x273)))+(((pz)*(sj1))));
evalcond[4]=((IkReal(-0.266305430000000))+(((cj1)*(pz)))+(((sj1)*(x273)))+(((sj1)*(x272))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1)))))+IKsqr(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1)))), ((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(IKcos(j4))+(((cj0)*(r01))));
evalcond[1]=((((IkReal(-1.00000000000000))*(IKsin(j4))))+(((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x274=((IkReal(1.00000000000000))*(cj1));
IkReal x275=((py)*(sj0));
IkReal x276=((cj0)*(px));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x274)))+(((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x274))));
evalcond[2]=((IkReal(0.237951160000000))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py))));
evalcond[3]=((IkReal(-0.304750000000000))+(((IkReal(-1.00000000000000))*(x274)*(x275)))+(((IkReal(-1.00000000000000))*(x274)*(x276)))+(((pz)*(sj1))));
evalcond[4]=((IkReal(-0.266305430000000))+(((cj1)*(pz)))+(((sj1)*(x275)))+(((sj1)*(x276))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1)))))+IKsqr(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1)))), ((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(IKcos(j4))+(((cj0)*(r01))));
evalcond[1]=((((IkReal(-1.00000000000000))*(IKsin(j4))))+(((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x277=((r01)*(sj0));
IkReal x278=((cj0)*(r00));
if( IKabs(((((cj1)*(r02)))+(((sj1)*(x278)))+(((sj1)*(x277))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((((cj1)*(x277)))+(((cj1)*(x278)))+(((IkReal(-1.00000000000000))*(r02)*(sj1))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj1)*(r02)))+(((sj1)*(x278)))+(((sj1)*(x277)))))+IKsqr(((((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((((cj1)*(x277)))+(((cj1)*(x278)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((cj1)*(r02)))+(((sj1)*(x278)))+(((sj1)*(x277)))), ((((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((((cj1)*(x277)))+(((cj1)*(x278)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x279=IKcos(j4);
IkReal x280=((cj0)*(r00));
IkReal x281=((r01)*(sj0));
IkReal x282=((IkReal(1.00000000000000))*(cj1));
evalcond[0]=((((IkReal(-1.00000000000000))*(sj3)*(x279)))+(((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x280)*(x282)))+(((IkReal(-1.00000000000000))*(x281)*(x282)))+(((r02)*(sj1)))+(((cj3)*(x279))));
evalcond[2]=((((IkReal(-1.00000000000000))*(IKsin(j4))))+(((cj1)*(r02)))+(((sj1)*(x280)))+(((sj1)*(x281))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1)))))+IKsqr(((((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1)))), ((((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x283=IKcos(j4);
IkReal x284=((cj0)*(r00));
IkReal x285=((r01)*(sj0));
IkReal x286=((IkReal(1.00000000000000))*(cj1));
evalcond[0]=((((IkReal(-1.00000000000000))*(sj3)*(x283)))+(((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01))));
evalcond[1]=((((r02)*(sj1)))+(((cj3)*(x283)))+(((IkReal(-1.00000000000000))*(x284)*(x286)))+(((IkReal(-1.00000000000000))*(x285)*(x286))));
evalcond[2]=((((IkReal(-1.00000000000000))*(IKsin(j4))))+(((cj1)*(r02)))+(((sj1)*(x284)))+(((sj1)*(x285))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(-0.266305430000000))+(((cj1)*(pz)))+(((cj0)*(px)*(sj1)))+(((py)*(sj0)*(sj1))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x287=((IkReal(3.27476008084117))*(cj0));
IkReal x288=((cj1)*(px));
IkReal x289=((px)*(sj0));
IkReal x290=((pz)*(sj1));
IkReal x291=((IkReal(0.147216449901638))*(cj0));
IkReal x292=((cj1)*(py)*(sj0));
if( IKabs(((IkReal(0.0330134596615241))+(((IkReal(3.27476008084117))*(x292)))+(((py)*(x291)))+(((IkReal(-0.147216449901638))*(x289)))+(((x287)*(x288)))+(((IkReal(-3.27476008084117))*(x290))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.734368746850327))+(((IkReal(-0.147216449901638))*(x290)))+(((IkReal(-1.00000000000000))*(py)*(x287)))+(((IkReal(0.147216449901638))*(x292)))+(((IkReal(3.27476008084117))*(x289)))+(((x288)*(x291))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.0330134596615241))+(((IkReal(3.27476008084117))*(x292)))+(((py)*(x291)))+(((IkReal(-0.147216449901638))*(x289)))+(((x287)*(x288)))+(((IkReal(-3.27476008084117))*(x290)))))+IKsqr(((IkReal(-0.734368746850327))+(((IkReal(-0.147216449901638))*(x290)))+(((IkReal(-1.00000000000000))*(py)*(x287)))+(((IkReal(0.147216449901638))*(x292)))+(((IkReal(3.27476008084117))*(x289)))+(((x288)*(x291)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((IkReal(0.0330134596615241))+(((IkReal(3.27476008084117))*(x292)))+(((py)*(x291)))+(((IkReal(-0.147216449901638))*(x289)))+(((x287)*(x288)))+(((IkReal(-3.27476008084117))*(x290)))), ((IkReal(-0.734368746850327))+(((IkReal(-0.147216449901638))*(x290)))+(((IkReal(-1.00000000000000))*(py)*(x287)))+(((IkReal(0.147216449901638))*(x292)))+(((IkReal(3.27476008084117))*(x289)))+(((x288)*(x291)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x293=IKsin(j3);
IkReal x294=IKcos(j3);
IkReal x295=((IkReal(1.00000000000000))*(cj1));
evalcond[0]=((IkReal(0.224251160000000))+(((IkReal(0.304750000000000))*(x294)))+(((IkReal(-0.0137000000000000))*(x293)))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj0)*(px)*(x295)))+(((IkReal(0.304750000000000))*(x293)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x295)))+(((IkReal(0.0137000000000000))*(x294)))+(((pz)*(sj1))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x296=((IkReal(1.00000000000000))*(cj1));
IkReal x297=((py)*(sj0));
IkReal x298=((cj0)*(px));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r01)*(sj0)*(x296)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x296)))+(((r02)*(sj1))));
evalcond[2]=((IkReal(0.210551160000000))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py))));
evalcond[3]=((IkReal(0.304750000000000))+(((IkReal(-1.00000000000000))*(x296)*(x297)))+(((IkReal(-1.00000000000000))*(x296)*(x298)))+(((pz)*(sj1))));
evalcond[4]=((IkReal(-0.266305430000000))+(((sj1)*(x297)))+(((sj1)*(x298)))+(((cj1)*(pz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1)))))+IKsqr(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1)))), ((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(IKcos(j4))))+(((cj0)*(r01))));
evalcond[1]=((((IkReal(-1.00000000000000))*(IKsin(j4))))+(((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x299=((IkReal(1.00000000000000))*(cj1));
IkReal x300=((py)*(sj0));
IkReal x301=((cj0)*(px));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r01)*(sj0)*(x299)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x299)))+(((r02)*(sj1))));
evalcond[2]=((IkReal(0.210551160000000))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py))));
evalcond[3]=((IkReal(0.304750000000000))+(((IkReal(-1.00000000000000))*(x299)*(x300)))+(((IkReal(-1.00000000000000))*(x299)*(x301)))+(((pz)*(sj1))));
evalcond[4]=((IkReal(-0.266305430000000))+(((cj1)*(pz)))+(((sj1)*(x301)))+(((sj1)*(x300))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1)))))+IKsqr(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1)))), ((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(IKcos(j4))))+(((cj0)*(r01))));
evalcond[1]=((((IkReal(-1.00000000000000))*(IKsin(j4))))+(((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x302=((IkReal(1.00000000000000))*(cj1));
IkReal x303=((py)*(sj0));
IkReal x304=((cj0)*(px));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x302)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x302))));
evalcond[2]=((IkReal(0.237951160000000))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py))));
evalcond[3]=((IkReal(-0.304750000000000))+(((IkReal(-1.00000000000000))*(x302)*(x304)))+(((IkReal(-1.00000000000000))*(x302)*(x303)))+(((pz)*(sj1))));
evalcond[4]=((IkReal(-0.266305430000000))+(((cj1)*(pz)))+(((sj1)*(x303)))+(((sj1)*(x304))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1)))))+IKsqr(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1)))), ((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(IKcos(j4))+(((cj0)*(r01))));
evalcond[1]=((((IkReal(-1.00000000000000))*(IKsin(j4))))+(((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x305=((IkReal(1.00000000000000))*(cj1));
IkReal x306=((py)*(sj0));
IkReal x307=((cj0)*(px));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x305)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x305))));
evalcond[2]=((IkReal(0.237951160000000))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py))));
evalcond[3]=((IkReal(-0.304750000000000))+(((IkReal(-1.00000000000000))*(x305)*(x306)))+(((IkReal(-1.00000000000000))*(x305)*(x307)))+(((pz)*(sj1))));
evalcond[4]=((IkReal(-0.266305430000000))+(((cj1)*(pz)))+(((sj1)*(x307)))+(((sj1)*(x306))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1)))))+IKsqr(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1)))), ((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(IKcos(j4))+(((cj0)*(r01))));
evalcond[1]=((((IkReal(-1.00000000000000))*(IKsin(j4))))+(((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x308=((r01)*(sj0));
IkReal x309=((cj0)*(r00));
if( IKabs(((((cj1)*(r02)))+(((sj1)*(x309)))+(((sj1)*(x308))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((((cj1)*(x309)))+(((cj1)*(x308)))+(((IkReal(-1.00000000000000))*(r02)*(sj1))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj1)*(r02)))+(((sj1)*(x309)))+(((sj1)*(x308)))))+IKsqr(((((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((((cj1)*(x309)))+(((cj1)*(x308)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((cj1)*(r02)))+(((sj1)*(x309)))+(((sj1)*(x308)))), ((((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((((cj1)*(x309)))+(((cj1)*(x308)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x310=IKcos(j4);
IkReal x311=((cj0)*(r00));
IkReal x312=((r01)*(sj0));
IkReal x313=((IkReal(1.00000000000000))*(cj1));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(sj3)*(x310)))+(((cj0)*(r01))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x312)*(x313)))+(((r02)*(sj1)))+(((cj3)*(x310)))+(((IkReal(-1.00000000000000))*(x311)*(x313))));
evalcond[2]=((((IkReal(-1.00000000000000))*(IKsin(j4))))+(((cj1)*(r02)))+(((sj1)*(x312)))+(((sj1)*(x311))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1)))))+IKsqr(((((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1)))), ((((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x314=IKcos(j4);
IkReal x315=((cj0)*(r00));
IkReal x316=((r01)*(sj0));
IkReal x317=((IkReal(1.00000000000000))*(cj1));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(sj3)*(x314)))+(((cj0)*(r01))));
evalcond[1]=((((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(x315)*(x317)))+(((cj3)*(x314)))+(((IkReal(-1.00000000000000))*(x316)*(x317))));
evalcond[2]=((((IkReal(-1.00000000000000))*(IKsin(j4))))+(((cj1)*(r02)))+(((sj1)*(x316)))+(((sj1)*(x315))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x318=((cj1)*(cj2));
IkReal x319=((py)*(sj0));
IkReal x320=((cj0)*(px));
IkReal x321=((cj1)*(pz));
IkReal x322=((IkReal(121900000.000000))*(sj1));
IkReal x323=((cj2)*(pz));
IkReal x324=((IkReal(5480000.00000000))*(sj1));
if( IKabs(((gconst1)*(((IkReal(1459353.75640000))+(((IkReal(1227520.00000000))*(cj2)))+(((IkReal(-1.00000000000000))*(x322)*(x323)))+(((IkReal(-1.00000000000000))*(x320)*(x324)))+(((IkReal(-5480000.00000000))*(x321)))+(((IkReal(121900000.000000))*(x318)*(x320)))+(((IkReal(-1.00000000000000))*(x319)*(x324)))+(((IkReal(121900000.000000))*(x318)*(x319))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((IkReal(-32462631.9170000))+(((IkReal(-27305600.0000000))*(cj2)))+(((x320)*(x322)))+(((IkReal(5480000.00000000))*(x318)*(x320)))+(((IkReal(-1.00000000000000))*(x323)*(x324)))+(((IkReal(5480000.00000000))*(x318)*(x319)))+(((IkReal(121900000.000000))*(x321)))+(((x319)*(x322))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst1)*(((IkReal(1459353.75640000))+(((IkReal(1227520.00000000))*(cj2)))+(((IkReal(-1.00000000000000))*(x322)*(x323)))+(((IkReal(-1.00000000000000))*(x320)*(x324)))+(((IkReal(-5480000.00000000))*(x321)))+(((IkReal(121900000.000000))*(x318)*(x320)))+(((IkReal(-1.00000000000000))*(x319)*(x324)))+(((IkReal(121900000.000000))*(x318)*(x319)))))), ((gconst1)*(((IkReal(-32462631.9170000))+(((IkReal(-27305600.0000000))*(cj2)))+(((x320)*(x322)))+(((IkReal(5480000.00000000))*(x318)*(x320)))+(((IkReal(-1.00000000000000))*(x323)*(x324)))+(((IkReal(5480000.00000000))*(x318)*(x319)))+(((IkReal(121900000.000000))*(x321)))+(((x319)*(x322)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x325=IKsin(j3);
IkReal x326=IKcos(j3);
IkReal x327=((cj0)*(px));
IkReal x328=((py)*(sj0));
IkReal x329=((IkReal(1.00000000000000))*(cj1));
IkReal x330=((IkReal(0.304750000000000))*(x326));
IkReal x331=((IkReal(0.0137000000000000))*(x325));
evalcond[0]=((IkReal(0.000251160000000000))+(((sj2)*(x331)))+(((IkReal(-1.00000000000000))*(sj2)*(x330)))+(((IkReal(-0.224000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x327)*(x329)))+(((pz)*(sj1)))+(((IkReal(-1.00000000000000))*(x328)*(x329)))+(((IkReal(0.0137000000000000))*(x326)))+(((IkReal(0.304750000000000))*(x325))));
evalcond[2]=((IkReal(-0.266305430000000))+(((cj2)*(x331)))+(((cj1)*(pz)))+(((sj1)*(x328)))+(((sj1)*(x327)))+(((IkReal(-0.224000000000000))*(cj2)))+(((IkReal(-1.00000000000000))*(cj2)*(x330))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[2];
IkReal x332=(cj2)*(cj2);
IkReal x333=(sj2)*(sj2);
dummyeval[0]=((x333)+(x332));
dummyeval[1]=((((sj3)*(x332)))+(((sj3)*(x333))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj2;
dummyeval[1]=cj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj3;
dummyeval[1]=sj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x334=((IkReal(1.00000000000000))*(cj1));
IkReal x335=((py)*(sj0));
IkReal x336=((cj0)*(px));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x334)))+(((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x334))));
evalcond[2]=((IkReal(-0.210048840000000))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py))));
evalcond[3]=((IkReal(0.304750000000000))+(((pz)*(sj1)))+(((IkReal(-1.00000000000000))*(x334)*(x335)))+(((IkReal(-1.00000000000000))*(x334)*(x336))));
evalcond[4]=((IkReal(-0.266305430000000))+(((cj1)*(pz)))+(((sj1)*(x335)))+(((sj1)*(x336))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x337=((IkReal(1.00000000000000))*(sj1));
if( IKabs(((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x337)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x337)))+(((IkReal(-1.00000000000000))*(cj1)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x337)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x337)))+(((IkReal(-1.00000000000000))*(cj1)*(r02)))))+IKsqr(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x337)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x337)))+(((IkReal(-1.00000000000000))*(cj1)*(r02)))), ((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(IKcos(j4))+(((cj0)*(r01))));
evalcond[1]=((((cj1)*(r02)))+(IKsin(j4))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x338=((IkReal(1.00000000000000))*(cj1));
IkReal x339=((py)*(sj0));
IkReal x340=((cj0)*(px));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x338)))+(((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x338))));
evalcond[2]=((IkReal(-0.210048840000000))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py))));
evalcond[3]=((IkReal(0.304750000000000))+(((IkReal(-1.00000000000000))*(x338)*(x339)))+(((pz)*(sj1)))+(((IkReal(-1.00000000000000))*(x338)*(x340))));
evalcond[4]=((IkReal(-0.266305430000000))+(((cj1)*(pz)))+(((sj1)*(x340)))+(((sj1)*(x339))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x341=((IkReal(1.00000000000000))*(sj1));
if( IKabs(((((IkReal(-1.00000000000000))*(r01)*(sj0)*(x341)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x341)))+(((IkReal(-1.00000000000000))*(cj1)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(r01)*(sj0)*(x341)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x341)))+(((IkReal(-1.00000000000000))*(cj1)*(r02)))))+IKsqr(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(-1.00000000000000))*(r01)*(sj0)*(x341)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x341)))+(((IkReal(-1.00000000000000))*(cj1)*(r02)))), ((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(IKcos(j4))+(((cj0)*(r01))));
evalcond[1]=((((cj1)*(r02)))+(IKsin(j4))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x342=((IkReal(1.00000000000000))*(cj1));
IkReal x343=((py)*(sj0));
IkReal x344=((cj0)*(px));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x342)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x342))));
evalcond[2]=((IkReal(0.210551160000000))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py))));
evalcond[3]=((IkReal(0.304750000000000))+(((pz)*(sj1)))+(((IkReal(-1.00000000000000))*(x342)*(x344)))+(((IkReal(-1.00000000000000))*(x342)*(x343))));
evalcond[4]=((IkReal(-0.266305430000000))+(((cj1)*(pz)))+(((sj1)*(x344)))+(((sj1)*(x343))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1)))))+IKsqr(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1)))), ((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(IKcos(j4))))+(((cj0)*(r01))));
evalcond[1]=((((IkReal(-1.00000000000000))*(IKsin(j4))))+(((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x345=((IkReal(1.00000000000000))*(cj1));
IkReal x346=((py)*(sj0));
IkReal x347=((cj0)*(px));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x345)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x345))));
evalcond[2]=((IkReal(0.210551160000000))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py))));
evalcond[3]=((IkReal(0.304750000000000))+(((IkReal(-1.00000000000000))*(x345)*(x347)))+(((IkReal(-1.00000000000000))*(x345)*(x346)))+(((pz)*(sj1))));
evalcond[4]=((IkReal(-0.266305430000000))+(((cj1)*(pz)))+(((sj1)*(x347)))+(((sj1)*(x346))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1)))))+IKsqr(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1)))), ((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(IKcos(j4))))+(((cj0)*(r01))));
evalcond[1]=((((IkReal(-1.00000000000000))*(IKsin(j4))))+(((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x348=((IkReal(1.00000000000000))*(cj1));
IkReal x349=((py)*(sj0));
IkReal x350=((cj0)*(px));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x348)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x348))));
evalcond[2]=((IkReal(-0.237448840000000))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py))));
evalcond[3]=((IkReal(-0.304750000000000))+(((IkReal(-1.00000000000000))*(x348)*(x350)))+(((IkReal(-1.00000000000000))*(x348)*(x349)))+(((pz)*(sj1))));
evalcond[4]=((IkReal(-0.266305430000000))+(((cj1)*(pz)))+(((sj1)*(x350)))+(((sj1)*(x349))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x351=((IkReal(1.00000000000000))*(sj1));
if( IKabs(((((IkReal(-1.00000000000000))*(r01)*(sj0)*(x351)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x351)))+(((IkReal(-1.00000000000000))*(cj1)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(r01)*(sj0)*(x351)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x351)))+(((IkReal(-1.00000000000000))*(cj1)*(r02)))))+IKsqr(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(-1.00000000000000))*(r01)*(sj0)*(x351)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x351)))+(((IkReal(-1.00000000000000))*(cj1)*(r02)))), ((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(IKcos(j4))))+(((cj0)*(r01))));
evalcond[1]=((((cj1)*(r02)))+(IKsin(j4))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x352=((IkReal(1.00000000000000))*(cj1));
IkReal x353=((py)*(sj0));
IkReal x354=((cj0)*(px));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r01)*(sj0)*(x352)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x352)))+(((r02)*(sj1))));
evalcond[2]=((IkReal(-0.237448840000000))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py))));
evalcond[3]=((IkReal(-0.304750000000000))+(((pz)*(sj1)))+(((IkReal(-1.00000000000000))*(x352)*(x353)))+(((IkReal(-1.00000000000000))*(x352)*(x354))));
evalcond[4]=((IkReal(-0.266305430000000))+(((cj1)*(pz)))+(((sj1)*(x354)))+(((sj1)*(x353))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x355=((IkReal(1.00000000000000))*(sj1));
if( IKabs(((((IkReal(-1.00000000000000))*(r01)*(sj0)*(x355)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x355)))+(((IkReal(-1.00000000000000))*(cj1)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(r01)*(sj0)*(x355)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x355)))+(((IkReal(-1.00000000000000))*(cj1)*(r02)))))+IKsqr(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(-1.00000000000000))*(r01)*(sj0)*(x355)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x355)))+(((IkReal(-1.00000000000000))*(cj1)*(r02)))), ((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(IKcos(j4))))+(((cj0)*(r01))));
evalcond[1]=((((cj1)*(r02)))+(IKsin(j4))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x356=((IkReal(1.00000000000000))*(cj1));
IkReal x357=((py)*(sj0));
IkReal x358=((cj0)*(px));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r01)*(sj0)*(x356)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x356)))+(((r02)*(sj1))));
evalcond[2]=((IkReal(0.237951160000000))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py))));
evalcond[3]=((IkReal(-0.304750000000000))+(((IkReal(-1.00000000000000))*(x356)*(x357)))+(((IkReal(-1.00000000000000))*(x356)*(x358)))+(((pz)*(sj1))));
evalcond[4]=((IkReal(-0.266305430000000))+(((cj1)*(pz)))+(((sj1)*(x358)))+(((sj1)*(x357))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1)))))+IKsqr(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1)))), ((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(IKcos(j4))+(((cj0)*(r01))));
evalcond[1]=((((IkReal(-1.00000000000000))*(IKsin(j4))))+(((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x359=((IkReal(1.00000000000000))*(cj1));
IkReal x360=((py)*(sj0));
IkReal x361=((cj0)*(px));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r01)*(sj0)*(x359)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x359)))+(((r02)*(sj1))));
evalcond[2]=((IkReal(0.237951160000000))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py))));
evalcond[3]=((IkReal(-0.304750000000000))+(((IkReal(-1.00000000000000))*(x359)*(x361)))+(((IkReal(-1.00000000000000))*(x359)*(x360)))+(((pz)*(sj1))));
evalcond[4]=((IkReal(-0.266305430000000))+(((sj1)*(x361)))+(((sj1)*(x360)))+(((cj1)*(pz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1)))))+IKsqr(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1)))), ((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(IKcos(j4))+(((cj0)*(r01))));
evalcond[1]=((((IkReal(-1.00000000000000))*(IKsin(j4))))+(((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x362=((sj0)*(sj1));
IkReal x363=((cj0)*(sj1));
IkReal x364=((IkReal(1.00000000000000))*(cj1));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.000251160000000000))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py))));
evalcond[2]=((IkReal(0.0137000000000000))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x364)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x364)))+(((pz)*(sj1))));
evalcond[3]=((((r01)*(x362)))+(((r00)*(x363)))+(((cj1)*(r02))));
evalcond[4]=((IkReal(-0.795055430000000))+(((cj1)*(pz)))+(((py)*(x362)))+(((px)*(x363))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj1)*(r01)*(sj0)))+(((cj0)*(cj1)*(r00)))+(((IkReal(-1.00000000000000))*(r02)*(sj1))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01)))))+IKsqr(((((cj1)*(r01)*(sj0)))+(((cj0)*(cj1)*(r00)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01)))), ((((cj1)*(r01)*(sj0)))+(((cj0)*(cj1)*(r00)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x365=((IkReal(1.00000000000000))*(cj1));
evalcond[0]=((((IkReal(-1.00000000000000))*(IKsin(j4))))+(((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01))));
evalcond[1]=((((r02)*(sj1)))+(IKcos(j4))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x365)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x365))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x366=((sj0)*(sj1));
IkReal x367=((cj0)*(sj1));
IkReal x368=((IkReal(1.00000000000000))*(cj1));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.000251160000000000))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py))));
evalcond[2]=((IkReal(-0.0137000000000000))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x368)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x368)))+(((pz)*(sj1))));
evalcond[3]=((((r01)*(x366)))+(((r00)*(x367)))+(((cj1)*(r02))));
evalcond[4]=((IkReal(-0.185555430000000))+(((cj1)*(pz)))+(((py)*(x366)))+(((px)*(x367))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x369=((IkReal(1.00000000000000))*(cj1));
if( IKabs(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x369)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x369))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01)))))+IKsqr(((((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x369)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x369)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01)))), ((((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x369)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x369)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x370=((IkReal(1.00000000000000))*(cj1));
evalcond[0]=((((IkReal(-1.00000000000000))*(IKsin(j4))))+(((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r01)*(sj0)*(x370)))+(((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x370)))+(((IkReal(-1.00000000000000))*(IKcos(j4)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x371=((sj0)*(sj1));
IkReal x372=((cj0)*(sj1));
IkReal x373=((IkReal(1.00000000000000))*(cj1));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.000251160000000000))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py))));
evalcond[2]=((IkReal(0.0137000000000000))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x373)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x373)))+(((pz)*(sj1))));
evalcond[3]=((((r00)*(x372)))+(((r01)*(x371)))+(((cj1)*(r02))));
evalcond[4]=((IkReal(-0.795055430000000))+(((cj1)*(pz)))+(((px)*(x372)))+(((py)*(x371))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj1)*(r01)*(sj0)))+(((cj0)*(cj1)*(r00)))+(((IkReal(-1.00000000000000))*(r02)*(sj1))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01)))))+IKsqr(((((cj1)*(r01)*(sj0)))+(((cj0)*(cj1)*(r00)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01)))), ((((cj1)*(r01)*(sj0)))+(((cj0)*(cj1)*(r00)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x374=((IkReal(1.00000000000000))*(cj1));
evalcond[0]=((((IkReal(-1.00000000000000))*(IKsin(j4))))+(((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r01)*(sj0)*(x374)))+(((r02)*(sj1)))+(IKcos(j4))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x374))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x375=((sj0)*(sj1));
IkReal x376=((cj0)*(sj1));
IkReal x377=((IkReal(1.00000000000000))*(cj1));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.000251160000000000))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py))));
evalcond[2]=((IkReal(-0.0137000000000000))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x377)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x377)))+(((pz)*(sj1))));
evalcond[3]=((((r00)*(x376)))+(((r01)*(x375)))+(((cj1)*(r02))));
evalcond[4]=((IkReal(-0.185555430000000))+(((cj1)*(pz)))+(((px)*(x376)))+(((py)*(x375))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x378=((IkReal(1.00000000000000))*(cj1));
if( IKabs(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(r01)*(sj0)*(x378)))+(((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x378))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01)))))+IKsqr(((((IkReal(-1.00000000000000))*(r01)*(sj0)*(x378)))+(((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x378)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01)))), ((((IkReal(-1.00000000000000))*(r01)*(sj0)*(x378)))+(((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x378)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x379=((IkReal(1.00000000000000))*(cj1));
evalcond[0]=((((IkReal(-1.00000000000000))*(IKsin(j4))))+(((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r01)*(sj0)*(x379)))+(((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x379)))+(((IkReal(-1.00000000000000))*(IKcos(j4)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x380=((sj0)*(sj1));
IkReal x381=((cj0)*(sj1));
IkReal x382=((IkReal(1.00000000000000))*(cj1));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.000251160000000000))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py))));
evalcond[2]=((IkReal(0.0137000000000000))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x382)))+(((pz)*(sj1)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x382))));
evalcond[3]=((((cj1)*(r02)))+(((r00)*(x381)))+(((r01)*(x380))));
evalcond[4]=((IkReal(0.262444570000000))+(((px)*(x381)))+(((cj1)*(pz)))+(((py)*(x380))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj1)*(r01)*(sj0)))+(((cj0)*(cj1)*(r00)))+(((IkReal(-1.00000000000000))*(r02)*(sj1))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)))))+IKsqr(((((cj1)*(r01)*(sj0)))+(((cj0)*(cj1)*(r00)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)))), ((((cj1)*(r01)*(sj0)))+(((cj0)*(cj1)*(r00)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x383=((IkReal(1.00000000000000))*(cj1));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(IKsin(j4))+(((cj0)*(r01))));
evalcond[1]=((((r02)*(sj1)))+(IKcos(j4))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x383)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x383))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x384=((sj0)*(sj1));
IkReal x385=((cj0)*(sj1));
IkReal x386=((IkReal(1.00000000000000))*(cj1));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.000251160000000000))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py))));
evalcond[2]=((IkReal(-0.0137000000000000))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x386)))+(((pz)*(sj1)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x386))));
evalcond[3]=((((cj1)*(r02)))+(((r00)*(x385)))+(((r01)*(x384))));
evalcond[4]=((IkReal(-0.347055430000000))+(((px)*(x385)))+(((cj1)*(pz)))+(((py)*(x384))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x387=((IkReal(1.00000000000000))*(cj0));
if( IKabs(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(r01)*(x387))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(x387)))+(((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)*(sj0))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(r01)*(x387)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(x387)))+(((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)*(sj0)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(r01)*(x387)))), ((((IkReal(-1.00000000000000))*(cj1)*(r00)*(x387)))+(((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)*(sj0)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x388=((IkReal(1.00000000000000))*(cj1));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(IKsin(j4))+(((cj0)*(r01))));
evalcond[1]=((((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x388)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x388)))+(((IkReal(-1.00000000000000))*(IKcos(j4)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x389=((sj0)*(sj1));
IkReal x390=((cj0)*(sj1));
IkReal x391=((IkReal(1.00000000000000))*(cj1));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.000251160000000000))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py))));
evalcond[2]=((IkReal(0.0137000000000000))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x391)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x391)))+(((pz)*(sj1))));
evalcond[3]=((((r00)*(x390)))+(((cj1)*(r02)))+(((r01)*(x389))));
evalcond[4]=((IkReal(0.262444570000000))+(((cj1)*(pz)))+(((px)*(x390)))+(((py)*(x389))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj1)*(r01)*(sj0)))+(((cj0)*(cj1)*(r00)))+(((IkReal(-1.00000000000000))*(r02)*(sj1))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)))))+IKsqr(((((cj1)*(r01)*(sj0)))+(((cj0)*(cj1)*(r00)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)))), ((((cj1)*(r01)*(sj0)))+(((cj0)*(cj1)*(r00)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x392=((IkReal(1.00000000000000))*(cj1));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(IKsin(j4))+(((cj0)*(r01))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x392)))+(((r02)*(sj1)))+(IKcos(j4))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x392))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x393=((sj0)*(sj1));
IkReal x394=((cj0)*(sj1));
IkReal x395=((IkReal(1.00000000000000))*(cj1));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.000251160000000000))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py))));
evalcond[2]=((IkReal(-0.0137000000000000))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x395)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x395)))+(((pz)*(sj1))));
evalcond[3]=((((r00)*(x394)))+(((cj1)*(r02)))+(((r01)*(x393))));
evalcond[4]=((IkReal(-0.347055430000000))+(((cj1)*(pz)))+(((py)*(x393)))+(((px)*(x394))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x396=((IkReal(1.00000000000000))*(cj0));
if( IKabs(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(r01)*(x396))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x396)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)*(sj0))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(r01)*(x396)))))+IKsqr(((((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x396)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)*(sj0)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(r01)*(x396)))), ((((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x396)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)*(sj0)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x397=((IkReal(1.00000000000000))*(cj1));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(IKsin(j4))+(((cj0)*(r01))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x397)))+(((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(IKcos(j4))))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x397))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x398=((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30);
IkReal x399=((IkReal(1.00000000000000))*(cj3));
IkReal x400=((r01)*(sj0));
IkReal x401=((r02)*(sj1));
IkReal x402=((cj2)*(sj3));
IkReal x403=((cj0)*(r00));
IkReal x404=((IkReal(1.00000000000000))*(cj1));
if( IKabs(((x398)*(((IKabs(sj2) != 0)?((IkReal)1/(sj2)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(sj1)*(x399)*(x403)))+(((IkReal(-1.00000000000000))*(sj1)*(x399)*(x400)))+(((IkReal(-1.00000000000000))*(x400)*(x402)*(x404)))+(((IkReal(-1.00000000000000))*(x402)*(x403)*(x404)))+(((IkReal(-1.00000000000000))*(cj1)*(r02)*(x399)))+(((x401)*(x402))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x398)*(((((cj1)*(x400)))+(((cj1)*(x403)))+(((IkReal(-1.00000000000000))*(x401))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x398)*(((IKabs(sj2) != 0)?((IkReal)1/(sj2)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(sj1)*(x399)*(x403)))+(((IkReal(-1.00000000000000))*(sj1)*(x399)*(x400)))+(((IkReal(-1.00000000000000))*(x400)*(x402)*(x404)))+(((IkReal(-1.00000000000000))*(x402)*(x403)*(x404)))+(((IkReal(-1.00000000000000))*(cj1)*(r02)*(x399)))+(((x401)*(x402)))))))+IKsqr(((x398)*(((((cj1)*(x400)))+(((cj1)*(x403)))+(((IkReal(-1.00000000000000))*(x401)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x398)*(((IKabs(sj2) != 0)?((IkReal)1/(sj2)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(sj1)*(x399)*(x403)))+(((IkReal(-1.00000000000000))*(sj1)*(x399)*(x400)))+(((IkReal(-1.00000000000000))*(x400)*(x402)*(x404)))+(((IkReal(-1.00000000000000))*(x402)*(x403)*(x404)))+(((IkReal(-1.00000000000000))*(cj1)*(r02)*(x399)))+(((x401)*(x402)))))), ((x398)*(((((cj1)*(x400)))+(((cj1)*(x403)))+(((IkReal(-1.00000000000000))*(x401)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x405=IKcos(j4);
IkReal x406=IKsin(j4);
IkReal x407=((cj0)*(r00));
IkReal x408=((IkReal(1.00000000000000))*(cj1));
IkReal x409=((r01)*(sj0));
IkReal x410=((sj3)*(x405));
evalcond[0]=((((sj2)*(x410)))+(((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj2)*(x406)))+(((cj0)*(r01))));
evalcond[1]=((((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(x407)*(x408)))+(((cj3)*(x405)))+(((IkReal(-1.00000000000000))*(x408)*(x409))));
evalcond[2]=((((sj1)*(x409)))+(((sj1)*(x407)))+(((cj1)*(r02)))+(((sj2)*(x406)))+(((cj2)*(x410))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x411=((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30);
IkReal x412=((sj2)*(sj3));
IkReal x413=((cj1)*(r01)*(sj0));
IkReal x414=((IkReal(1.00000000000000))*(r02)*(sj1));
IkReal x415=((cj0)*(cj1)*(r00));
if( IKabs(((x411)*(((IKabs(cj2) != 0)?((IkReal)1/(cj2)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x412)*(x414)))+(((IkReal(-1.00000000000000))*(cj3)*(r00)*(sj0)))+(((x412)*(x415)))+(((x412)*(x413)))+(((cj0)*(cj3)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x411)*(((x413)+(x415)+(((IkReal(-1.00000000000000))*(x414))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x411)*(((IKabs(cj2) != 0)?((IkReal)1/(cj2)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x412)*(x414)))+(((IkReal(-1.00000000000000))*(cj3)*(r00)*(sj0)))+(((x412)*(x415)))+(((x412)*(x413)))+(((cj0)*(cj3)*(r01)))))))+IKsqr(((x411)*(((x413)+(x415)+(((IkReal(-1.00000000000000))*(x414)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x411)*(((IKabs(cj2) != 0)?((IkReal)1/(cj2)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x412)*(x414)))+(((IkReal(-1.00000000000000))*(cj3)*(r00)*(sj0)))+(((x412)*(x415)))+(((x412)*(x413)))+(((cj0)*(cj3)*(r01)))))), ((x411)*(((x413)+(x415)+(((IkReal(-1.00000000000000))*(x414)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x416=IKcos(j4);
IkReal x417=IKsin(j4);
IkReal x418=((cj0)*(r00));
IkReal x419=((IkReal(1.00000000000000))*(cj1));
IkReal x420=((r01)*(sj0));
IkReal x421=((sj3)*(x416));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj2)*(x417)))+(((sj2)*(x421)))+(((cj0)*(r01))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x418)*(x419)))+(((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(x419)*(x420)))+(((cj3)*(x416))));
evalcond[2]=((((sj1)*(x418)))+(((sj2)*(x417)))+(((cj1)*(r02)))+(((cj2)*(x421)))+(((sj1)*(x420))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x422=(cj2)*(cj2);
IkReal x423=(sj2)*(sj2);
IkReal x424=((cj0)*(r01));
IkReal x425=((r01)*(sj1));
IkReal x426=((IkReal(1.00000000000000))*(sj2));
IkReal x427=((cj1)*(r02));
IkReal x428=((IkReal(1.00000000000000))*(cj2));
IkReal x429=((sj0)*(x428));
IkReal x430=((cj0)*(r00)*(sj1));
if( IKabs(((((IKabs(((x423)+(x422))) != 0)?((IkReal)1/(((x423)+(x422)))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(r00)*(x429)))+(((IkReal(-1.00000000000000))*(x426)*(x427)))+(((IkReal(-1.00000000000000))*(x426)*(x430)))+(((IkReal(-1.00000000000000))*(sj0)*(x425)*(x426)))+(((cj2)*(x424))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((sj3)*(x422)))+(((sj3)*(x423))))) != 0)?((IkReal)1/(((((sj3)*(x422)))+(((sj3)*(x423)))))):(IkReal)1.0e30))*(((((r00)*(sj0)*(sj2)))+(((IkReal(-1.00000000000000))*(x427)*(x428)))+(((IkReal(-1.00000000000000))*(x425)*(x429)))+(((IkReal(-1.00000000000000))*(x424)*(x426)))+(((IkReal(-1.00000000000000))*(x428)*(x430))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((x423)+(x422))) != 0)?((IkReal)1/(((x423)+(x422)))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(r00)*(x429)))+(((IkReal(-1.00000000000000))*(x426)*(x427)))+(((IkReal(-1.00000000000000))*(x426)*(x430)))+(((IkReal(-1.00000000000000))*(sj0)*(x425)*(x426)))+(((cj2)*(x424)))))))+IKsqr(((((IKabs(((((sj3)*(x422)))+(((sj3)*(x423))))) != 0)?((IkReal)1/(((((sj3)*(x422)))+(((sj3)*(x423)))))):(IkReal)1.0e30))*(((((r00)*(sj0)*(sj2)))+(((IkReal(-1.00000000000000))*(x427)*(x428)))+(((IkReal(-1.00000000000000))*(x425)*(x429)))+(((IkReal(-1.00000000000000))*(x424)*(x426)))+(((IkReal(-1.00000000000000))*(x428)*(x430)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((x423)+(x422))) != 0)?((IkReal)1/(((x423)+(x422)))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(r00)*(x429)))+(((IkReal(-1.00000000000000))*(x426)*(x427)))+(((IkReal(-1.00000000000000))*(x426)*(x430)))+(((IkReal(-1.00000000000000))*(sj0)*(x425)*(x426)))+(((cj2)*(x424)))))), ((((IKabs(((((sj3)*(x422)))+(((sj3)*(x423))))) != 0)?((IkReal)1/(((((sj3)*(x422)))+(((sj3)*(x423)))))):(IkReal)1.0e30))*(((((r00)*(sj0)*(sj2)))+(((IkReal(-1.00000000000000))*(x427)*(x428)))+(((IkReal(-1.00000000000000))*(x425)*(x429)))+(((IkReal(-1.00000000000000))*(x424)*(x426)))+(((IkReal(-1.00000000000000))*(x428)*(x430)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x431=IKcos(j4);
IkReal x432=IKsin(j4);
IkReal x433=((cj0)*(r00));
IkReal x434=((IkReal(1.00000000000000))*(cj1));
IkReal x435=((r01)*(sj0));
IkReal x436=((sj3)*(x431));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((sj2)*(x436)))+(((IkReal(-1.00000000000000))*(cj2)*(x432)))+(((cj0)*(r01))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x433)*(x434)))+(((IkReal(-1.00000000000000))*(x434)*(x435)))+(((r02)*(sj1)))+(((cj3)*(x431))));
evalcond[2]=((((cj1)*(r02)))+(((sj2)*(x432)))+(((cj2)*(x436)))+(((sj1)*(x435)))+(((sj1)*(x433))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x437=((IkReal(121900000.000000))*(py));
IkReal x438=((IkReal(5480000.00000000))*(py));
IkReal x439=((IkReal(121900000.000000))*(px));
IkReal x440=((IkReal(5480000.00000000))*(px));
IkReal x441=((cj1)*(sj0)*(sj2));
IkReal x442=((pz)*(sj1)*(sj2));
IkReal x443=((cj0)*(cj1)*(sj2));
if( IKabs(((gconst0)*(((IkReal(-1376.35680000000))+(((sj0)*(x440)))+(((x439)*(x443)))+(((IkReal(1227520.00000000))*(sj2)))+(((IkReal(-121900000.000000))*(x442)))+(((x437)*(x441)))+(((IkReal(-1.00000000000000))*(cj0)*(x438))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((IkReal(30616.4040000000))+(((IkReal(-5480000.00000000))*(x442)))+(((IkReal(-27305600.0000000))*(sj2)))+(((x440)*(x443)))+(((IkReal(-1.00000000000000))*(sj0)*(x439)))+(((cj0)*(x437)))+(((x438)*(x441))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst0)*(((IkReal(-1376.35680000000))+(((sj0)*(x440)))+(((x439)*(x443)))+(((IkReal(1227520.00000000))*(sj2)))+(((IkReal(-121900000.000000))*(x442)))+(((x437)*(x441)))+(((IkReal(-1.00000000000000))*(cj0)*(x438)))))), ((gconst0)*(((IkReal(30616.4040000000))+(((IkReal(-5480000.00000000))*(x442)))+(((IkReal(-27305600.0000000))*(sj2)))+(((x440)*(x443)))+(((IkReal(-1.00000000000000))*(sj0)*(x439)))+(((cj0)*(x437)))+(((x438)*(x441)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x444=IKsin(j3);
IkReal x445=IKcos(j3);
IkReal x446=((cj0)*(px));
IkReal x447=((py)*(sj0));
IkReal x448=((IkReal(1.00000000000000))*(cj1));
IkReal x449=((IkReal(0.304750000000000))*(x445));
IkReal x450=((IkReal(0.0137000000000000))*(x444));
evalcond[0]=((IkReal(0.000251160000000000))+(((IkReal(-1.00000000000000))*(sj2)*(x449)))+(((sj2)*(x450)))+(((IkReal(-0.224000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py))));
evalcond[1]=((((IkReal(0.0137000000000000))*(x445)))+(((IkReal(0.304750000000000))*(x444)))+(((IkReal(-1.00000000000000))*(x447)*(x448)))+(((pz)*(sj1)))+(((IkReal(-1.00000000000000))*(x446)*(x448))));
evalcond[2]=((IkReal(-0.266305430000000))+(((IkReal(-1.00000000000000))*(cj2)*(x449)))+(((sj1)*(x446)))+(((sj1)*(x447)))+(((cj1)*(pz)))+(((cj2)*(x450)))+(((IkReal(-0.224000000000000))*(cj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[2];
IkReal x451=(cj2)*(cj2);
IkReal x452=(sj2)*(sj2);
dummyeval[0]=((x452)+(x451));
dummyeval[1]=((((sj3)*(x452)))+(((sj3)*(x451))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj2;
dummyeval[1]=cj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj3;
dummyeval[1]=sj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x453=((IkReal(1.00000000000000))*(cj1));
IkReal x454=((py)*(sj0));
IkReal x455=((cj0)*(px));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x453)))+(((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x453))));
evalcond[2]=((IkReal(-0.210048840000000))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py))));
evalcond[3]=((IkReal(0.304750000000000))+(((IkReal(-1.00000000000000))*(x453)*(x454)))+(((IkReal(-1.00000000000000))*(x453)*(x455)))+(((pz)*(sj1))));
evalcond[4]=((IkReal(-0.266305430000000))+(((cj1)*(pz)))+(((sj1)*(x455)))+(((sj1)*(x454))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x456=((IkReal(1.00000000000000))*(sj1));
if( IKabs(((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x456)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x456)))+(((IkReal(-1.00000000000000))*(cj1)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x456)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x456)))+(((IkReal(-1.00000000000000))*(cj1)*(r02)))))+IKsqr(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x456)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x456)))+(((IkReal(-1.00000000000000))*(cj1)*(r02)))), ((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(IKcos(j4))+(((cj0)*(r01))));
evalcond[1]=((((cj1)*(r02)))+(IKsin(j4))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x457=((IkReal(1.00000000000000))*(cj1));
IkReal x458=((py)*(sj0));
IkReal x459=((cj0)*(px));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x457)))+(((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x457))));
evalcond[2]=((IkReal(-0.210048840000000))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py))));
evalcond[3]=((IkReal(0.304750000000000))+(((pz)*(sj1)))+(((IkReal(-1.00000000000000))*(x457)*(x459)))+(((IkReal(-1.00000000000000))*(x457)*(x458))));
evalcond[4]=((IkReal(-0.266305430000000))+(((cj1)*(pz)))+(((sj1)*(x459)))+(((sj1)*(x458))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x460=((IkReal(1.00000000000000))*(sj1));
if( IKabs(((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x460)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x460)))+(((IkReal(-1.00000000000000))*(cj1)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x460)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x460)))+(((IkReal(-1.00000000000000))*(cj1)*(r02)))))+IKsqr(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x460)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x460)))+(((IkReal(-1.00000000000000))*(cj1)*(r02)))), ((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(IKcos(j4))+(((cj0)*(r01))));
evalcond[1]=((((cj1)*(r02)))+(IKsin(j4))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x461=((IkReal(1.00000000000000))*(cj1));
IkReal x462=((py)*(sj0));
IkReal x463=((cj0)*(px));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x461)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x461))));
evalcond[2]=((IkReal(0.210551160000000))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py))));
evalcond[3]=((IkReal(0.304750000000000))+(((IkReal(-1.00000000000000))*(x461)*(x463)))+(((IkReal(-1.00000000000000))*(x461)*(x462)))+(((pz)*(sj1))));
evalcond[4]=((IkReal(-0.266305430000000))+(((cj1)*(pz)))+(((sj1)*(x462)))+(((sj1)*(x463))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1)))))+IKsqr(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1)))), ((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(IKcos(j4))))+(((cj0)*(r01))));
evalcond[1]=((((IkReal(-1.00000000000000))*(IKsin(j4))))+(((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x464=((IkReal(1.00000000000000))*(cj1));
IkReal x465=((py)*(sj0));
IkReal x466=((cj0)*(px));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x464)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x464))));
evalcond[2]=((IkReal(0.210551160000000))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py))));
evalcond[3]=((IkReal(0.304750000000000))+(((IkReal(-1.00000000000000))*(x464)*(x465)))+(((IkReal(-1.00000000000000))*(x464)*(x466)))+(((pz)*(sj1))));
evalcond[4]=((IkReal(-0.266305430000000))+(((cj1)*(pz)))+(((sj1)*(x465)))+(((sj1)*(x466))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1)))))+IKsqr(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1)))), ((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(IKcos(j4))))+(((cj0)*(r01))));
evalcond[1]=((((IkReal(-1.00000000000000))*(IKsin(j4))))+(((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x467=((IkReal(1.00000000000000))*(cj1));
IkReal x468=((py)*(sj0));
IkReal x469=((cj0)*(px));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x467)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x467))));
evalcond[2]=((IkReal(-0.237448840000000))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py))));
evalcond[3]=((IkReal(-0.304750000000000))+(((pz)*(sj1)))+(((IkReal(-1.00000000000000))*(x467)*(x468)))+(((IkReal(-1.00000000000000))*(x467)*(x469))));
evalcond[4]=((IkReal(-0.266305430000000))+(((cj1)*(pz)))+(((sj1)*(x468)))+(((sj1)*(x469))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x470=((IkReal(1.00000000000000))*(sj1));
if( IKabs(((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x470)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x470)))+(((IkReal(-1.00000000000000))*(cj1)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x470)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x470)))+(((IkReal(-1.00000000000000))*(cj1)*(r02)))))+IKsqr(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x470)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x470)))+(((IkReal(-1.00000000000000))*(cj1)*(r02)))), ((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(IKcos(j4))))+(((cj0)*(r01))));
evalcond[1]=((((cj1)*(r02)))+(IKsin(j4))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x471=((IkReal(1.00000000000000))*(cj1));
IkReal x472=((py)*(sj0));
IkReal x473=((cj0)*(px));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x471)))+(((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x471))));
evalcond[2]=((IkReal(-0.237448840000000))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py))));
evalcond[3]=((IkReal(-0.304750000000000))+(((IkReal(-1.00000000000000))*(x471)*(x472)))+(((IkReal(-1.00000000000000))*(x471)*(x473)))+(((pz)*(sj1))));
evalcond[4]=((IkReal(-0.266305430000000))+(((cj1)*(pz)))+(((sj1)*(x473)))+(((sj1)*(x472))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x474=((IkReal(1.00000000000000))*(sj1));
if( IKabs(((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x474)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x474)))+(((IkReal(-1.00000000000000))*(cj1)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x474)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x474)))+(((IkReal(-1.00000000000000))*(cj1)*(r02)))))+IKsqr(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x474)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x474)))+(((IkReal(-1.00000000000000))*(cj1)*(r02)))), ((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(IKcos(j4))))+(((cj0)*(r01))));
evalcond[1]=((((cj1)*(r02)))+(IKsin(j4))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x475=((IkReal(1.00000000000000))*(cj1));
IkReal x476=((py)*(sj0));
IkReal x477=((cj0)*(px));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x475)))+(((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x475))));
evalcond[2]=((IkReal(0.237951160000000))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py))));
evalcond[3]=((IkReal(-0.304750000000000))+(((IkReal(-1.00000000000000))*(x475)*(x477)))+(((IkReal(-1.00000000000000))*(x475)*(x476)))+(((pz)*(sj1))));
evalcond[4]=((IkReal(-0.266305430000000))+(((cj1)*(pz)))+(((sj1)*(x477)))+(((sj1)*(x476))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1)))))+IKsqr(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1)))), ((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(IKcos(j4))+(((cj0)*(r01))));
evalcond[1]=((((IkReal(-1.00000000000000))*(IKsin(j4))))+(((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x478=((IkReal(1.00000000000000))*(cj1));
IkReal x479=((py)*(sj0));
IkReal x480=((cj0)*(px));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x478)))+(((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x478))));
evalcond[2]=((IkReal(0.237951160000000))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py))));
evalcond[3]=((IkReal(-0.304750000000000))+(((IkReal(-1.00000000000000))*(x478)*(x479)))+(((pz)*(sj1)))+(((IkReal(-1.00000000000000))*(x478)*(x480))));
evalcond[4]=((IkReal(-0.266305430000000))+(((sj1)*(x480)))+(((cj1)*(pz)))+(((sj1)*(x479))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1)))))+IKsqr(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1)))), ((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(IKcos(j4))+(((cj0)*(r01))));
evalcond[1]=((((IkReal(-1.00000000000000))*(IKsin(j4))))+(((cj1)*(r02)))+(((cj0)*(r00)*(sj1)))+(((r01)*(sj0)*(sj1))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x481=((sj0)*(sj1));
IkReal x482=((cj0)*(sj1));
IkReal x483=((IkReal(1.00000000000000))*(cj1));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.000251160000000000))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py))));
evalcond[2]=((IkReal(0.0137000000000000))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x483)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x483)))+(((pz)*(sj1))));
evalcond[3]=((((cj1)*(r02)))+(((r01)*(x481)))+(((r00)*(x482))));
evalcond[4]=((IkReal(-0.795055430000000))+(((py)*(x481)))+(((px)*(x482)))+(((cj1)*(pz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj1)*(r01)*(sj0)))+(((cj0)*(cj1)*(r00)))+(((IkReal(-1.00000000000000))*(r02)*(sj1))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01)))))+IKsqr(((((cj1)*(r01)*(sj0)))+(((cj0)*(cj1)*(r00)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01)))), ((((cj1)*(r01)*(sj0)))+(((cj0)*(cj1)*(r00)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x484=((IkReal(1.00000000000000))*(cj1));
evalcond[0]=((((IkReal(-1.00000000000000))*(IKsin(j4))))+(((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x484)))+(((r02)*(sj1)))+(IKcos(j4))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x484))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x485=((sj0)*(sj1));
IkReal x486=((cj0)*(sj1));
IkReal x487=((IkReal(1.00000000000000))*(cj1));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.000251160000000000))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py))));
evalcond[2]=((IkReal(-0.0137000000000000))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x487)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x487)))+(((pz)*(sj1))));
evalcond[3]=((((cj1)*(r02)))+(((r01)*(x485)))+(((r00)*(x486))));
evalcond[4]=((IkReal(-0.185555430000000))+(((py)*(x485)))+(((px)*(x486)))+(((cj1)*(pz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x488=((IkReal(1.00000000000000))*(cj1));
if( IKabs(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x488)))+(((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x488))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x488)))+(((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x488)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01)))), ((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x488)))+(((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x488)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x489=((IkReal(1.00000000000000))*(cj1));
evalcond[0]=((((IkReal(-1.00000000000000))*(IKsin(j4))))+(((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj0)*(r00)*(x489)))+(((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x489)))+(((IkReal(-1.00000000000000))*(IKcos(j4)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x490=((sj0)*(sj1));
IkReal x491=((cj0)*(sj1));
IkReal x492=((IkReal(1.00000000000000))*(cj1));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.000251160000000000))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py))));
evalcond[2]=((IkReal(0.0137000000000000))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x492)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x492)))+(((pz)*(sj1))));
evalcond[3]=((((cj1)*(r02)))+(((r00)*(x491)))+(((r01)*(x490))));
evalcond[4]=((IkReal(-0.795055430000000))+(((py)*(x490)))+(((cj1)*(pz)))+(((px)*(x491))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj1)*(r01)*(sj0)))+(((cj0)*(cj1)*(r00)))+(((IkReal(-1.00000000000000))*(r02)*(sj1))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01)))))+IKsqr(((((cj1)*(r01)*(sj0)))+(((cj0)*(cj1)*(r00)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01)))), ((((cj1)*(r01)*(sj0)))+(((cj0)*(cj1)*(r00)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x493=((IkReal(1.00000000000000))*(cj1));
evalcond[0]=((((IkReal(-1.00000000000000))*(IKsin(j4))))+(((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01))));
evalcond[1]=((((r02)*(sj1)))+(IKcos(j4))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x493)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x493))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x494=((sj0)*(sj1));
IkReal x495=((cj0)*(sj1));
IkReal x496=((IkReal(1.00000000000000))*(cj1));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.000251160000000000))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py))));
evalcond[2]=((IkReal(-0.0137000000000000))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x496)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x496)))+(((pz)*(sj1))));
evalcond[3]=((((cj1)*(r02)))+(((r00)*(x495)))+(((r01)*(x494))));
evalcond[4]=((IkReal(-0.185555430000000))+(((py)*(x494)))+(((cj1)*(pz)))+(((px)*(x495))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x497=((IkReal(1.00000000000000))*(cj1));
if( IKabs(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x497)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x497))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01)))))+IKsqr(((((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x497)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x497)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01)))), ((((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x497)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x497)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x498=((IkReal(1.00000000000000))*(cj1));
evalcond[0]=((((IkReal(-1.00000000000000))*(IKsin(j4))))+(((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((cj0)*(r01))));
evalcond[1]=((((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x498)))+(((IkReal(-1.00000000000000))*(IKcos(j4))))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x498))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x499=((sj0)*(sj1));
IkReal x500=((cj0)*(sj1));
IkReal x501=((IkReal(1.00000000000000))*(cj1));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.000251160000000000))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py))));
evalcond[2]=((IkReal(0.0137000000000000))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x501)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x501)))+(((pz)*(sj1))));
evalcond[3]=((((cj1)*(r02)))+(((r00)*(x500)))+(((r01)*(x499))));
evalcond[4]=((IkReal(0.262444570000000))+(((py)*(x499)))+(((cj1)*(pz)))+(((px)*(x500))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj1)*(r01)*(sj0)))+(((cj0)*(cj1)*(r00)))+(((IkReal(-1.00000000000000))*(r02)*(sj1))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)))))+IKsqr(((((cj1)*(r01)*(sj0)))+(((cj0)*(cj1)*(r00)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)))), ((((cj1)*(r01)*(sj0)))+(((cj0)*(cj1)*(r00)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x502=((IkReal(1.00000000000000))*(cj1));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(IKsin(j4))+(((cj0)*(r01))));
evalcond[1]=((((r02)*(sj1)))+(IKcos(j4))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x502)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x502))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x503=((sj0)*(sj1));
IkReal x504=((cj0)*(sj1));
IkReal x505=((IkReal(1.00000000000000))*(cj1));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.000251160000000000))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py))));
evalcond[2]=((IkReal(-0.0137000000000000))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x505)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x505)))+(((pz)*(sj1))));
evalcond[3]=((((cj1)*(r02)))+(((r01)*(x503)))+(((r00)*(x504))));
evalcond[4]=((IkReal(-0.347055430000000))+(((cj1)*(pz)))+(((px)*(x504)))+(((py)*(x503))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x506=((IkReal(1.00000000000000))*(cj0));
if( IKabs(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(r01)*(x506))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x506)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)*(sj0))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(r01)*(x506)))))+IKsqr(((((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x506)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)*(sj0)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(r01)*(x506)))), ((((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x506)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)*(sj0)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x507=((IkReal(1.00000000000000))*(cj1));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(IKsin(j4))+(((cj0)*(r01))));
evalcond[1]=((((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(sj0)*(x507)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x507)))+(((IkReal(-1.00000000000000))*(IKcos(j4)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x508=((sj0)*(sj1));
IkReal x509=((cj0)*(sj1));
IkReal x510=((IkReal(1.00000000000000))*(cj1));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.000251160000000000))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py))));
evalcond[2]=((IkReal(0.0137000000000000))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x510)))+(((pz)*(sj1)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x510))));
evalcond[3]=((((cj1)*(r02)))+(((r01)*(x508)))+(((r00)*(x509))));
evalcond[4]=((IkReal(0.262444570000000))+(((cj1)*(pz)))+(((px)*(x509)))+(((py)*(x508))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj1)*(r01)*(sj0)))+(((cj0)*(cj1)*(r00)))+(((IkReal(-1.00000000000000))*(r02)*(sj1))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)))))+IKsqr(((((cj1)*(r01)*(sj0)))+(((cj0)*(cj1)*(r00)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(r01)))), ((((cj1)*(r01)*(sj0)))+(((cj0)*(cj1)*(r00)))+(((IkReal(-1.00000000000000))*(r02)*(sj1)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x511=((IkReal(1.00000000000000))*(cj1));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(IKsin(j4))+(((cj0)*(r01))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r01)*(sj0)*(x511)))+(((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x511)))+(IKcos(j4)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x512=((sj0)*(sj1));
IkReal x513=((cj0)*(sj1));
IkReal x514=((IkReal(1.00000000000000))*(cj1));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j2)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j2)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.000251160000000000))+(((IkReal(-1.00000000000000))*(px)*(sj0)))+(((cj0)*(py))));
evalcond[2]=((IkReal(-0.0137000000000000))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x514)))+(((pz)*(sj1)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x514))));
evalcond[3]=((((r01)*(x512)))+(((cj1)*(r02)))+(((r00)*(x513))));
evalcond[4]=((IkReal(-0.347055430000000))+(((px)*(x513)))+(((py)*(x512)))+(((cj1)*(pz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x515=((IkReal(1.00000000000000))*(cj0));
if( IKabs(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(r01)*(x515))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(x515)))+(((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)*(sj0))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(r01)*(x515)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(x515)))+(((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)*(sj0)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((r00)*(sj0)))+(((IkReal(-1.00000000000000))*(r01)*(x515)))), ((((IkReal(-1.00000000000000))*(cj1)*(r00)*(x515)))+(((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)*(sj0)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x516=((IkReal(1.00000000000000))*(cj1));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(IKsin(j4))+(((cj0)*(r01))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r01)*(sj0)*(x516)))+(((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(cj0)*(r00)*(x516)))+(((IkReal(-1.00000000000000))*(IKcos(j4)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x517=((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30);
IkReal x518=((IkReal(1.00000000000000))*(cj3));
IkReal x519=((r01)*(sj0));
IkReal x520=((r02)*(sj1));
IkReal x521=((cj2)*(sj3));
IkReal x522=((cj0)*(r00));
IkReal x523=((IkReal(1.00000000000000))*(cj1));
if( IKabs(((x517)*(((IKabs(sj2) != 0)?((IkReal)1/(sj2)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x519)*(x521)*(x523)))+(((IkReal(-1.00000000000000))*(sj1)*(x518)*(x519)))+(((IkReal(-1.00000000000000))*(sj1)*(x518)*(x522)))+(((IkReal(-1.00000000000000))*(cj1)*(r02)*(x518)))+(((x520)*(x521)))+(((IkReal(-1.00000000000000))*(x521)*(x522)*(x523))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x517)*(((((IkReal(-1.00000000000000))*(x520)))+(((cj1)*(x522)))+(((cj1)*(x519))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x517)*(((IKabs(sj2) != 0)?((IkReal)1/(sj2)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x519)*(x521)*(x523)))+(((IkReal(-1.00000000000000))*(sj1)*(x518)*(x519)))+(((IkReal(-1.00000000000000))*(sj1)*(x518)*(x522)))+(((IkReal(-1.00000000000000))*(cj1)*(r02)*(x518)))+(((x520)*(x521)))+(((IkReal(-1.00000000000000))*(x521)*(x522)*(x523)))))))+IKsqr(((x517)*(((((IkReal(-1.00000000000000))*(x520)))+(((cj1)*(x522)))+(((cj1)*(x519)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x517)*(((IKabs(sj2) != 0)?((IkReal)1/(sj2)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x519)*(x521)*(x523)))+(((IkReal(-1.00000000000000))*(sj1)*(x518)*(x519)))+(((IkReal(-1.00000000000000))*(sj1)*(x518)*(x522)))+(((IkReal(-1.00000000000000))*(cj1)*(r02)*(x518)))+(((x520)*(x521)))+(((IkReal(-1.00000000000000))*(x521)*(x522)*(x523)))))), ((x517)*(((((IkReal(-1.00000000000000))*(x520)))+(((cj1)*(x522)))+(((cj1)*(x519)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x524=IKcos(j4);
IkReal x525=IKsin(j4);
IkReal x526=((cj0)*(r00));
IkReal x527=((IkReal(1.00000000000000))*(cj1));
IkReal x528=((r01)*(sj0));
IkReal x529=((sj3)*(x524));
evalcond[0]=((((sj2)*(x529)))+(((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj2)*(x525)))+(((cj0)*(r01))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x526)*(x527)))+(((IkReal(-1.00000000000000))*(x527)*(x528)))+(((r02)*(sj1)))+(((cj3)*(x524))));
evalcond[2]=((((sj1)*(x528)))+(((sj1)*(x526)))+(((sj2)*(x525)))+(((cj1)*(r02)))+(((cj2)*(x529))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x530=((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30);
IkReal x531=((sj2)*(sj3));
IkReal x532=((cj1)*(r01)*(sj0));
IkReal x533=((IkReal(1.00000000000000))*(r02)*(sj1));
IkReal x534=((cj0)*(cj1)*(r00));
if( IKabs(((x530)*(((IKabs(cj2) != 0)?((IkReal)1/(cj2)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj3)*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(x531)*(x533)))+(((x531)*(x532)))+(((x531)*(x534)))+(((cj0)*(cj3)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x530)*(((((IkReal(-1.00000000000000))*(x533)))+(x532)+(x534))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x530)*(((IKabs(cj2) != 0)?((IkReal)1/(cj2)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj3)*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(x531)*(x533)))+(((x531)*(x532)))+(((x531)*(x534)))+(((cj0)*(cj3)*(r01)))))))+IKsqr(((x530)*(((((IkReal(-1.00000000000000))*(x533)))+(x532)+(x534)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x530)*(((IKabs(cj2) != 0)?((IkReal)1/(cj2)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj3)*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(x531)*(x533)))+(((x531)*(x532)))+(((x531)*(x534)))+(((cj0)*(cj3)*(r01)))))), ((x530)*(((((IkReal(-1.00000000000000))*(x533)))+(x532)+(x534)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x535=IKcos(j4);
IkReal x536=IKsin(j4);
IkReal x537=((cj0)*(r00));
IkReal x538=((IkReal(1.00000000000000))*(cj1));
IkReal x539=((r01)*(sj0));
IkReal x540=((sj3)*(x535));
evalcond[0]=((((sj2)*(x540)))+(((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((IkReal(-1.00000000000000))*(cj2)*(x536)))+(((cj0)*(r01))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x537)*(x538)))+(((IkReal(-1.00000000000000))*(x538)*(x539)))+(((r02)*(sj1)))+(((cj3)*(x535))));
evalcond[2]=((((sj1)*(x539)))+(((sj1)*(x537)))+(((sj2)*(x536)))+(((cj1)*(r02)))+(((cj2)*(x540))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x541=(cj2)*(cj2);
IkReal x542=(sj2)*(sj2);
IkReal x543=((cj0)*(r01));
IkReal x544=((r01)*(sj1));
IkReal x545=((IkReal(1.00000000000000))*(sj2));
IkReal x546=((cj1)*(r02));
IkReal x547=((IkReal(1.00000000000000))*(cj2));
IkReal x548=((sj0)*(x547));
IkReal x549=((cj0)*(r00)*(sj1));
if( IKabs(((((IKabs(((x541)+(x542))) != 0)?((IkReal)1/(((x541)+(x542)))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x545)*(x546)))+(((IkReal(-1.00000000000000))*(x545)*(x549)))+(((IkReal(-1.00000000000000))*(r00)*(x548)))+(((cj2)*(x543)))+(((IkReal(-1.00000000000000))*(sj0)*(x544)*(x545))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((sj3)*(x542)))+(((sj3)*(x541))))) != 0)?((IkReal)1/(((((sj3)*(x542)))+(((sj3)*(x541)))))):(IkReal)1.0e30))*(((((r00)*(sj0)*(sj2)))+(((IkReal(-1.00000000000000))*(x544)*(x548)))+(((IkReal(-1.00000000000000))*(x547)*(x549)))+(((IkReal(-1.00000000000000))*(x543)*(x545)))+(((IkReal(-1.00000000000000))*(x546)*(x547))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((x541)+(x542))) != 0)?((IkReal)1/(((x541)+(x542)))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x545)*(x546)))+(((IkReal(-1.00000000000000))*(x545)*(x549)))+(((IkReal(-1.00000000000000))*(r00)*(x548)))+(((cj2)*(x543)))+(((IkReal(-1.00000000000000))*(sj0)*(x544)*(x545)))))))+IKsqr(((((IKabs(((((sj3)*(x542)))+(((sj3)*(x541))))) != 0)?((IkReal)1/(((((sj3)*(x542)))+(((sj3)*(x541)))))):(IkReal)1.0e30))*(((((r00)*(sj0)*(sj2)))+(((IkReal(-1.00000000000000))*(x544)*(x548)))+(((IkReal(-1.00000000000000))*(x547)*(x549)))+(((IkReal(-1.00000000000000))*(x543)*(x545)))+(((IkReal(-1.00000000000000))*(x546)*(x547)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((IKabs(((x541)+(x542))) != 0)?((IkReal)1/(((x541)+(x542)))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(x545)*(x546)))+(((IkReal(-1.00000000000000))*(x545)*(x549)))+(((IkReal(-1.00000000000000))*(r00)*(x548)))+(((cj2)*(x543)))+(((IkReal(-1.00000000000000))*(sj0)*(x544)*(x545)))))), ((((IKabs(((((sj3)*(x542)))+(((sj3)*(x541))))) != 0)?((IkReal)1/(((((sj3)*(x542)))+(((sj3)*(x541)))))):(IkReal)1.0e30))*(((((r00)*(sj0)*(sj2)))+(((IkReal(-1.00000000000000))*(x544)*(x548)))+(((IkReal(-1.00000000000000))*(x547)*(x549)))+(((IkReal(-1.00000000000000))*(x543)*(x545)))+(((IkReal(-1.00000000000000))*(x546)*(x547)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x550=IKcos(j4);
IkReal x551=IKsin(j4);
IkReal x552=((cj0)*(r00));
IkReal x553=((IkReal(1.00000000000000))*(cj1));
IkReal x554=((r01)*(sj0));
IkReal x555=((sj3)*(x550));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(sj0)))+(((sj2)*(x555)))+(((IkReal(-1.00000000000000))*(cj2)*(x551)))+(((cj0)*(r01))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x553)*(x554)))+(((r02)*(sj1)))+(((IkReal(-1.00000000000000))*(x552)*(x553)))+(((cj3)*(x550))));
evalcond[2]=((((sj1)*(x554)))+(((sj1)*(x552)))+(((cj1)*(r02)))+(((sj2)*(x551)))+(((cj2)*(x555))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
    }
}
return solutions.GetNumSolutions()>0;
}

static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    IkReal tol = 1e-5*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        if( IKabs(wi[i]) < tol*100 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:genericrobot - robotican_arm (63b4673948b8813227e8b2ae2cab4ff7)>"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif

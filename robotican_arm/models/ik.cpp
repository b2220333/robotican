/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 62 generated on 2016-12-19 14:17:33.344113
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==62);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23;
x0=IKcos(j[0]);
x1=IKcos(j[3]);
x2=IKsin(j[0]);
x3=IKsin(j[2]);
x4=IKcos(j[2]);
x5=IKsin(j[1]);
x6=IKcos(j[1]);
x7=IKsin(j[3]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
x10=((IkReal(0.304749985540171))*(x2));
x11=((IkReal(0.0131002700000000))*(x4));
x12=((IkReal(0.0131002700000000))*(x0));
x13=((IkReal(1.00000000000000))*(x3));
x14=((IkReal(0.224000000000000))*(x4));
x15=((IkReal(1.00000000000000))*(x4));
x16=((IkReal(0.304749985540171))*(x0));
x17=((x2)*(x3));
x18=((x1)*(x5));
x19=((x6)*(x7));
x20=((x2)*(x5));
x21=((x0)*(x5));
x22=((x1)*(x6));
x23=((x21)*(x4));
eetrans[0]=((IkReal(0.113000000000000))+(((x14)*(x21)))+(((IkReal(-0.224000000000000))*(x17)))+(((x16)*(x19)))+(((IkReal(0.000251160000000000))*(x2)))+(((x1)*(((((IkReal(-1.00000000000000))*(x10)*(x3)))+(((x16)*(x4)*(x5)))))))+(((x12)*(x22)))+(((IkReal(0.266305430000000))*(x21)))+(((x7)*(((((IkReal(-1.00000000000000))*(x11)*(x21)))+(((IkReal(0.0131002700000000))*(x17))))))));
eetrans[1]=((((x7)*(((((IkReal(-1.00000000000000))*(x12)*(x3)))+(((IkReal(-1.00000000000000))*(x11)*(x20)))))))+(((IkReal(-0.000251160000000000))*(x0)))+(((IkReal(0.224000000000000))*(x0)*(x3)))+(((x14)*(x20)))+(((x1)*(((((x10)*(x4)*(x5)))+(((x16)*(x3)))))))+(((IkReal(0.0131002700000000))*(x2)*(x22)))+(((x10)*(x19)))+(((IkReal(0.266305430000000))*(x20))));
eetrans[2]=((IkReal(0.0795000000000000))+(((IkReal(-0.304749985540171))*(x5)*(x7)))+(((IkReal(-0.0131002700000000))*(x18)))+(((IkReal(-1.00000000000000))*(x11)*(x19)))+(((x14)*(x6)))+(((IkReal(0.304749985540171))*(x22)*(x4)))+(((IkReal(0.266305430000000))*(x6))));
IkReal x24=((IkReal(1.00000000000000))*(x15));
eerot[0]=((((x8)*(((((IkReal(-1.00000000000000))*(x13)*(x21)))+(((IkReal(-1.00000000000000))*(x2)*(x24)))))))+(((x9)*(((((x7)*(((((IkReal(-1.00000000000000))*(x21)*(x24)))+(x17)))))+(((x0)*(x22))))))));
IkReal x25=((IkReal(1.00000000000000))*(x13));
eerot[1]=((((x8)*(((((x0)*(x4)))+(((IkReal(-1.00000000000000))*(x20)*(x25)))))))+(((x9)*(((((x2)*(x22)))+(((x7)*(((((IkReal(-1.00000000000000))*(x15)*(x20)))+(((IkReal(-1.00000000000000))*(x0)*(x25))))))))))));
eerot[2]=((((x9)*(((((IkReal(-1.00000000000000))*(x15)*(x19)))+(((IkReal(-1.00000000000000))*(x18)))))))+(((IkReal(-1.00000000000000))*(x13)*(x6)*(x8))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=((IkReal(-0.113000000000000))+(px));
new_r01=r01;
new_py=py;
new_r02=r02;
new_pz=((IkReal(-0.0795000000000000))+(pz));
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
IkReal op[72], zeror[48];
int numroots;
IkReal x26=((IkReal(0.980610860000000))*(pz));
IkReal x27=((IkReal(0.000502320000000000))*(py));
IkReal x28=((IkReal(1.00000000000000))*(pp));
IkReal x29=((IkReal(0.0846108600000000))*(pz));
IkReal x30=(px)*(px);
IkReal x31=(pz)*(pz);
IkReal x32=((IkReal(0.00489134727259259))*(r00));
IkReal x33=((IkReal(0.113786689726947))*(r02));
IkReal x34=((IkReal(0.000133770543597600))*(r01));
IkReal x35=((IkReal(2.12508635976000e-5))*(r02));
IkReal x36=((IkReal(0.0912544844346679))*(r01));
IkReal x37=((pp)*(r02));
IkReal x38=((IkReal(0.00978269454518517))*(r02));
IkReal x39=((IkReal(0.227573379453893))*(r00));
IkReal x40=((IkReal(0.000246290223597600))*(r02));
IkReal x41=((IkReal(0.147355180845332))*(r01));
IkReal x42=((IkReal(0.00100464000000000))*(px));
IkReal x43=(py)*(py);
IkReal x44=((IkReal(0.000267541087195200))*(r00));
IkReal x45=((IkReal(0.00978269454518517))*(r01));
IkReal x46=((IkReal(0.182508968869336))*(r00));
IkReal x47=((IkReal(0.455146758907786))*(r01));
IkReal x48=((IkReal(0.294710361690664))*(r00));
IkReal x49=((IkReal(0.448000000000000))*(py));
IkReal x50=((IkReal(0.000112519680000000))+(((IkReal(-1.00000000000000))*(x49))));
IkReal x51=((IkReal(4.25017271952000e-5))*(r00));
IkReal x52=((pp)*(r01));
IkReal x53=((IkReal(0.000492580447195200))*(r00));
IkReal x54=((pz)*(r02));
IkReal x55=((py)*(r01));
IkReal x56=((IkReal(4.00000000000000))*(px));
IkReal x57=((py)*(r00));
IkReal x58=((px)*(r02));
IkReal x59=((pz)*(r01));
IkReal x60=((px)*(r01));
IkReal x61=((pz)*(r00));
IkReal x62=((py)*(r02));
IkReal x63=((px)*(r00));
IkReal x64=((IkReal(2.00000000000000))*(px));
IkReal x65=((IkReal(0.0859738843089998))*(px));
IkReal x66=((IkReal(0.171947768618000))*(px));
IkReal x67=((pp)*(r00));
IkReal x68=((IkReal(0.000112519680000000))+(x49));
IkReal x69=((IkReal(2.15932007830484e-5))*(x57));
IkReal x70=((IkReal(0.0228953122296784))*(x61));
IkReal x71=((r02)*(x27));
IkReal x72=((IkReal(0.0429869421544999))*(x67));
IkReal x73=((IkReal(0.532610860000000))*(x63));
IkReal x74=((IkReal(2.15932007830484e-5))*(x60));
IkReal x75=((IkReal(0.0228953122296784))*(x58));
IkReal x76=((IkReal(0.532610860000000))*(x55));
IkReal x77=((IkReal(0.000502320000000000))*(x59));
IkReal x78=((IkReal(0.532610860000000))*(x54));
IkReal x79=((IkReal(0.000502320000000000))*(x54));
IkReal x80=((r01)*(x27));
IkReal x81=((IkReal(0.000502320000000000))*(x63));
IkReal x82=((IkReal(0.0846108600000000))*(x62));
IkReal x83=((r01)*(x29));
IkReal x84=((r01)*(x28));
IkReal x85=((IkReal(0.0859738843089998))*(x37));
IkReal x86=((IkReal(2.00000000000000))*(x67));
IkReal x87=((IkReal(4.31864015660968e-5))*(x62));
IkReal x88=((IkReal(0.00100464000000000))*(x57));
IkReal x89=((r01)*(x42));
IkReal x90=((IkReal(4.31864015660968e-5))*(x59));
IkReal x91=((IkReal(0.980610860000000))*(x62));
IkReal x92=((r01)*(x26));
IkReal x93=((r02)*(x28));
IkReal x94=((IkReal(-0.896000000000000))*(px));
IkReal x95=((IkReal(0.0859738843089998))*(x52));
IkReal x96=((IkReal(0.00100464000000000))*(x61));
IkReal x97=((IkReal(0.0457906244593569))*(x59));
IkReal x98=((r02)*(x42));
IkReal x99=((IkReal(0.0457906244593569))*(x62));
IkReal x100=((IkReal(0.169221720000000))*(x61));
IkReal x101=((IkReal(0.169221720000000))*(x58));
IkReal x102=((IkReal(4.00000000000000))*(x52));
IkReal x103=((IkReal(8.63728031321935e-5))*(x61));
IkReal x104=((IkReal(8.63728031321935e-5))*(x58));
IkReal x105=((IkReal(1.96122172000000))*(x61));
IkReal x106=((IkReal(1.96122172000000))*(x58));
IkReal x107=((IkReal(0.169221720000000))*(x60));
IkReal x108=((IkReal(0.169221720000000))*(x57));
IkReal x109=((IkReal(1.96122172000000))*(x60));
IkReal x110=((IkReal(1.96122172000000))*(x57));
IkReal x111=((IkReal(-0.147355307008023))+(x27));
IkReal x112=((IkReal(0.0912543582719767))+(x27));
IkReal x113=((r00)*(x30));
IkReal x114=((r02)*(x31));
IkReal x115=((r01)*(x43));
IkReal x116=((x27)+(x28));
IkReal x117=((x54)*(x65));
IkReal x118=((x61)*(x64));
IkReal x119=((x55)*(x65));
IkReal x120=((IkReal(0.0859738843089998))*(x113));
IkReal x121=((IkReal(2.00000000000000))*(x114));
IkReal x122=((IkReal(2.00000000000000))*(pz)*(x55));
IkReal x123=((x57)*(x64));
IkReal x124=((IkReal(2.00000000000000))*(x115));
IkReal x125=((IkReal(2.00000000000000))*(py)*(x54));
IkReal x126=((IkReal(0.171947768618000))*(pz)*(x55));
IkReal x127=((IkReal(0.171947768618000))*(x114));
IkReal x128=((x61)*(x66));
IkReal x129=((x54)*(x56));
IkReal x130=((IkReal(4.00000000000000))*(x113));
IkReal x131=((x55)*(x56));
IkReal x132=((x57)*(x66));
IkReal x133=((IkReal(0.171947768618000))*(py)*(x54));
IkReal x134=((IkReal(0.171947768618000))*(x115));
IkReal x135=((IkReal(8.00000000000000))*(x115));
IkReal x136=((IkReal(8.00000000000000))*(py)*(x54));
IkReal x137=((IkReal(8.00000000000000))*(px)*(x57));
IkReal x138=((x41)+(x52));
IkReal x139=((x72)+(x32));
IkReal x140=((x34)+(x93));
IkReal x141=((x75)+(x37));
IkReal x142=((x75)+(x34));
IkReal x143=((x44)+(x99));
IkReal x144=((x48)+(x86));
IkReal x145=((x45)+(x95));
IkReal x146=((x70)+(x34));
IkReal x147=((x41)+(x84));
IkReal x148=((x77)+(x69));
IkReal x149=((x77)+(x74));
IkReal x150=((x89)+(x87));
IkReal x151=((x88)+(x90));
IkReal x152=((x75)+(x71));
IkReal x153=((x88)+(x87));
IkReal x154=((x89)+(x90));
IkReal x155=((x71)+(x69));
IkReal x156=((x39)+(x38)+(x85));
IkReal x157=((x38)+(x86)+(x85));
IkReal x158=((x145)+(x97));
IkReal x159=((x149)+(x70));
IkReal x160=((x76)+(x73)+(x78));
IkReal x161=((x79)+(x80)+(x81));
IkReal x162=((x74)+(x71)+(x70));
IkReal x163=((x161)+(x35));
IkReal x164=((x131)+(x130)+(x129));
IkReal x165=((x120)+(x117)+(x119));
IkReal x166=((x122)+(x121)+(x118)+(x33));
IkReal x167=((x135)+(x137)+(x136)+(x47));
IkReal x168=((x126)+(x127)+(x128)+(x39));
IkReal x169=((x134)+(x133)+(x132)+(x96));
IkReal x170=((x124)+(x125)+(x123)+(x91));
IkReal x171=((x124)+(x125)+(x123)+(x92));
IkReal x172=((x126)+(x127)+(x128)+(x86));
IkReal x173=((x134)+(x133)+(x132)+(x98));
IkReal x174=((x124)+(x125)+(x123)+(x36)+(x82));
IkReal x175=((x124)+(x125)+(x123)+(x36)+(x83));
op[0]=((IkReal(-0.147355307008023))+(((IkReal(-1.00000000000000))*(x116)))+(x26));
op[1]=x68;
op[2]=((IkReal(1.96122172000000))*(px));
op[3]=IkReal(0);
op[4]=((IkReal(-0.147355307008023))+(((IkReal(-1.00000000000000))*(x26)))+(((IkReal(-1.00000000000000))*(x116))));
op[5]=x68;
op[6]=x68;
op[7]=((IkReal(0.0912543582719767))+(((IkReal(-1.00000000000000))*(x116)))+(x29));
op[8]=IkReal(0);
op[9]=((IkReal(0.169221720000000))*(px));
op[10]=x68;
op[11]=((IkReal(0.0912543582719767))+(((IkReal(-1.00000000000000))*(x29)))+(((IkReal(-1.00000000000000))*(x116))));
op[12]=((((IkReal(-1.00000000000000))*(x140)))+(((IkReal(-1.00000000000000))*(x152)))+(((IkReal(-1.00000000000000))*(x160)))+(x166)+(x165)+(x159)+(((IkReal(-1.00000000000000))*(x139)))+(((IkReal(-1.00000000000000))*(x69))));
op[13]=((((IkReal(-1.00000000000000))*(x35)))+(x175)+(x161)+(((IkReal(-1.00000000000000))*(x84)))+(((IkReal(-1.00000000000000))*(x82))));
op[14]=((((IkReal(-1.00000000000000))*(x151)))+(((IkReal(-1.00000000000000))*(x172)))+(x164)+(x156)+(x150));
op[15]=((((IkReal(-1.00000000000000))*(x108)))+(x107)+(((IkReal(-1.00000000000000))*(x51))));
op[16]=((((IkReal(-1.00000000000000))*(x142)))+(((IkReal(-1.00000000000000))*(x149)))+(((IkReal(-1.00000000000000))*(x165)))+(((IkReal(-1.00000000000000))*(x166)))+(((IkReal(-1.00000000000000))*(x160)))+(x155)+(x139)+(x70)+(x37));
op[17]=((x174)+(x163)+(((IkReal(-1.00000000000000))*(x84)))+(((IkReal(-1.00000000000000))*(x83))));
op[18]=((((IkReal(-1.00000000000000))*(x147)))+(((IkReal(-1.00000000000000))*(x40)))+(x171)+(x161)+(((IkReal(-1.00000000000000))*(x91))));
op[19]=((((IkReal(-1.00000000000000))*(x148)))+(((IkReal(-1.00000000000000))*(x166)))+(((IkReal(-1.00000000000000))*(x75)))+(x160)+(x165)+(x146)+(((IkReal(-1.00000000000000))*(x139)))+(x74)+(x71)+(x37));
op[20]=((((IkReal(-1.00000000000000))*(x110)))+(x109)+(((IkReal(-1.00000000000000))*(x53))));
op[21]=((((IkReal(-1.00000000000000))*(x154)))+(((IkReal(-1.00000000000000))*(x168)))+(((IkReal(-1.00000000000000))*(x164)))+(x157)+(x153));
op[22]=((((IkReal(-1.00000000000000))*(x147)))+(x170)+(x161)+(x40)+(((IkReal(-1.00000000000000))*(x92))));
op[23]=((((IkReal(-1.00000000000000))*(x152)))+(((IkReal(-1.00000000000000))*(x165)))+(((IkReal(-1.00000000000000))*(x74)))+(x160)+(x166)+(x146)+(x148)+(x139)+(((IkReal(-1.00000000000000))*(x93))));
op[24]=x42;
op[25]=x94;
op[26]=((IkReal(3.92244344000000))*(py));
op[27]=IkReal(0);
op[28]=x42;
op[29]=x94;
op[30]=x94;
op[31]=x42;
op[32]=IkReal(0);
op[33]=((IkReal(0.338443440000000))*(py));
op[34]=x94;
op[35]=x42;
op[36]=((((IkReal(-1.00000000000000))*(x145)))+(x173)+(x44)+(x97)+(((IkReal(-1.00000000000000))*(x96)))+(((IkReal(-1.00000000000000))*(x99))));
op[37]=((((IkReal(-1.00000000000000))*(x164)))+(((IkReal(-1.00000000000000))*(x46)))+(((IkReal(-1.00000000000000))*(x100)))+(x101)+(x86));
op[38]=((((IkReal(-1.00000000000000))*(x104)))+(((IkReal(-1.00000000000000))*(x102)))+(x167)+(x103));
op[39]=((IkReal(-8.50034543904000e-5))*(r01));
op[40]=((((IkReal(-1.00000000000000))*(x173)))+(x158)+(x44)+(x96)+(((IkReal(-1.00000000000000))*(x99))));
op[41]=((((IkReal(-1.00000000000000))*(x164)))+(((IkReal(-1.00000000000000))*(x46)))+(((IkReal(-1.00000000000000))*(x101)))+(x100)+(x86));
op[42]=((((IkReal(-1.00000000000000))*(x164)))+(((IkReal(-1.00000000000000))*(x105)))+(x144)+(x106));
op[43]=((((IkReal(-1.00000000000000))*(x143)))+(((IkReal(-1.00000000000000))*(x145)))+(x169)+(x97)+(((IkReal(-1.00000000000000))*(x98))));
op[44]=((IkReal(-0.000985160894390400))*(r01));
op[45]=((((IkReal(-1.00000000000000))*(x167)))+(((IkReal(-1.00000000000000))*(x104)))+(x102)+(x103));
op[46]=((((IkReal(-1.00000000000000))*(x164)))+(((IkReal(-1.00000000000000))*(x106)))+(x144)+(x105));
op[47]=((((IkReal(-1.00000000000000))*(x143)))+(((IkReal(-1.00000000000000))*(x169)))+(x158)+(x98));
op[48]=((((IkReal(-1.00000000000000))*(x28)))+(x111)+(x26));
op[49]=x50;
op[50]=((IkReal(-1.96122172000000))*(px));
op[51]=IkReal(0);
op[52]=((((IkReal(-1.00000000000000))*(x26)))+(((IkReal(-1.00000000000000))*(x28)))+(x111));
op[53]=x50;
op[54]=x50;
op[55]=((((IkReal(-1.00000000000000))*(x28)))+(x112)+(x29));
op[56]=IkReal(0);
op[57]=((IkReal(-0.169221720000000))*(px));
op[58]=x50;
op[59]=((((IkReal(-1.00000000000000))*(x29)))+(((IkReal(-1.00000000000000))*(x28)))+(x112));
op[60]=((((IkReal(-1.00000000000000))*(x148)))+(((IkReal(-1.00000000000000))*(x165)))+(((IkReal(-1.00000000000000))*(x160)))+(((IkReal(-1.00000000000000))*(x70)))+(x166)+(x142)+(x139)+(x74)+(x71)+(((IkReal(-1.00000000000000))*(x93))));
op[61]=((((IkReal(-1.00000000000000))*(x175)))+(((IkReal(-1.00000000000000))*(x35)))+(x161)+(x52)+(x82));
op[62]=((((IkReal(-1.00000000000000))*(x153)))+(((IkReal(-1.00000000000000))*(x168)))+(((IkReal(-1.00000000000000))*(x164)))+(x157)+(x154));
op[63]=((((IkReal(-1.00000000000000))*(x108)))+(x107)+(x51));
op[64]=((((IkReal(-1.00000000000000))*(x162)))+(((IkReal(-1.00000000000000))*(x166)))+(((IkReal(-1.00000000000000))*(x160)))+(x165)+(x141)+(x148)+(((IkReal(-1.00000000000000))*(x139)))+(x34));
op[65]=((((IkReal(-1.00000000000000))*(x174)))+(x163)+(x52)+(x83));
op[66]=((((IkReal(-1.00000000000000))*(x171)))+(((IkReal(-1.00000000000000))*(x40)))+(x161)+(x138)+(x91));
op[67]=((((IkReal(-1.00000000000000))*(x146)))+(((IkReal(-1.00000000000000))*(x155)))+(((IkReal(-1.00000000000000))*(x165)))+(((IkReal(-1.00000000000000))*(x166)))+(x160)+(x141)+(x149)+(x139));
op[68]=((((IkReal(-1.00000000000000))*(x110)))+(x109)+(x53));
op[69]=((((IkReal(-1.00000000000000))*(x150)))+(((IkReal(-1.00000000000000))*(x172)))+(x164)+(x156)+(x151));
op[70]=((((IkReal(-1.00000000000000))*(x170)))+(x161)+(x138)+(x40)+(x92));
op[71]=((((IkReal(-1.00000000000000))*(x140)))+(((IkReal(-1.00000000000000))*(x159)))+(x160)+(x166)+(x165)+(x152)+(((IkReal(-1.00000000000000))*(x139)))+(x69));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
j1array[numsolutions]=((IkReal(2.00000000000000))*(atan(htj1)));
j2array[numsolutions]=((IkReal(2.00000000000000))*(atan(htj2)));
j3array[numsolutions]=((IkReal(2.00000000000000))*(atan(htj3)));
IkReal x176=(htj1)*(htj1);
IkReal x177=(htj2)*(htj2);
IkReal x178=(htj3)*(htj3);
cj1array[numsolutions]=((((IKabs(((IkReal(1.00000000000000))+(x176))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+(x176)))):(IkReal)1.0e30))*(((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x176))))));
cj2array[numsolutions]=((((IKabs(((IkReal(1.00000000000000))+(x177))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+(x177)))):(IkReal)1.0e30))*(((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x177))))));
cj3array[numsolutions]=((((IKabs(((IkReal(1.00000000000000))+(x178))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+(x178)))):(IkReal)1.0e30))*(((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x178))))));
sj1array[numsolutions]=((IkReal(2.00000000000000))*(htj1)*(((IKabs(((IkReal(1.00000000000000))+((htj1)*(htj1)))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+((htj1)*(htj1))))):(IkReal)1.0e30)));
sj2array[numsolutions]=((IkReal(2.00000000000000))*(htj2)*(((IKabs(((IkReal(1.00000000000000))+((htj2)*(htj2)))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+((htj2)*(htj2))))):(IkReal)1.0e30)));
sj3array[numsolutions]=((IkReal(2.00000000000000))*(htj3)*(((IKabs(((IkReal(1.00000000000000))+((htj3)*(htj3)))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+((htj3)*(htj3))))):(IkReal)1.0e30)));
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign(cj3);
dummyeval[0]=cj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(-0.266305430000000))+(((cj2)*(pz)))+(((py)*(sj1)*(sj2)))+(((cj1)*(px)*(sj2))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x179=((IkReal(0.140796246480367))*(px));
IkReal x180=((cj1)*(cj2));
IkReal x181=((pz)*(sj2));
IkReal x182=((IkReal(3.27532593442748))*(px));
IkReal x183=((cj1)*(py));
IkReal x184=((cj2)*(py)*(sj1));
if( IKabs(((IkReal(0.0315029968263363))+(((sj1)*(x179)))+(((x180)*(x182)))+(((IkReal(-0.140796246480367))*(x183)))+(((IkReal(-3.27532593442748))*(x181)))+(((IkReal(3.27532593442748))*(x184))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.732850378450064))+(((x179)*(x180)))+(((IkReal(-0.140796246480367))*(x181)))+(((IkReal(0.140796246480367))*(x184)))+(((IkReal(-1.00000000000000))*(sj1)*(x182)))+(((IkReal(3.27532593442748))*(x183))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.0315029968263363))+(((sj1)*(x179)))+(((x180)*(x182)))+(((IkReal(-0.140796246480367))*(x183)))+(((IkReal(-3.27532593442748))*(x181)))+(((IkReal(3.27532593442748))*(x184)))))+IKsqr(((IkReal(-0.732850378450064))+(((x179)*(x180)))+(((IkReal(-0.140796246480367))*(x181)))+(((IkReal(0.140796246480367))*(x184)))+(((IkReal(-1.00000000000000))*(sj1)*(x182)))+(((IkReal(3.27532593442748))*(x183)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((IkReal(0.0315029968263363))+(((sj1)*(x179)))+(((x180)*(x182)))+(((IkReal(-0.140796246480367))*(x183)))+(((IkReal(-3.27532593442748))*(x181)))+(((IkReal(3.27532593442748))*(x184)))), ((IkReal(-0.732850378450064))+(((x179)*(x180)))+(((IkReal(-0.140796246480367))*(x181)))+(((IkReal(0.140796246480367))*(x184)))+(((IkReal(-1.00000000000000))*(sj1)*(x182)))+(((IkReal(3.27532593442748))*(x183)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x185=IKcos(j4);
IkReal x186=IKsin(j4);
IkReal x187=((IkReal(1.00000000000000))*(px));
evalcond[0]=((IkReal(-0.223748840000000))+(((IkReal(0.0131002700000000))*(x186)))+(((cj1)*(py)))+(((IkReal(-0.304749985540171))*(x185)))+(((IkReal(-1.00000000000000))*(sj1)*(x187))));
evalcond[1]=((((IkReal(0.0131002700000000))*(x185)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(x187)))+(((IkReal(-1.00000000000000))*(cj2)*(py)*(sj1)))+(((pz)*(sj2)))+(((IkReal(0.304749985540171))*(x186))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
dummyeval[0]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x188=((py)*(sj1));
IkReal x189=((IkReal(1.00000000000000))*(sj1));
IkReal x190=((cj1)*(px));
IkReal x191=((IkReal(1.00000000000000))*(cj2));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj2)*(r01)*(x189)))+(((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x191))));
evalcond[2]=((IkReal(-0.210648570000000))+(((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x189))));
evalcond[3]=((IkReal(0.304749985540171))+(((IkReal(-1.00000000000000))*(x188)*(x191)))+(((IkReal(-1.00000000000000))*(x190)*(x191)))+(((pz)*(sj2))));
evalcond[4]=((IkReal(-0.266305430000000))+(((sj2)*(x188)))+(((sj2)*(x190)))+(((cj2)*(pz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x192=((IkReal(1.00000000000000))*(r01));
if( IKabs(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))+(((IkReal(-1.00000000000000))*(sj1)*(sj2)*(x192))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(x192))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))+(((IkReal(-1.00000000000000))*(sj1)*(sj2)*(x192)))))+IKsqr(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(x192)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))+(((IkReal(-1.00000000000000))*(sj1)*(sj2)*(x192)))), ((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(x192)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))+(IKcos(j5)));
evalcond[1]=((IKsin(j5))+(((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x193=((py)*(sj1));
IkReal x194=((IkReal(1.00000000000000))*(sj1));
IkReal x195=((cj1)*(px));
IkReal x196=((IkReal(1.00000000000000))*(cj2));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj2)*(r01)*(x194)))+(((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x196))));
evalcond[2]=((IkReal(-0.210648570000000))+(((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x194))));
evalcond[3]=((IkReal(0.304749985540171))+(((IkReal(-1.00000000000000))*(x195)*(x196)))+(((pz)*(sj2)))+(((IkReal(-1.00000000000000))*(x193)*(x196))));
evalcond[4]=((IkReal(-0.266305430000000))+(((sj2)*(x193)))+(((sj2)*(x195)))+(((cj2)*(pz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x197=((IkReal(1.00000000000000))*(r01));
if( IKabs(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))+(((IkReal(-1.00000000000000))*(sj1)*(sj2)*(x197))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(x197))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))+(((IkReal(-1.00000000000000))*(sj1)*(sj2)*(x197)))))+IKsqr(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(x197)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))+(((IkReal(-1.00000000000000))*(sj1)*(sj2)*(x197)))), ((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(x197)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))+(IKcos(j5)));
evalcond[1]=((IKsin(j5))+(((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x198=((py)*(sj1));
IkReal x199=((IkReal(1.00000000000000))*(sj1));
IkReal x200=((cj1)*(px));
IkReal x201=((IkReal(1.00000000000000))*(cj2));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj2)*(r01)*(x199)))+(((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x201))));
evalcond[2]=((IkReal(-0.236849110000000))+(((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x199))));
evalcond[3]=((IkReal(-0.304749985540171))+(((IkReal(-1.00000000000000))*(x200)*(x201)))+(((IkReal(-1.00000000000000))*(x198)*(x201)))+(((pz)*(sj2))));
evalcond[4]=((IkReal(-0.266305430000000))+(((sj2)*(x198)))+(((cj2)*(pz)))+(((sj2)*(x200))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x202=((IkReal(1.00000000000000))*(sj1));
if( IKabs(((((IkReal(-1.00000000000000))*(r01)*(sj2)*(x202)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(x202))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(r01)*(sj2)*(x202)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))))+IKsqr(((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(x202)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IkReal(-1.00000000000000))*(r01)*(sj2)*(x202)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))), ((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(x202)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(IKcos(j5)))));
evalcond[1]=((IKsin(j5))+(((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x203=((py)*(sj1));
IkReal x204=((IkReal(1.00000000000000))*(sj1));
IkReal x205=((cj1)*(px));
IkReal x206=((IkReal(1.00000000000000))*(cj2));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=((((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x204)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x206))));
evalcond[2]=((IkReal(-0.236849110000000))+(((IkReal(-1.00000000000000))*(px)*(x204)))+(((cj1)*(py))));
evalcond[3]=((IkReal(-0.304749985540171))+(((IkReal(-1.00000000000000))*(x203)*(x206)))+(((IkReal(-1.00000000000000))*(x205)*(x206)))+(((pz)*(sj2))));
evalcond[4]=((IkReal(-0.266305430000000))+(((cj2)*(pz)))+(((sj2)*(x205)))+(((sj2)*(x203))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x207=((IkReal(1.00000000000000))*(sj1));
if( IKabs(((((IkReal(-1.00000000000000))*(r01)*(sj2)*(x207)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(x207))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(r01)*(sj2)*(x207)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))))+IKsqr(((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(x207)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IkReal(-1.00000000000000))*(r01)*(sj2)*(x207)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))), ((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(x207)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(IKcos(j5)))));
evalcond[1]=((IKsin(j5))+(((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x208=((cj1)*(r00));
IkReal x209=((IkReal(1.00000000000000))*(sj2));
IkReal x210=((r01)*(sj1));
if( IKabs(((((IkReal(-1.00000000000000))*(x208)*(x209)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))+(((IkReal(-1.00000000000000))*(x209)*(x210))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))*(((((cj2)*(x208)))+(((IkReal(-1.00000000000000))*(r02)*(x209)))+(((cj2)*(x210))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(x208)*(x209)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))+(((IkReal(-1.00000000000000))*(x209)*(x210)))))+IKsqr(((((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))*(((((cj2)*(x208)))+(((IkReal(-1.00000000000000))*(r02)*(x209)))+(((cj2)*(x210)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IkReal(-1.00000000000000))*(x208)*(x209)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))+(((IkReal(-1.00000000000000))*(x209)*(x210)))), ((((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))*(((((cj2)*(x208)))+(((IkReal(-1.00000000000000))*(r02)*(x209)))+(((cj2)*(x210)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x211=IKcos(j5);
IkReal x212=((r01)*(sj1));
IkReal x213=((IkReal(1.00000000000000))*(cj2));
IkReal x214=((cj1)*(r00));
evalcond[0]=((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))+(((sj4)*(x211))));
evalcond[1]=((((cj4)*(x211)))+(((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(x213)*(x214)))+(((IkReal(-1.00000000000000))*(x212)*(x213))));
evalcond[2]=((((sj2)*(x212)))+(((sj2)*(x214)))+(IKsin(j5))+(((cj2)*(r02))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x215=((IkReal(1.00000000000000))*(cj1));
if( IKabs(((((IkReal(-1.00000000000000))*(r00)*(sj2)*(x215)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x215))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(r00)*(sj2)*(x215)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))))+IKsqr(((((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x215)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IkReal(-1.00000000000000))*(r00)*(sj2)*(x215)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))), ((((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x215)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x216=IKcos(j5);
IkReal x217=((r01)*(sj1));
IkReal x218=((IkReal(1.00000000000000))*(cj2));
IkReal x219=((cj1)*(r00));
evalcond[0]=((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))+(((sj4)*(x216))));
evalcond[1]=((((cj4)*(x216)))+(((IkReal(-1.00000000000000))*(x218)*(x219)))+(((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(x217)*(x218))));
evalcond[2]=((((sj2)*(x217)))+(((sj2)*(x219)))+(IKsin(j5))+(((cj2)*(r02))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(-0.266305430000000))+(((cj2)*(pz)))+(((py)*(sj1)*(sj2)))+(((cj1)*(px)*(sj2))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x220=((IkReal(0.140796246480367))*(px));
IkReal x221=((cj1)*(cj2));
IkReal x222=((pz)*(sj2));
IkReal x223=((IkReal(3.27532593442748))*(px));
IkReal x224=((cj1)*(py));
IkReal x225=((cj2)*(py)*(sj1));
if( IKabs(((IkReal(0.0315029968263363))+(((IkReal(-0.140796246480367))*(x224)))+(((sj1)*(x220)))+(((IkReal(3.27532593442748))*(x225)))+(((x221)*(x223)))+(((IkReal(-3.27532593442748))*(x222))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.732850378450064))+(((IkReal(-0.140796246480367))*(x222)))+(((x220)*(x221)))+(((IkReal(-1.00000000000000))*(sj1)*(x223)))+(((IkReal(0.140796246480367))*(x225)))+(((IkReal(3.27532593442748))*(x224))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.0315029968263363))+(((IkReal(-0.140796246480367))*(x224)))+(((sj1)*(x220)))+(((IkReal(3.27532593442748))*(x225)))+(((x221)*(x223)))+(((IkReal(-3.27532593442748))*(x222)))))+IKsqr(((IkReal(-0.732850378450064))+(((IkReal(-0.140796246480367))*(x222)))+(((x220)*(x221)))+(((IkReal(-1.00000000000000))*(sj1)*(x223)))+(((IkReal(0.140796246480367))*(x225)))+(((IkReal(3.27532593442748))*(x224)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((IkReal(0.0315029968263363))+(((IkReal(-0.140796246480367))*(x224)))+(((sj1)*(x220)))+(((IkReal(3.27532593442748))*(x225)))+(((x221)*(x223)))+(((IkReal(-3.27532593442748))*(x222)))), ((IkReal(-0.732850378450064))+(((IkReal(-0.140796246480367))*(x222)))+(((x220)*(x221)))+(((IkReal(-1.00000000000000))*(sj1)*(x223)))+(((IkReal(0.140796246480367))*(x225)))+(((IkReal(3.27532593442748))*(x224)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x226=IKcos(j4);
IkReal x227=IKsin(j4);
IkReal x228=((IkReal(1.00000000000000))*(px));
evalcond[0]=((IkReal(-0.223748840000000))+(((cj1)*(py)))+(((IkReal(-0.304749985540171))*(x226)))+(((IkReal(-1.00000000000000))*(sj1)*(x228)))+(((IkReal(0.0131002700000000))*(x227))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj1)*(cj2)*(x228)))+(((IkReal(-1.00000000000000))*(cj2)*(py)*(sj1)))+(((IkReal(0.0131002700000000))*(x226)))+(((pz)*(sj2)))+(((IkReal(0.304749985540171))*(x227))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
dummyeval[0]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x229=((py)*(sj1));
IkReal x230=((IkReal(1.00000000000000))*(sj1));
IkReal x231=((cj1)*(px));
IkReal x232=((IkReal(1.00000000000000))*(cj2));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=((((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x230)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x232))));
evalcond[2]=((IkReal(-0.210648570000000))+(((IkReal(-1.00000000000000))*(px)*(x230)))+(((cj1)*(py))));
evalcond[3]=((IkReal(0.304749985540171))+(((IkReal(-1.00000000000000))*(x231)*(x232)))+(((pz)*(sj2)))+(((IkReal(-1.00000000000000))*(x229)*(x232))));
evalcond[4]=((IkReal(-0.266305430000000))+(((sj2)*(x231)))+(((sj2)*(x229)))+(((cj2)*(pz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x233=((IkReal(1.00000000000000))*(r01));
if( IKabs(((((IkReal(-1.00000000000000))*(sj1)*(sj2)*(x233)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(x233))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(sj1)*(sj2)*(x233)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))))+IKsqr(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(x233)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IkReal(-1.00000000000000))*(sj1)*(sj2)*(x233)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))), ((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(x233)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))+(IKcos(j5)));
evalcond[1]=((IKsin(j5))+(((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x234=((py)*(sj1));
IkReal x235=((IkReal(1.00000000000000))*(sj1));
IkReal x236=((cj1)*(px));
IkReal x237=((IkReal(1.00000000000000))*(cj2));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=((((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x235)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x237))));
evalcond[2]=((IkReal(-0.210648570000000))+(((IkReal(-1.00000000000000))*(px)*(x235)))+(((cj1)*(py))));
evalcond[3]=((IkReal(0.304749985540171))+(((IkReal(-1.00000000000000))*(x236)*(x237)))+(((pz)*(sj2)))+(((IkReal(-1.00000000000000))*(x234)*(x237))));
evalcond[4]=((IkReal(-0.266305430000000))+(((sj2)*(x236)))+(((sj2)*(x234)))+(((cj2)*(pz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x238=((IkReal(1.00000000000000))*(r01));
if( IKabs(((((IkReal(-1.00000000000000))*(sj1)*(sj2)*(x238)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(x238))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(sj1)*(sj2)*(x238)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))))+IKsqr(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(x238)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IkReal(-1.00000000000000))*(sj1)*(sj2)*(x238)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))), ((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(x238)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))+(IKcos(j5)));
evalcond[1]=((IKsin(j5))+(((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x239=((py)*(sj1));
IkReal x240=((IkReal(1.00000000000000))*(sj1));
IkReal x241=((cj1)*(px));
IkReal x242=((IkReal(1.00000000000000))*(cj2));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj2)*(r01)*(x240)))+(((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x242))));
evalcond[2]=((IkReal(-0.236849110000000))+(((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x240))));
evalcond[3]=((IkReal(-0.304749985540171))+(((IkReal(-1.00000000000000))*(x241)*(x242)))+(((pz)*(sj2)))+(((IkReal(-1.00000000000000))*(x239)*(x242))));
evalcond[4]=((IkReal(-0.266305430000000))+(((sj2)*(x239)))+(((sj2)*(x241)))+(((cj2)*(pz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x243=((IkReal(1.00000000000000))*(sj1));
if( IKabs(((((IkReal(-1.00000000000000))*(r01)*(sj2)*(x243)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(x243))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(r01)*(sj2)*(x243)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))))+IKsqr(((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(x243)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IkReal(-1.00000000000000))*(r01)*(sj2)*(x243)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))), ((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(x243)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(IKcos(j5)))));
evalcond[1]=((IKsin(j5))+(((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x244=((py)*(sj1));
IkReal x245=((IkReal(1.00000000000000))*(sj1));
IkReal x246=((cj1)*(px));
IkReal x247=((IkReal(1.00000000000000))*(cj2));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj2)*(r01)*(x245)))+(((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x247))));
evalcond[2]=((IkReal(-0.236849110000000))+(((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x245))));
evalcond[3]=((IkReal(-0.304749985540171))+(((pz)*(sj2)))+(((IkReal(-1.00000000000000))*(x246)*(x247)))+(((IkReal(-1.00000000000000))*(x244)*(x247))));
evalcond[4]=((IkReal(-0.266305430000000))+(((sj2)*(x246)))+(((sj2)*(x244)))+(((cj2)*(pz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x248=((IkReal(1.00000000000000))*(sj1));
if( IKabs(((((IkReal(-1.00000000000000))*(r01)*(sj2)*(x248)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(x248))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(r01)*(sj2)*(x248)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))))+IKsqr(((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(x248)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IkReal(-1.00000000000000))*(r01)*(sj2)*(x248)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))), ((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(x248)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(IKcos(j5)))));
evalcond[1]=((IKsin(j5))+(((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x249=((cj1)*(r00));
IkReal x250=((IkReal(1.00000000000000))*(sj2));
IkReal x251=((r01)*(sj1));
if( IKabs(((((IkReal(-1.00000000000000))*(x250)*(x251)))+(((IkReal(-1.00000000000000))*(x249)*(x250)))+(((IkReal(-1.00000000000000))*(cj2)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))*(((((cj2)*(x251)))+(((IkReal(-1.00000000000000))*(r02)*(x250)))+(((cj2)*(x249))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(x250)*(x251)))+(((IkReal(-1.00000000000000))*(x249)*(x250)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))))+IKsqr(((((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))*(((((cj2)*(x251)))+(((IkReal(-1.00000000000000))*(r02)*(x250)))+(((cj2)*(x249)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IkReal(-1.00000000000000))*(x250)*(x251)))+(((IkReal(-1.00000000000000))*(x249)*(x250)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))), ((((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))*(((((cj2)*(x251)))+(((IkReal(-1.00000000000000))*(r02)*(x250)))+(((cj2)*(x249)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x252=IKcos(j5);
IkReal x253=((r01)*(sj1));
IkReal x254=((IkReal(1.00000000000000))*(cj2));
IkReal x255=((cj1)*(r00));
evalcond[0]=((((sj4)*(x252)))+(((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1))));
evalcond[1]=((((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(x254)*(x255)))+(((cj4)*(x252)))+(((IkReal(-1.00000000000000))*(x253)*(x254))));
evalcond[2]=((IKsin(j5))+(((cj2)*(r02)))+(((sj2)*(x255)))+(((sj2)*(x253))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x256=((IkReal(1.00000000000000))*(cj1));
if( IKabs(((((IkReal(-1.00000000000000))*(r00)*(sj2)*(x256)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x256))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(r00)*(sj2)*(x256)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))))+IKsqr(((((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x256)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IkReal(-1.00000000000000))*(r00)*(sj2)*(x256)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))), ((((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x256)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x257=IKcos(j5);
IkReal x258=((r01)*(sj1));
IkReal x259=((IkReal(1.00000000000000))*(cj2));
IkReal x260=((cj1)*(r00));
evalcond[0]=((((sj4)*(x257)))+(((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x259)*(x260)))+(((r02)*(sj2)))+(((cj4)*(x257)))+(((IkReal(-1.00000000000000))*(x258)*(x259))));
evalcond[2]=((((sj2)*(x260)))+(IKsin(j5))+(((cj2)*(r02)))+(((sj2)*(x258))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(-0.266305430000000))+(((cj2)*(pz)))+(((py)*(sj1)*(sj2)))+(((cj1)*(px)*(sj2))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x261=((pz)*(sj2));
IkReal x262=((px)*(sj1));
IkReal x263=((cj1)*(py));
IkReal x264=((cj1)*(cj2)*(px));
IkReal x265=((cj2)*(py)*(sj1));
if( IKabs(((IkReal(0.0315737215968683))+(((IkReal(-0.140796246480367))*(x262)))+(((IkReal(0.140796246480367))*(x263)))+(((IkReal(-3.27532593442748))*(x261)))+(((IkReal(3.27532593442748))*(x264)))+(((IkReal(3.27532593442748))*(x265))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.734495640173446))+(((IkReal(-0.140796246480367))*(x261)))+(((IkReal(0.140796246480367))*(x265)))+(((IkReal(0.140796246480367))*(x264)))+(((IkReal(-3.27532593442748))*(x263)))+(((IkReal(3.27532593442748))*(x262))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.0315737215968683))+(((IkReal(-0.140796246480367))*(x262)))+(((IkReal(0.140796246480367))*(x263)))+(((IkReal(-3.27532593442748))*(x261)))+(((IkReal(3.27532593442748))*(x264)))+(((IkReal(3.27532593442748))*(x265)))))+IKsqr(((IkReal(-0.734495640173446))+(((IkReal(-0.140796246480367))*(x261)))+(((IkReal(0.140796246480367))*(x265)))+(((IkReal(0.140796246480367))*(x264)))+(((IkReal(-3.27532593442748))*(x263)))+(((IkReal(3.27532593442748))*(x262)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((IkReal(0.0315737215968683))+(((IkReal(-0.140796246480367))*(x262)))+(((IkReal(0.140796246480367))*(x263)))+(((IkReal(-3.27532593442748))*(x261)))+(((IkReal(3.27532593442748))*(x264)))+(((IkReal(3.27532593442748))*(x265)))), ((IkReal(-0.734495640173446))+(((IkReal(-0.140796246480367))*(x261)))+(((IkReal(0.140796246480367))*(x265)))+(((IkReal(0.140796246480367))*(x264)))+(((IkReal(-3.27532593442748))*(x263)))+(((IkReal(3.27532593442748))*(x262)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x266=IKcos(j4);
IkReal x267=IKsin(j4);
IkReal x268=((IkReal(1.00000000000000))*(px));
evalcond[0]=((IkReal(0.224251160000000))+(((IkReal(-0.0131002700000000))*(x267)))+(((IkReal(-1.00000000000000))*(sj1)*(x268)))+(((cj1)*(py)))+(((IkReal(0.304749985540171))*(x266))));
evalcond[1]=((((IkReal(0.0131002700000000))*(x266)))+(((IkReal(-1.00000000000000))*(cj2)*(py)*(sj1)))+(((pz)*(sj2)))+(((IkReal(0.304749985540171))*(x267)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(x268))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
dummyeval[0]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x269=((py)*(sj1));
IkReal x270=((IkReal(1.00000000000000))*(sj1));
IkReal x271=((cj1)*(px));
IkReal x272=((IkReal(1.00000000000000))*(cj2));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj2)*(r01)*(x270)))+(((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x272))));
evalcond[2]=((IkReal(0.211150890000000))+(((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x270))));
evalcond[3]=((IkReal(0.304749985540171))+(((IkReal(-1.00000000000000))*(x271)*(x272)))+(((IkReal(-1.00000000000000))*(x269)*(x272)))+(((pz)*(sj2))));
evalcond[4]=((IkReal(-0.266305430000000))+(((sj2)*(x271)))+(((sj2)*(x269)))+(((cj2)*(pz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))))+IKsqr(((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))), ((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(IKcos(j5)))));
evalcond[1]=((((cj2)*(r02)))+(((IkReal(-1.00000000000000))*(IKsin(j5))))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x273=((py)*(sj1));
IkReal x274=((IkReal(1.00000000000000))*(sj1));
IkReal x275=((cj1)*(px));
IkReal x276=((IkReal(1.00000000000000))*(cj2));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj2)*(r01)*(x274)))+(((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x276))));
evalcond[2]=((IkReal(0.211150890000000))+(((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x274))));
evalcond[3]=((IkReal(0.304749985540171))+(((IkReal(-1.00000000000000))*(x273)*(x276)))+(((pz)*(sj2)))+(((IkReal(-1.00000000000000))*(x275)*(x276))));
evalcond[4]=((IkReal(-0.266305430000000))+(((sj2)*(x275)))+(((sj2)*(x273)))+(((cj2)*(pz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))))+IKsqr(((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))), ((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(IKcos(j5)))));
evalcond[1]=((((cj2)*(r02)))+(((IkReal(-1.00000000000000))*(IKsin(j5))))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x277=((py)*(sj1));
IkReal x278=((IkReal(1.00000000000000))*(sj1));
IkReal x279=((cj1)*(px));
IkReal x280=((IkReal(1.00000000000000))*(cj2));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj2)*(r01)*(x278)))+(((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x280))));
evalcond[2]=((IkReal(0.237351430000000))+(((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x278))));
evalcond[3]=((IkReal(-0.304749985540171))+(((IkReal(-1.00000000000000))*(x277)*(x280)))+(((pz)*(sj2)))+(((IkReal(-1.00000000000000))*(x279)*(x280))));
evalcond[4]=((IkReal(-0.266305430000000))+(((sj2)*(x277)))+(((sj2)*(x279)))+(((cj2)*(pz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))))+IKsqr(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))), ((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))+(IKcos(j5)));
evalcond[1]=((((cj2)*(r02)))+(((IkReal(-1.00000000000000))*(IKsin(j5))))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x281=((py)*(sj1));
IkReal x282=((IkReal(1.00000000000000))*(sj1));
IkReal x283=((cj1)*(px));
IkReal x284=((IkReal(1.00000000000000))*(cj2));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=((((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x284)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x282))));
evalcond[2]=((IkReal(0.237351430000000))+(((IkReal(-1.00000000000000))*(px)*(x282)))+(((cj1)*(py))));
evalcond[3]=((IkReal(-0.304749985540171))+(((IkReal(-1.00000000000000))*(x281)*(x284)))+(((pz)*(sj2)))+(((IkReal(-1.00000000000000))*(x283)*(x284))));
evalcond[4]=((IkReal(-0.266305430000000))+(((sj2)*(x281)))+(((sj2)*(x283)))+(((cj2)*(pz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))))+IKsqr(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))), ((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))+(IKcos(j5)));
evalcond[1]=((((cj2)*(r02)))+(((IkReal(-1.00000000000000))*(IKsin(j5))))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x285=((cj1)*(r00));
IkReal x286=((r01)*(sj1));
if( IKabs(((((sj2)*(x285)))+(((sj2)*(x286)))+(((cj2)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))*(((((cj2)*(x286)))+(((cj2)*(x285)))+(((IkReal(-1.00000000000000))*(r02)*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((sj2)*(x285)))+(((sj2)*(x286)))+(((cj2)*(r02)))))+IKsqr(((((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))*(((((cj2)*(x286)))+(((cj2)*(x285)))+(((IkReal(-1.00000000000000))*(r02)*(sj2)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((sj2)*(x285)))+(((sj2)*(x286)))+(((cj2)*(r02)))), ((((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))*(((((cj2)*(x286)))+(((cj2)*(x285)))+(((IkReal(-1.00000000000000))*(r02)*(sj2)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x287=IKcos(j5);
IkReal x288=((r01)*(sj1));
IkReal x289=((IkReal(1.00000000000000))*(cj2));
IkReal x290=((cj1)*(r00));
evalcond[0]=((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(sj4)*(x287))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x288)*(x289)))+(((IkReal(-1.00000000000000))*(x289)*(x290)))+(((r02)*(sj2)))+(((cj4)*(x287))));
evalcond[2]=((((sj2)*(x288)))+(((cj2)*(r02)))+(((IkReal(-1.00000000000000))*(IKsin(j5))))+(((sj2)*(x290))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))))+IKsqr(((((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))), ((((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x291=IKcos(j5);
IkReal x292=((r01)*(sj1));
IkReal x293=((IkReal(1.00000000000000))*(cj2));
IkReal x294=((cj1)*(r00));
evalcond[0]=((((IkReal(-1.00000000000000))*(sj4)*(x291)))+(((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1))));
evalcond[1]=((((cj4)*(x291)))+(((IkReal(-1.00000000000000))*(x293)*(x294)))+(((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(x292)*(x293))));
evalcond[2]=((((cj2)*(r02)))+(((IkReal(-1.00000000000000))*(IKsin(j5))))+(((sj2)*(x294)))+(((sj2)*(x292))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(-0.266305430000000))+(((cj2)*(pz)))+(((py)*(sj1)*(sj2)))+(((cj1)*(px)*(sj2))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x295=((pz)*(sj2));
IkReal x296=((px)*(sj1));
IkReal x297=((cj1)*(py));
IkReal x298=((cj1)*(cj2)*(px));
IkReal x299=((cj2)*(py)*(sj1));
if( IKabs(((IkReal(0.0315737215968683))+(((IkReal(-3.27532593442748))*(x295)))+(((IkReal(-0.140796246480367))*(x296)))+(((IkReal(0.140796246480367))*(x297)))+(((IkReal(3.27532593442748))*(x299)))+(((IkReal(3.27532593442748))*(x298))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.734495640173446))+(((IkReal(-3.27532593442748))*(x297)))+(((IkReal(-0.140796246480367))*(x295)))+(((IkReal(0.140796246480367))*(x298)))+(((IkReal(0.140796246480367))*(x299)))+(((IkReal(3.27532593442748))*(x296))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.0315737215968683))+(((IkReal(-3.27532593442748))*(x295)))+(((IkReal(-0.140796246480367))*(x296)))+(((IkReal(0.140796246480367))*(x297)))+(((IkReal(3.27532593442748))*(x299)))+(((IkReal(3.27532593442748))*(x298)))))+IKsqr(((IkReal(-0.734495640173446))+(((IkReal(-3.27532593442748))*(x297)))+(((IkReal(-0.140796246480367))*(x295)))+(((IkReal(0.140796246480367))*(x298)))+(((IkReal(0.140796246480367))*(x299)))+(((IkReal(3.27532593442748))*(x296)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((IkReal(0.0315737215968683))+(((IkReal(-3.27532593442748))*(x295)))+(((IkReal(-0.140796246480367))*(x296)))+(((IkReal(0.140796246480367))*(x297)))+(((IkReal(3.27532593442748))*(x299)))+(((IkReal(3.27532593442748))*(x298)))), ((IkReal(-0.734495640173446))+(((IkReal(-3.27532593442748))*(x297)))+(((IkReal(-0.140796246480367))*(x295)))+(((IkReal(0.140796246480367))*(x298)))+(((IkReal(0.140796246480367))*(x299)))+(((IkReal(3.27532593442748))*(x296)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x300=IKcos(j4);
IkReal x301=IKsin(j4);
IkReal x302=((IkReal(1.00000000000000))*(px));
evalcond[0]=((IkReal(0.224251160000000))+(((IkReal(-1.00000000000000))*(sj1)*(x302)))+(((IkReal(-0.0131002700000000))*(x301)))+(((IkReal(0.304749985540171))*(x300)))+(((cj1)*(py))));
evalcond[1]=((((IkReal(0.304749985540171))*(x301)))+(((IkReal(-1.00000000000000))*(cj2)*(py)*(sj1)))+(((IkReal(0.0131002700000000))*(x300)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(x302)))+(((pz)*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
dummyeval[0]=sj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x303=((py)*(sj1));
IkReal x304=((IkReal(1.00000000000000))*(sj1));
IkReal x305=((cj1)*(px));
IkReal x306=((IkReal(1.00000000000000))*(cj2));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=((((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x306)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x304))));
evalcond[2]=((IkReal(0.211150890000000))+(((IkReal(-1.00000000000000))*(px)*(x304)))+(((cj1)*(py))));
evalcond[3]=((IkReal(0.304749985540171))+(((IkReal(-1.00000000000000))*(x303)*(x306)))+(((IkReal(-1.00000000000000))*(x305)*(x306)))+(((pz)*(sj2))));
evalcond[4]=((IkReal(-0.266305430000000))+(((sj2)*(x305)))+(((sj2)*(x303)))+(((cj2)*(pz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))))+IKsqr(((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))), ((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(IKcos(j5)))));
evalcond[1]=((((cj2)*(r02)))+(((IkReal(-1.00000000000000))*(IKsin(j5))))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x307=((py)*(sj1));
IkReal x308=((IkReal(1.00000000000000))*(sj1));
IkReal x309=((cj1)*(px));
IkReal x310=((IkReal(1.00000000000000))*(cj2));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj1)*(r00)*(x310)))+(((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x308))));
evalcond[2]=((IkReal(0.211150890000000))+(((IkReal(-1.00000000000000))*(px)*(x308)))+(((cj1)*(py))));
evalcond[3]=((IkReal(0.304749985540171))+(((IkReal(-1.00000000000000))*(x307)*(x310)))+(((pz)*(sj2)))+(((IkReal(-1.00000000000000))*(x309)*(x310))));
evalcond[4]=((IkReal(-0.266305430000000))+(((sj2)*(x309)))+(((sj2)*(x307)))+(((cj2)*(pz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))))+IKsqr(((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))), ((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(IKcos(j5)))));
evalcond[1]=((((cj2)*(r02)))+(((IkReal(-1.00000000000000))*(IKsin(j5))))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x311=((py)*(sj1));
IkReal x312=((IkReal(1.00000000000000))*(sj1));
IkReal x313=((cj1)*(px));
IkReal x314=((IkReal(1.00000000000000))*(cj2));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj1)*(r00)*(x314)))+(((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x312))));
evalcond[2]=((IkReal(0.237351430000000))+(((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x312))));
evalcond[3]=((IkReal(-0.304749985540171))+(((IkReal(-1.00000000000000))*(x313)*(x314)))+(((pz)*(sj2)))+(((IkReal(-1.00000000000000))*(x311)*(x314))));
evalcond[4]=((IkReal(-0.266305430000000))+(((cj2)*(pz)))+(((sj2)*(x313)))+(((sj2)*(x311))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))))+IKsqr(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))), ((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))+(IKcos(j5)));
evalcond[1]=((((cj2)*(r02)))+(((IkReal(-1.00000000000000))*(IKsin(j5))))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x315=((py)*(sj1));
IkReal x316=((IkReal(1.00000000000000))*(sj1));
IkReal x317=((cj1)*(px));
IkReal x318=((IkReal(1.00000000000000))*(cj2));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj1)*(r00)*(x318)))+(((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x316))));
evalcond[2]=((IkReal(0.237351430000000))+(((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x316))));
evalcond[3]=((IkReal(-0.304749985540171))+(((IkReal(-1.00000000000000))*(x315)*(x318)))+(((pz)*(sj2)))+(((IkReal(-1.00000000000000))*(x317)*(x318))));
evalcond[4]=((IkReal(-0.266305430000000))+(((cj2)*(pz)))+(((sj2)*(x315)))+(((sj2)*(x317))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))))+IKsqr(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))), ((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))+(IKcos(j5)));
evalcond[1]=((((cj2)*(r02)))+(((IkReal(-1.00000000000000))*(IKsin(j5))))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x319=((cj1)*(r00));
IkReal x320=((r01)*(sj1));
if( IKabs(((((sj2)*(x320)))+(((cj2)*(r02)))+(((sj2)*(x319))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))*(((((cj2)*(x320)))+(((IkReal(-1.00000000000000))*(r02)*(sj2)))+(((cj2)*(x319))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((sj2)*(x320)))+(((cj2)*(r02)))+(((sj2)*(x319)))))+IKsqr(((((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))*(((((cj2)*(x320)))+(((IkReal(-1.00000000000000))*(r02)*(sj2)))+(((cj2)*(x319)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((sj2)*(x320)))+(((cj2)*(r02)))+(((sj2)*(x319)))), ((((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30))*(((((cj2)*(x320)))+(((IkReal(-1.00000000000000))*(r02)*(sj2)))+(((cj2)*(x319)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x321=IKcos(j5);
IkReal x322=((r01)*(sj1));
IkReal x323=((IkReal(1.00000000000000))*(cj2));
IkReal x324=((cj1)*(r00));
evalcond[0]=((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(sj4)*(x321))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x322)*(x323)))+(((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(x323)*(x324)))+(((cj4)*(x321))));
evalcond[2]=((((sj2)*(x324)))+(((sj2)*(x322)))+(((cj2)*(r02)))+(((IkReal(-1.00000000000000))*(IKsin(j5)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))))+IKsqr(((((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))), ((((IKabs(sj4) != 0)?((IkReal)1/(sj4)):(IkReal)1.0e30))*(((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x325=IKcos(j5);
IkReal x326=((r01)*(sj1));
IkReal x327=((IkReal(1.00000000000000))*(cj2));
IkReal x328=((cj1)*(r00));
evalcond[0]=((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(sj4)*(x325))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x326)*(x327)))+(((IkReal(-1.00000000000000))*(x327)*(x328)))+(((r02)*(sj2)))+(((cj4)*(x325))));
evalcond[2]=((((sj2)*(x326)))+(((sj2)*(x328)))+(((cj2)*(r02)))+(((IkReal(-1.00000000000000))*(IKsin(j5)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x329=((IkReal(8.54269560406427e+28))*(sj2));
IkReal x330=((py)*(sj1));
IkReal x331=((cj3)*(pz));
IkReal x332=((cj2)*(cj3));
IkReal x333=((cj2)*(pz));
IkReal x334=((cj1)*(px));
IkReal x335=((IkReal(1.98727687430310e+30))*(sj2));
IkReal x336=((IkReal(1.98727687430310e+30))*(x334));
if( IKabs(((gconst1)*(((IkReal(2.27496622619945e+28))+(((IkReal(-8.54269560406427e+28))*(x333)))+(((IkReal(-1.00000000000000))*(x329)*(x330)))+(((IkReal(-1.00000000000000))*(x329)*(x334)))+(((x332)*(x336)))+(((IkReal(1.91356381531040e+28))*(cj3)))+(((IkReal(-1.00000000000000))*(x331)*(x335)))+(((IkReal(1.98727687430310e+30))*(x330)*(x332))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((IkReal(-5.29222622540343e+29))+(((x334)*(x335)))+(((IkReal(1.98727687430310e+30))*(x333)))+(((x330)*(x335)))+(((IkReal(-1.00000000000000))*(x329)*(x331)))+(((IkReal(8.54269560406427e+28))*(x332)*(x334)))+(((IkReal(8.54269560406427e+28))*(x330)*(x332)))+(((IkReal(-4.45150019843895e+29))*(cj3))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst1)*(((IkReal(2.27496622619945e+28))+(((IkReal(-8.54269560406427e+28))*(x333)))+(((IkReal(-1.00000000000000))*(x329)*(x330)))+(((IkReal(-1.00000000000000))*(x329)*(x334)))+(((x332)*(x336)))+(((IkReal(1.91356381531040e+28))*(cj3)))+(((IkReal(-1.00000000000000))*(x331)*(x335)))+(((IkReal(1.98727687430310e+30))*(x330)*(x332)))))), ((gconst1)*(((IkReal(-5.29222622540343e+29))+(((x334)*(x335)))+(((IkReal(1.98727687430310e+30))*(x333)))+(((x330)*(x335)))+(((IkReal(-1.00000000000000))*(x329)*(x331)))+(((IkReal(8.54269560406427e+28))*(x332)*(x334)))+(((IkReal(8.54269560406427e+28))*(x330)*(x332)))+(((IkReal(-4.45150019843895e+29))*(cj3)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x337=IKcos(j4);
IkReal x338=IKsin(j4);
IkReal x339=((py)*(sj1));
IkReal x340=((IkReal(1.00000000000000))*(px));
IkReal x341=((IkReal(0.0131002700000000))*(x338));
IkReal x342=((IkReal(0.304749985540171))*(x337));
evalcond[0]=((IkReal(0.000251160000000000))+(((IkReal(-0.224000000000000))*(sj3)))+(((sj3)*(x341)))+(((cj1)*(py)))+(((IkReal(-1.00000000000000))*(sj1)*(x340)))+(((IkReal(-1.00000000000000))*(sj3)*(x342))));
evalcond[1]=((((IkReal(0.304749985540171))*(x338)))+(((IkReal(0.0131002700000000))*(x337)))+(((IkReal(-1.00000000000000))*(cj2)*(x339)))+(((pz)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(x340))));
evalcond[2]=((IkReal(-0.266305430000000))+(((IkReal(-1.00000000000000))*(cj3)*(x342)))+(((sj2)*(x339)))+(((IkReal(-0.224000000000000))*(cj3)))+(((cj2)*(pz)))+(((cj1)*(px)*(sj2)))+(((cj3)*(x341))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[2];
IkReal x343=(sj3)*(sj3);
IkReal x344=(cj3)*(cj3);
dummyeval[0]=((x343)+(x344));
dummyeval[1]=((((sj4)*(x344)))+(((sj4)*(x343))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj3;
dummyeval[1]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj4;
dummyeval[1]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x345=((py)*(sj1));
IkReal x346=((IkReal(1.00000000000000))*(sj1));
IkReal x347=((cj1)*(px));
IkReal x348=((IkReal(1.00000000000000))*(cj2));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj1)*(r00)*(x348)))+(((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x346))));
evalcond[2]=((IkReal(-0.210648570000000))+(((IkReal(-1.00000000000000))*(px)*(x346)))+(((cj1)*(py))));
evalcond[3]=((IkReal(0.304749985540171))+(((IkReal(-1.00000000000000))*(x347)*(x348)))+(((IkReal(-1.00000000000000))*(x345)*(x348)))+(((pz)*(sj2))));
evalcond[4]=((IkReal(-0.266305430000000))+(((sj2)*(x345)))+(((sj2)*(x347)))+(((cj2)*(pz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x349=((IkReal(1.00000000000000))*(r01));
if( IKabs(((((IkReal(-1.00000000000000))*(sj1)*(sj2)*(x349)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(x349))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(sj1)*(sj2)*(x349)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))))+IKsqr(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(x349)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IkReal(-1.00000000000000))*(sj1)*(sj2)*(x349)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))), ((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(x349)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))+(IKcos(j5)));
evalcond[1]=((IKsin(j5))+(((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x350=((py)*(sj1));
IkReal x351=((IkReal(1.00000000000000))*(sj1));
IkReal x352=((cj1)*(px));
IkReal x353=((IkReal(1.00000000000000))*(cj2));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj2)*(r01)*(x351)))+(((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x353))));
evalcond[2]=((IkReal(-0.210648570000000))+(((IkReal(-1.00000000000000))*(px)*(x351)))+(((cj1)*(py))));
evalcond[3]=((IkReal(0.304749985540171))+(((pz)*(sj2)))+(((IkReal(-1.00000000000000))*(x352)*(x353)))+(((IkReal(-1.00000000000000))*(x350)*(x353))));
evalcond[4]=((IkReal(-0.266305430000000))+(((sj2)*(x350)))+(((sj2)*(x352)))+(((cj2)*(pz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x354=((IkReal(1.00000000000000))*(r01));
if( IKabs(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))+(((IkReal(-1.00000000000000))*(sj1)*(sj2)*(x354))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(x354))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))+(((IkReal(-1.00000000000000))*(sj1)*(sj2)*(x354)))))+IKsqr(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(x354)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))+(((IkReal(-1.00000000000000))*(sj1)*(sj2)*(x354)))), ((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(x354)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))+(IKcos(j5)));
evalcond[1]=((IKsin(j5))+(((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x355=((py)*(sj1));
IkReal x356=((IkReal(1.00000000000000))*(sj1));
IkReal x357=((cj1)*(px));
IkReal x358=((IkReal(1.00000000000000))*(cj2));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj2)*(r01)*(x356)))+(((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x358))));
evalcond[2]=((IkReal(0.211150890000000))+(((IkReal(-1.00000000000000))*(px)*(x356)))+(((cj1)*(py))));
evalcond[3]=((IkReal(0.304749985540171))+(((IkReal(-1.00000000000000))*(x357)*(x358)))+(((pz)*(sj2)))+(((IkReal(-1.00000000000000))*(x355)*(x358))));
evalcond[4]=((IkReal(-0.266305430000000))+(((sj2)*(x357)))+(((sj2)*(x355)))+(((cj2)*(pz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))))+IKsqr(((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))), ((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(IKcos(j5)))));
evalcond[1]=((((cj2)*(r02)))+(((IkReal(-1.00000000000000))*(IKsin(j5))))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x359=((py)*(sj1));
IkReal x360=((IkReal(1.00000000000000))*(sj1));
IkReal x361=((cj1)*(px));
IkReal x362=((IkReal(1.00000000000000))*(cj2));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=((((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x362)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x360))));
evalcond[2]=((IkReal(0.211150890000000))+(((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x360))));
evalcond[3]=((IkReal(0.304749985540171))+(((IkReal(-1.00000000000000))*(x361)*(x362)))+(((IkReal(-1.00000000000000))*(x359)*(x362)))+(((pz)*(sj2))));
evalcond[4]=((IkReal(-0.266305430000000))+(((sj2)*(x359)))+(((sj2)*(x361)))+(((cj2)*(pz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))))+IKsqr(((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))), ((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(IKcos(j5)))));
evalcond[1]=((((cj2)*(r02)))+(((IkReal(-1.00000000000000))*(IKsin(j5))))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x363=((py)*(sj1));
IkReal x364=((IkReal(1.00000000000000))*(sj1));
IkReal x365=((cj1)*(px));
IkReal x366=((IkReal(1.00000000000000))*(cj2));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x366)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x364))));
evalcond[2]=((IkReal(-0.236849110000000))+(((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x364))));
evalcond[3]=((IkReal(-0.304749985540171))+(((IkReal(-1.00000000000000))*(x363)*(x366)))+(((pz)*(sj2)))+(((IkReal(-1.00000000000000))*(x365)*(x366))));
evalcond[4]=((IkReal(-0.266305430000000))+(((sj2)*(x363)))+(((sj2)*(x365)))+(((cj2)*(pz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x367=((IkReal(1.00000000000000))*(sj1));
if( IKabs(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))+(((IkReal(-1.00000000000000))*(r01)*(sj2)*(x367))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(r00)*(x367)))+(((cj1)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))+(((IkReal(-1.00000000000000))*(r01)*(sj2)*(x367)))))+IKsqr(((((IkReal(-1.00000000000000))*(r00)*(x367)))+(((cj1)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))+(((IkReal(-1.00000000000000))*(r01)*(sj2)*(x367)))), ((((IkReal(-1.00000000000000))*(r00)*(x367)))+(((cj1)*(r01)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(IKcos(j5)))));
evalcond[1]=((IKsin(j5))+(((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x368=((py)*(sj1));
IkReal x369=((IkReal(1.00000000000000))*(sj1));
IkReal x370=((cj1)*(px));
IkReal x371=((IkReal(1.00000000000000))*(cj2));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=((((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x369)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x371))));
evalcond[2]=((IkReal(-0.236849110000000))+(((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x369))));
evalcond[3]=((IkReal(-0.304749985540171))+(((IkReal(-1.00000000000000))*(x368)*(x371)))+(((IkReal(-1.00000000000000))*(x370)*(x371)))+(((pz)*(sj2))));
evalcond[4]=((IkReal(-0.266305430000000))+(((sj2)*(x368)))+(((cj2)*(pz)))+(((sj2)*(x370))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x372=((IkReal(1.00000000000000))*(sj1));
if( IKabs(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))+(((IkReal(-1.00000000000000))*(r01)*(sj2)*(x372))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(r00)*(x372)))+(((cj1)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))+(((IkReal(-1.00000000000000))*(r01)*(sj2)*(x372)))))+IKsqr(((((IkReal(-1.00000000000000))*(r00)*(x372)))+(((cj1)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))+(((IkReal(-1.00000000000000))*(r01)*(sj2)*(x372)))), ((((IkReal(-1.00000000000000))*(r00)*(x372)))+(((cj1)*(r01)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(IKcos(j5)))));
evalcond[1]=((IKsin(j5))+(((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x373=((py)*(sj1));
IkReal x374=((IkReal(1.00000000000000))*(sj1));
IkReal x375=((cj1)*(px));
IkReal x376=((IkReal(1.00000000000000))*(cj2));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x376)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x374))));
evalcond[2]=((IkReal(0.237351430000000))+(((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x374))));
evalcond[3]=((IkReal(-0.304749985540171))+(((IkReal(-1.00000000000000))*(x373)*(x376)))+(((pz)*(sj2)))+(((IkReal(-1.00000000000000))*(x375)*(x376))));
evalcond[4]=((IkReal(-0.266305430000000))+(((cj2)*(pz)))+(((sj2)*(x373)))+(((sj2)*(x375))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))))+IKsqr(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))), ((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))+(IKcos(j5)));
evalcond[1]=((((cj2)*(r02)))+(((IkReal(-1.00000000000000))*(IKsin(j5))))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x377=((py)*(sj1));
IkReal x378=((IkReal(1.00000000000000))*(sj1));
IkReal x379=((cj1)*(px));
IkReal x380=((IkReal(1.00000000000000))*(cj2));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj1)*(r00)*(x380)))+(((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x378))));
evalcond[2]=((IkReal(0.237351430000000))+(((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x378))));
evalcond[3]=((IkReal(-0.304749985540171))+(((IkReal(-1.00000000000000))*(x379)*(x380)))+(((pz)*(sj2)))+(((IkReal(-1.00000000000000))*(x377)*(x380))));
evalcond[4]=((IkReal(-0.266305430000000))+(((cj2)*(pz)))+(((sj2)*(x379)))+(((sj2)*(x377))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))))+IKsqr(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))), ((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))+(IKcos(j5)));
evalcond[1]=((((cj2)*(r02)))+(((IkReal(-1.00000000000000))*(IKsin(j5))))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x381=((sj1)*(sj2));
IkReal x382=((IkReal(1.00000000000000))*(sj1));
IkReal x383=((cj1)*(sj2));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.000251160000000000))+(((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x382))));
evalcond[2]=((IkReal(0.0131002700000000))+(((IkReal(-1.00000000000000))*(cj2)*(py)*(x382)))+(((pz)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(px))));
evalcond[3]=((((cj2)*(r02)))+(((r00)*(x383)))+(((r01)*(x381))));
evalcond[4]=((IkReal(-0.795055415540171))+(((px)*(x383)))+(((cj2)*(pz)))+(((py)*(x381))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r02)*(sj2)))+(((cj1)*(cj2)*(r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))))+IKsqr(((((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r02)*(sj2)))+(((cj1)*(cj2)*(r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))), ((((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r02)*(sj2)))+(((cj1)*(cj2)*(r00)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x384=((IkReal(1.00000000000000))*(sj1));
evalcond[0]=((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(x384)))+(((IkReal(-1.00000000000000))*(IKsin(j5)))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj2)*(r01)*(x384)))+(((r02)*(sj2)))+(IKcos(j5))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x385=((sj1)*(sj2));
IkReal x386=((IkReal(1.00000000000000))*(sj1));
IkReal x387=((cj1)*(sj2));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.000251160000000000))+(((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x386))));
evalcond[2]=((IkReal(-0.0131002700000000))+(((IkReal(-1.00000000000000))*(cj2)*(py)*(x386)))+(((pz)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(px))));
evalcond[3]=((((cj2)*(r02)))+(((r00)*(x387)))+(((r01)*(x385))));
evalcond[4]=((IkReal(-0.185555444459829))+(((px)*(x387)))+(((cj2)*(pz)))+(((py)*(x385))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x388=((IkReal(1.00000000000000))*(cj2));
if( IKabs(((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(x388)))+(((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x388))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(x388)))+(((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x388)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))), ((((IkReal(-1.00000000000000))*(cj1)*(r00)*(x388)))+(((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x388)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x389=((IkReal(1.00000000000000))*(sj1));
evalcond[0]=((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(x389)))+(((IkReal(-1.00000000000000))*(IKsin(j5)))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj2)*(r01)*(x389)))+(((IkReal(-1.00000000000000))*(IKcos(j5))))+(((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x390=((sj1)*(sj2));
IkReal x391=((IkReal(1.00000000000000))*(sj1));
IkReal x392=((cj1)*(sj2));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.000251160000000000))+(((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x391))));
evalcond[2]=((IkReal(0.0131002700000000))+(((IkReal(-1.00000000000000))*(cj2)*(py)*(x391)))+(((pz)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(px))));
evalcond[3]=((((r00)*(x392)))+(((r01)*(x390)))+(((cj2)*(r02))));
evalcond[4]=((IkReal(-0.795055415540171))+(((py)*(x390)))+(((px)*(x392)))+(((cj2)*(pz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r02)*(sj2)))+(((cj1)*(cj2)*(r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))))+IKsqr(((((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r02)*(sj2)))+(((cj1)*(cj2)*(r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))), ((((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r02)*(sj2)))+(((cj1)*(cj2)*(r00)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x393=((IkReal(1.00000000000000))*(sj1));
evalcond[0]=((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(x393)))+(((IkReal(-1.00000000000000))*(IKsin(j5)))));
evalcond[1]=((((r02)*(sj2)))+(IKcos(j5))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r00)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x393))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x394=((sj1)*(sj2));
IkReal x395=((IkReal(1.00000000000000))*(sj1));
IkReal x396=((cj1)*(sj2));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.000251160000000000))+(((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x395))));
evalcond[2]=((IkReal(-0.0131002700000000))+(((IkReal(-1.00000000000000))*(cj2)*(py)*(x395)))+(((pz)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(px))));
evalcond[3]=((((r00)*(x396)))+(((r01)*(x394)))+(((cj2)*(r02))));
evalcond[4]=((IkReal(-0.185555444459829))+(((py)*(x394)))+(((px)*(x396)))+(((cj2)*(pz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x397=((IkReal(1.00000000000000))*(cj2));
if( IKabs(((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x397)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x397))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))))+IKsqr(((((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x397)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x397)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))), ((((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x397)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x397)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x398=((IkReal(1.00000000000000))*(sj1));
evalcond[0]=((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(x398)))+(((IkReal(-1.00000000000000))*(IKsin(j5)))));
evalcond[1]=((((IkReal(-1.00000000000000))*(IKcos(j5))))+(((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r00)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x398))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x399=((sj1)*(sj2));
IkReal x400=((IkReal(1.00000000000000))*(sj1));
IkReal x401=((cj1)*(sj2));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.000251160000000000))+(((IkReal(-1.00000000000000))*(px)*(x400)))+(((cj1)*(py))));
evalcond[2]=((IkReal(0.0131002700000000))+(((IkReal(-1.00000000000000))*(cj2)*(py)*(x400)))+(((pz)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(px))));
evalcond[3]=((((r01)*(x399)))+(((r00)*(x401)))+(((cj2)*(r02))));
evalcond[4]=((IkReal(0.262444555540171))+(((px)*(x401)))+(((py)*(x399)))+(((cj2)*(pz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r02)*(sj2)))+(((cj1)*(cj2)*(r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)))))+IKsqr(((((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r02)*(sj2)))+(((cj1)*(cj2)*(r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)))), ((((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r02)*(sj2)))+(((cj1)*(cj2)*(r00)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x402=((IkReal(1.00000000000000))*(cj2));
evalcond[0]=((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))+(IKsin(j5)));
evalcond[1]=((((IkReal(-1.00000000000000))*(r01)*(sj1)*(x402)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x402)))+(((r02)*(sj2)))+(IKcos(j5)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x403=((sj1)*(sj2));
IkReal x404=((IkReal(1.00000000000000))*(sj1));
IkReal x405=((cj1)*(sj2));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.000251160000000000))+(((IkReal(-1.00000000000000))*(px)*(x404)))+(((cj1)*(py))));
evalcond[2]=((IkReal(-0.0131002700000000))+(((IkReal(-1.00000000000000))*(cj2)*(py)*(x404)))+(((pz)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(px))));
evalcond[3]=((((r00)*(x405)))+(((r01)*(x403)))+(((cj2)*(r02))));
evalcond[4]=((IkReal(-0.347055415540171))+(((py)*(x403)))+(((px)*(x405)))+(((cj2)*(pz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x406=((IkReal(1.00000000000000))*(cj1));
if( IKabs(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x406))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(cj2)*(r00)*(x406))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x406)))))+IKsqr(((((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(cj2)*(r00)*(x406)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x406)))), ((((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(cj2)*(r00)*(x406)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x407=((IkReal(1.00000000000000))*(sj1));
evalcond[0]=((((cj1)*(r01)))+(IKsin(j5))+(((IkReal(-1.00000000000000))*(r00)*(x407))));
evalcond[1]=((((IkReal(-1.00000000000000))*(IKcos(j5))))+(((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r00)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x407))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x408=((sj1)*(sj2));
IkReal x409=((IkReal(1.00000000000000))*(sj1));
IkReal x410=((cj1)*(sj2));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.000251160000000000))+(((IkReal(-1.00000000000000))*(px)*(x409)))+(((cj1)*(py))));
evalcond[2]=((IkReal(0.0131002700000000))+(((IkReal(-1.00000000000000))*(cj2)*(py)*(x409)))+(((pz)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(px))));
evalcond[3]=((((r01)*(x408)))+(((cj2)*(r02)))+(((r00)*(x410))));
evalcond[4]=((IkReal(0.262444555540171))+(((py)*(x408)))+(((px)*(x410)))+(((cj2)*(pz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r02)*(sj2)))+(((cj1)*(cj2)*(r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)))))+IKsqr(((((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r02)*(sj2)))+(((cj1)*(cj2)*(r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)))), ((((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r02)*(sj2)))+(((cj1)*(cj2)*(r00)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x411=((IkReal(1.00000000000000))*(cj2));
evalcond[0]=((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))+(IKsin(j5)));
evalcond[1]=((((IkReal(-1.00000000000000))*(r01)*(sj1)*(x411)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x411)))+(((r02)*(sj2)))+(IKcos(j5)));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x412=((sj1)*(sj2));
IkReal x413=((IkReal(1.00000000000000))*(sj1));
IkReal x414=((cj1)*(sj2));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.000251160000000000))+(((IkReal(-1.00000000000000))*(px)*(x413)))+(((cj1)*(py))));
evalcond[2]=((IkReal(-0.0131002700000000))+(((pz)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(py)*(x413)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(px))));
evalcond[3]=((((r01)*(x412)))+(((cj2)*(r02)))+(((r00)*(x414))));
evalcond[4]=((IkReal(-0.347055415540171))+(((py)*(x412)))+(((px)*(x414)))+(((cj2)*(pz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x415=((IkReal(1.00000000000000))*(cj1));
if( IKabs(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x415))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(cj2)*(r00)*(x415))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x415)))))+IKsqr(((((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(cj2)*(r00)*(x415)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x415)))), ((((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(cj2)*(r00)*(x415)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x416=((IkReal(1.00000000000000))*(sj1));
evalcond[0]=((((cj1)*(r01)))+(IKsin(j5))+(((IkReal(-1.00000000000000))*(r00)*(x416))));
evalcond[1]=((((IkReal(-1.00000000000000))*(IKcos(j5))))+(((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r00)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x416))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x417=((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30);
IkReal x418=((r02)*(sj2));
IkReal x419=((cj3)*(sj4));
IkReal x420=((r01)*(sj1));
IkReal x421=((IkReal(1.00000000000000))*(cj4));
IkReal x422=((cj1)*(cj2)*(r00));
if( IKabs(((x417)*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj2)*(x419)*(x420)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)*(x421)))+(((IkReal(-1.00000000000000))*(x419)*(x422)))+(((IkReal(-1.00000000000000))*(sj2)*(x420)*(x421)))+(((x418)*(x419)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)*(x421))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x417)*(((x422)+(((cj2)*(x420)))+(((IkReal(-1.00000000000000))*(x418))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x417)*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj2)*(x419)*(x420)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)*(x421)))+(((IkReal(-1.00000000000000))*(x419)*(x422)))+(((IkReal(-1.00000000000000))*(sj2)*(x420)*(x421)))+(((x418)*(x419)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)*(x421)))))))+IKsqr(((x417)*(((x422)+(((cj2)*(x420)))+(((IkReal(-1.00000000000000))*(x418)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x417)*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj2)*(x419)*(x420)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)*(x421)))+(((IkReal(-1.00000000000000))*(x419)*(x422)))+(((IkReal(-1.00000000000000))*(sj2)*(x420)*(x421)))+(((x418)*(x419)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)*(x421)))))), ((x417)*(((x422)+(((cj2)*(x420)))+(((IkReal(-1.00000000000000))*(x418)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x423=IKcos(j5);
IkReal x424=IKsin(j5);
IkReal x425=((r01)*(sj1));
IkReal x426=((IkReal(1.00000000000000))*(cj2));
IkReal x427=((cj1)*(r00));
IkReal x428=((sj4)*(x423));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj3)*(x424)))+(((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))+(((sj3)*(x428))));
evalcond[1]=((((cj4)*(x423)))+(((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(x426)*(x427)))+(((IkReal(-1.00000000000000))*(x425)*(x426))));
evalcond[2]=((((cj2)*(r02)))+(((sj3)*(x424)))+(((cj3)*(x428)))+(((sj2)*(x427)))+(((sj2)*(x425))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x429=((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30);
IkReal x430=((r01)*(sj1));
IkReal x431=((cj1)*(r00));
IkReal x432=((cj2)*(sj3)*(sj4));
IkReal x433=((IkReal(1.00000000000000))*(r02)*(sj2));
if( IKabs(((x429)*(((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((((cj1)*(cj4)*(r01)))+(((IkReal(-1.00000000000000))*(cj4)*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(sj3)*(sj4)*(x433)))+(((x430)*(x432)))+(((x431)*(x432))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x429)*(((((IkReal(-1.00000000000000))*(x433)))+(((cj2)*(x430)))+(((cj2)*(x431))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x429)*(((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((((cj1)*(cj4)*(r01)))+(((IkReal(-1.00000000000000))*(cj4)*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(sj3)*(sj4)*(x433)))+(((x430)*(x432)))+(((x431)*(x432)))))))+IKsqr(((x429)*(((((IkReal(-1.00000000000000))*(x433)))+(((cj2)*(x430)))+(((cj2)*(x431)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x429)*(((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((((cj1)*(cj4)*(r01)))+(((IkReal(-1.00000000000000))*(cj4)*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(sj3)*(sj4)*(x433)))+(((x430)*(x432)))+(((x431)*(x432)))))), ((x429)*(((((IkReal(-1.00000000000000))*(x433)))+(((cj2)*(x430)))+(((cj2)*(x431)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x434=IKcos(j5);
IkReal x435=IKsin(j5);
IkReal x436=((r01)*(sj1));
IkReal x437=((IkReal(1.00000000000000))*(cj2));
IkReal x438=((cj1)*(r00));
IkReal x439=((sj4)*(x434));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj3)*(x435)))+(((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))+(((sj3)*(x439))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x437)*(x438)))+(((cj4)*(x434)))+(((IkReal(-1.00000000000000))*(x436)*(x437)))+(((r02)*(sj2))));
evalcond[2]=((((cj2)*(r02)))+(((cj3)*(x439)))+(((sj3)*(x435)))+(((sj2)*(x438)))+(((sj2)*(x436))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x440=(sj3)*(sj3);
IkReal x441=(cj3)*(cj3);
IkReal x442=((IkReal(1.00000000000000))*(sj1));
IkReal x443=((cj3)*(r00));
IkReal x444=((sj2)*(sj3));
IkReal x445=((IkReal(1.00000000000000))*(cj1));
IkReal x446=((cj3)*(r01));
IkReal x447=((IkReal(1.00000000000000))*(cj2)*(r02));
if( IKabs(((((IKabs(((x441)+(x440))) != 0)?((IkReal)1/(((x441)+(x440)))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(sj3)*(x447)))+(((cj1)*(x446)))+(((IkReal(-1.00000000000000))*(r00)*(x444)*(x445)))+(((IkReal(-1.00000000000000))*(r01)*(x442)*(x444)))+(((IkReal(-1.00000000000000))*(x442)*(x443))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((sj4)*(x440)))+(((sj4)*(x441))))) != 0)?((IkReal)1/(((((sj4)*(x440)))+(((sj4)*(x441)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(r01)*(sj3)*(x445)))+(((IkReal(-1.00000000000000))*(cj3)*(x447)))+(((IkReal(-1.00000000000000))*(sj2)*(x442)*(x446)))+(((IkReal(-1.00000000000000))*(sj2)*(x443)*(x445)))+(((r00)*(sj1)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((x441)+(x440))) != 0)?((IkReal)1/(((x441)+(x440)))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(sj3)*(x447)))+(((cj1)*(x446)))+(((IkReal(-1.00000000000000))*(r00)*(x444)*(x445)))+(((IkReal(-1.00000000000000))*(r01)*(x442)*(x444)))+(((IkReal(-1.00000000000000))*(x442)*(x443)))))))+IKsqr(((((IKabs(((((sj4)*(x440)))+(((sj4)*(x441))))) != 0)?((IkReal)1/(((((sj4)*(x440)))+(((sj4)*(x441)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(r01)*(sj3)*(x445)))+(((IkReal(-1.00000000000000))*(cj3)*(x447)))+(((IkReal(-1.00000000000000))*(sj2)*(x442)*(x446)))+(((IkReal(-1.00000000000000))*(sj2)*(x443)*(x445)))+(((r00)*(sj1)*(sj3)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IKabs(((x441)+(x440))) != 0)?((IkReal)1/(((x441)+(x440)))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(sj3)*(x447)))+(((cj1)*(x446)))+(((IkReal(-1.00000000000000))*(r00)*(x444)*(x445)))+(((IkReal(-1.00000000000000))*(r01)*(x442)*(x444)))+(((IkReal(-1.00000000000000))*(x442)*(x443)))))), ((((IKabs(((((sj4)*(x440)))+(((sj4)*(x441))))) != 0)?((IkReal)1/(((((sj4)*(x440)))+(((sj4)*(x441)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(r01)*(sj3)*(x445)))+(((IkReal(-1.00000000000000))*(cj3)*(x447)))+(((IkReal(-1.00000000000000))*(sj2)*(x442)*(x446)))+(((IkReal(-1.00000000000000))*(sj2)*(x443)*(x445)))+(((r00)*(sj1)*(sj3)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x448=IKcos(j5);
IkReal x449=IKsin(j5);
IkReal x450=((r01)*(sj1));
IkReal x451=((IkReal(1.00000000000000))*(cj2));
IkReal x452=((cj1)*(r00));
IkReal x453=((sj4)*(x448));
evalcond[0]=((((sj3)*(x453)))+(((IkReal(-1.00000000000000))*(cj3)*(x449)))+(((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1))));
evalcond[1]=((((cj4)*(x448)))+(((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(x450)*(x451)))+(((IkReal(-1.00000000000000))*(x451)*(x452))));
evalcond[2]=((((sj2)*(x452)))+(((sj2)*(x450)))+(((cj3)*(x453)))+(((cj2)*(r02)))+(((sj3)*(x449))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x454=((IkReal(1.98727687430310e+30))*(px));
IkReal x455=((IkReal(8.54269560406427e+28))*(px));
IkReal x456=((IkReal(8.54269560406427e+28))*(py));
IkReal x457=((IkReal(1.98727687430310e+30))*(py));
IkReal x458=((cj1)*(cj2)*(sj3));
IkReal x459=((cj2)*(sj1)*(sj3));
IkReal x460=((pz)*(sj2)*(sj3));
if( IKabs(((gconst0)*(((IkReal(-2.14558342791678e+25))+(((x454)*(x458)))+(((IkReal(-1.98727687430310e+30))*(x460)))+(((IkReal(1.91356381531040e+28))*(sj3)))+(((IkReal(-1.00000000000000))*(cj1)*(x456)))+(((sj1)*(x455)))+(((x457)*(x459))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((IkReal(4.99124459749967e+26))+(((x455)*(x458)))+(((cj1)*(x457)))+(((IkReal(-1.00000000000000))*(sj1)*(x454)))+(((IkReal(-4.45150019843895e+29))*(sj3)))+(((x456)*(x459)))+(((IkReal(-8.54269560406427e+28))*(x460))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst0)*(((IkReal(-2.14558342791678e+25))+(((x454)*(x458)))+(((IkReal(-1.98727687430310e+30))*(x460)))+(((IkReal(1.91356381531040e+28))*(sj3)))+(((IkReal(-1.00000000000000))*(cj1)*(x456)))+(((sj1)*(x455)))+(((x457)*(x459)))))), ((gconst0)*(((IkReal(4.99124459749967e+26))+(((x455)*(x458)))+(((cj1)*(x457)))+(((IkReal(-1.00000000000000))*(sj1)*(x454)))+(((IkReal(-4.45150019843895e+29))*(sj3)))+(((x456)*(x459)))+(((IkReal(-8.54269560406427e+28))*(x460)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x461=IKcos(j4);
IkReal x462=IKsin(j4);
IkReal x463=((py)*(sj1));
IkReal x464=((IkReal(1.00000000000000))*(px));
IkReal x465=((IkReal(0.0131002700000000))*(x462));
IkReal x466=((IkReal(0.304749985540171))*(x461));
evalcond[0]=((IkReal(0.000251160000000000))+(((sj3)*(x465)))+(((IkReal(-0.224000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(sj1)*(x464)))+(((cj1)*(py)))+(((IkReal(-1.00000000000000))*(sj3)*(x466))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj2)*(x463)))+(((IkReal(0.304749985540171))*(x462)))+(((IkReal(0.0131002700000000))*(x461)))+(((pz)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(x464))));
evalcond[2]=((IkReal(-0.266305430000000))+(((cj3)*(x465)))+(((IkReal(-0.224000000000000))*(cj3)))+(((cj2)*(pz)))+(((cj1)*(px)*(sj2)))+(((IkReal(-1.00000000000000))*(cj3)*(x466)))+(((sj2)*(x463))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[2];
IkReal x467=(sj3)*(sj3);
IkReal x468=(cj3)*(cj3);
dummyeval[0]=((x468)+(x467));
dummyeval[1]=((((sj4)*(x468)))+(((sj4)*(x467))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj3;
dummyeval[1]=cj4;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj4;
dummyeval[1]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x469=((py)*(sj1));
IkReal x470=((IkReal(1.00000000000000))*(sj1));
IkReal x471=((cj1)*(px));
IkReal x472=((IkReal(1.00000000000000))*(cj2));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=((((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x470)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x472))));
evalcond[2]=((IkReal(-0.210648570000000))+(((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x470))));
evalcond[3]=((IkReal(0.304749985540171))+(((IkReal(-1.00000000000000))*(x469)*(x472)))+(((IkReal(-1.00000000000000))*(x471)*(x472)))+(((pz)*(sj2))));
evalcond[4]=((IkReal(-0.266305430000000))+(((cj2)*(pz)))+(((sj2)*(x471)))+(((sj2)*(x469))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x473=((IkReal(1.00000000000000))*(r01));
if( IKabs(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((IkReal(-1.00000000000000))*(sj1)*(sj2)*(x473)))+(((IkReal(-1.00000000000000))*(cj2)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(x473))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((IkReal(-1.00000000000000))*(sj1)*(sj2)*(x473)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))))+IKsqr(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(x473)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((IkReal(-1.00000000000000))*(sj1)*(sj2)*(x473)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))), ((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(x473)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))+(IKcos(j5)));
evalcond[1]=((IKsin(j5))+(((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x474=((py)*(sj1));
IkReal x475=((IkReal(1.00000000000000))*(sj1));
IkReal x476=((cj1)*(px));
IkReal x477=((IkReal(1.00000000000000))*(cj2));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=((((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x475)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x477))));
evalcond[2]=((IkReal(-0.210648570000000))+(((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x475))));
evalcond[3]=((IkReal(0.304749985540171))+(((IkReal(-1.00000000000000))*(x476)*(x477)))+(((pz)*(sj2)))+(((IkReal(-1.00000000000000))*(x474)*(x477))));
evalcond[4]=((IkReal(-0.266305430000000))+(((cj2)*(pz)))+(((sj2)*(x476)))+(((sj2)*(x474))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x478=((IkReal(1.00000000000000))*(r01));
if( IKabs(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((IkReal(-1.00000000000000))*(sj1)*(sj2)*(x478)))+(((IkReal(-1.00000000000000))*(cj2)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(x478))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((IkReal(-1.00000000000000))*(sj1)*(sj2)*(x478)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))))+IKsqr(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(x478)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((IkReal(-1.00000000000000))*(sj1)*(sj2)*(x478)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))), ((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(x478)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))+(IKcos(j5)));
evalcond[1]=((IKsin(j5))+(((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x479=((py)*(sj1));
IkReal x480=((IkReal(1.00000000000000))*(sj1));
IkReal x481=((cj1)*(px));
IkReal x482=((IkReal(1.00000000000000))*(cj2));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj1)*(r00)*(x482)))+(((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x480))));
evalcond[2]=((IkReal(0.211150890000000))+(((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x480))));
evalcond[3]=((IkReal(0.304749985540171))+(((IkReal(-1.00000000000000))*(x481)*(x482)))+(((IkReal(-1.00000000000000))*(x479)*(x482)))+(((pz)*(sj2))));
evalcond[4]=((IkReal(-0.266305430000000))+(((cj2)*(pz)))+(((sj2)*(x481)))+(((sj2)*(x479))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))))+IKsqr(((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))), ((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(IKcos(j5)))));
evalcond[1]=((((cj2)*(r02)))+(((IkReal(-1.00000000000000))*(IKsin(j5))))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x483=((py)*(sj1));
IkReal x484=((IkReal(1.00000000000000))*(sj1));
IkReal x485=((cj1)*(px));
IkReal x486=((IkReal(1.00000000000000))*(cj2));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj1)*(r00)*(x486)))+(((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x484))));
evalcond[2]=((IkReal(0.211150890000000))+(((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x484))));
evalcond[3]=((IkReal(0.304749985540171))+(((IkReal(-1.00000000000000))*(x483)*(x486)))+(((pz)*(sj2)))+(((IkReal(-1.00000000000000))*(x485)*(x486))));
evalcond[4]=((IkReal(-0.266305430000000))+(((cj2)*(pz)))+(((sj2)*(x485)))+(((sj2)*(x483))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))))+IKsqr(((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))), ((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(IKcos(j5)))));
evalcond[1]=((((cj2)*(r02)))+(((IkReal(-1.00000000000000))*(IKsin(j5))))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x487=((py)*(sj1));
IkReal x488=((IkReal(1.00000000000000))*(sj1));
IkReal x489=((cj1)*(px));
IkReal x490=((IkReal(1.00000000000000))*(cj2));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj1)*(r00)*(x490)))+(((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x488))));
evalcond[2]=((IkReal(-0.236849110000000))+(((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x488))));
evalcond[3]=((IkReal(-0.304749985540171))+(((IkReal(-1.00000000000000))*(x489)*(x490)))+(((IkReal(-1.00000000000000))*(x487)*(x490)))+(((pz)*(sj2))));
evalcond[4]=((IkReal(-0.266305430000000))+(((cj2)*(pz)))+(((sj2)*(x489)))+(((sj2)*(x487))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x491=((IkReal(1.00000000000000))*(sj1));
if( IKabs(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((IkReal(-1.00000000000000))*(r01)*(sj2)*(x491)))+(((IkReal(-1.00000000000000))*(cj2)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(r00)*(x491)))+(((cj1)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((IkReal(-1.00000000000000))*(r01)*(sj2)*(x491)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))))+IKsqr(((((IkReal(-1.00000000000000))*(r00)*(x491)))+(((cj1)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((IkReal(-1.00000000000000))*(r01)*(sj2)*(x491)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))), ((((IkReal(-1.00000000000000))*(r00)*(x491)))+(((cj1)*(r01)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(IKcos(j5)))));
evalcond[1]=((IKsin(j5))+(((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x492=((py)*(sj1));
IkReal x493=((IkReal(1.00000000000000))*(sj1));
IkReal x494=((cj1)*(px));
IkReal x495=((IkReal(1.00000000000000))*(cj2));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj1)*(r00)*(x495)))+(((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x493))));
evalcond[2]=((IkReal(-0.236849110000000))+(((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x493))));
evalcond[3]=((IkReal(-0.304749985540171))+(((IkReal(-1.00000000000000))*(x494)*(x495)))+(((pz)*(sj2)))+(((IkReal(-1.00000000000000))*(x492)*(x495))));
evalcond[4]=((IkReal(-0.266305430000000))+(((cj2)*(pz)))+(((sj2)*(x492)))+(((sj2)*(x494))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x496=((IkReal(1.00000000000000))*(sj1));
if( IKabs(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((IkReal(-1.00000000000000))*(r01)*(sj2)*(x496)))+(((IkReal(-1.00000000000000))*(cj2)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(r00)*(x496)))+(((cj1)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((IkReal(-1.00000000000000))*(r01)*(sj2)*(x496)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))))+IKsqr(((((IkReal(-1.00000000000000))*(r00)*(x496)))+(((cj1)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)))+(((IkReal(-1.00000000000000))*(r01)*(sj2)*(x496)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)))), ((((IkReal(-1.00000000000000))*(r00)*(x496)))+(((cj1)*(r01)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(IKcos(j5)))));
evalcond[1]=((IKsin(j5))+(((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x497=((py)*(sj1));
IkReal x498=((IkReal(1.00000000000000))*(sj1));
IkReal x499=((cj1)*(px));
IkReal x500=((IkReal(1.00000000000000))*(cj2));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x498)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x500))));
evalcond[2]=((IkReal(0.237351430000000))+(((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x498))));
evalcond[3]=((IkReal(-0.304749985540171))+(((IkReal(-1.00000000000000))*(x499)*(x500)))+(((IkReal(-1.00000000000000))*(x497)*(x500)))+(((pz)*(sj2))));
evalcond[4]=((IkReal(-0.266305430000000))+(((cj2)*(pz)))+(((sj2)*(x499)))+(((sj2)*(x497))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))))+IKsqr(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))), ((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))+(IKcos(j5)));
evalcond[1]=((((cj2)*(r02)))+(((IkReal(-1.00000000000000))*(IKsin(j5))))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x501=((py)*(sj1));
IkReal x502=((IkReal(1.00000000000000))*(sj1));
IkReal x503=((cj1)*(px));
IkReal x504=((IkReal(1.00000000000000))*(cj2));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=((((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x504)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x502))));
evalcond[2]=((IkReal(0.237351430000000))+(((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x502))));
evalcond[3]=((IkReal(-0.304749985540171))+(((IkReal(-1.00000000000000))*(x501)*(x504)))+(((IkReal(-1.00000000000000))*(x503)*(x504)))+(((pz)*(sj2))));
evalcond[4]=((IkReal(-0.266305430000000))+(((sj2)*(x501)))+(((sj2)*(x503)))+(((cj2)*(pz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))))+IKsqr(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((cj2)*(r02)))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2)))), ((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))+(IKcos(j5)));
evalcond[1]=((((cj2)*(r02)))+(((IkReal(-1.00000000000000))*(IKsin(j5))))+(((cj1)*(r00)*(sj2)))+(((r01)*(sj1)*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x505=((sj1)*(sj2));
IkReal x506=((IkReal(1.00000000000000))*(sj1));
IkReal x507=((cj1)*(sj2));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.000251160000000000))+(((cj1)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x506))));
evalcond[2]=((IkReal(0.0131002700000000))+(((pz)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(px)))+(((IkReal(-1.00000000000000))*(cj2)*(py)*(x506))));
evalcond[3]=((((r01)*(x505)))+(((cj2)*(r02)))+(((r00)*(x507))));
evalcond[4]=((IkReal(-0.795055415540171))+(((cj2)*(pz)))+(((px)*(x507)))+(((py)*(x505))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r02)*(sj2)))+(((cj1)*(cj2)*(r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))))+IKsqr(((((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r02)*(sj2)))+(((cj1)*(cj2)*(r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))), ((((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r02)*(sj2)))+(((cj1)*(cj2)*(r00)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x508=((IkReal(1.00000000000000))*(sj1));
evalcond[0]=((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(x508)))+(((IkReal(-1.00000000000000))*(IKsin(j5)))));
evalcond[1]=((((r02)*(sj2)))+(IKcos(j5))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r00)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x508))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x509=((sj1)*(sj2));
IkReal x510=((IkReal(1.00000000000000))*(sj1));
IkReal x511=((cj1)*(sj2));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.000251160000000000))+(((IkReal(-1.00000000000000))*(px)*(x510)))+(((cj1)*(py))));
evalcond[2]=((IkReal(-0.0131002700000000))+(((IkReal(-1.00000000000000))*(cj2)*(py)*(x510)))+(((pz)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(px))));
evalcond[3]=((((r01)*(x509)))+(((cj2)*(r02)))+(((r00)*(x511))));
evalcond[4]=((IkReal(-0.185555444459829))+(((px)*(x511)))+(((cj2)*(pz)))+(((py)*(x509))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x512=((IkReal(1.00000000000000))*(cj2));
if( IKabs(((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(x512)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x512)))+(((r02)*(sj2))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj1)*(r00)*(x512)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x512)))+(((r02)*(sj2)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))), ((((IkReal(-1.00000000000000))*(cj1)*(r00)*(x512)))+(((IkReal(-1.00000000000000))*(r01)*(sj1)*(x512)))+(((r02)*(sj2)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x513=((IkReal(1.00000000000000))*(sj1));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(x513)))+(((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(IKsin(j5)))));
evalcond[1]=((((IkReal(-1.00000000000000))*(IKcos(j5))))+(((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x513)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x514=((sj1)*(sj2));
IkReal x515=((IkReal(1.00000000000000))*(sj1));
IkReal x516=((cj1)*(sj2));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.000251160000000000))+(((IkReal(-1.00000000000000))*(px)*(x515)))+(((cj1)*(py))));
evalcond[2]=((IkReal(0.0131002700000000))+(((IkReal(-1.00000000000000))*(cj2)*(py)*(x515)))+(((pz)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(px))));
evalcond[3]=((((r01)*(x514)))+(((cj2)*(r02)))+(((r00)*(x516))));
evalcond[4]=((IkReal(-0.795055415540171))+(((px)*(x516)))+(((py)*(x514)))+(((cj2)*(pz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r02)*(sj2)))+(((cj1)*(cj2)*(r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))))+IKsqr(((((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r02)*(sj2)))+(((cj1)*(cj2)*(r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))), ((((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r02)*(sj2)))+(((cj1)*(cj2)*(r00)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x517=((IkReal(1.00000000000000))*(sj1));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(x517)))+(((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(IKsin(j5)))));
evalcond[1]=((((r02)*(sj2)))+(IKcos(j5))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x517)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x518=((sj1)*(sj2));
IkReal x519=((IkReal(1.00000000000000))*(sj1));
IkReal x520=((cj1)*(sj2));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.000251160000000000))+(((IkReal(-1.00000000000000))*(px)*(x519)))+(((cj1)*(py))));
evalcond[2]=((IkReal(-0.0131002700000000))+(((IkReal(-1.00000000000000))*(cj2)*(py)*(x519)))+(((pz)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(px))));
evalcond[3]=((((r01)*(x518)))+(((cj2)*(r02)))+(((r00)*(x520))));
evalcond[4]=((IkReal(-0.185555444459829))+(((py)*(x518)))+(((px)*(x520)))+(((cj2)*(pz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x521=((IkReal(1.00000000000000))*(cj2));
if( IKabs(((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(r01)*(sj1)*(x521)))+(((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x521))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))))+IKsqr(((((IkReal(-1.00000000000000))*(r01)*(sj1)*(x521)))+(((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x521)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))), ((((IkReal(-1.00000000000000))*(r01)*(sj1)*(x521)))+(((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x521)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x522=((IkReal(1.00000000000000))*(sj1));
evalcond[0]=((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(x522)))+(((IkReal(-1.00000000000000))*(IKsin(j5)))));
evalcond[1]=((((IkReal(-1.00000000000000))*(IKcos(j5))))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x522)))+(((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x523=((sj1)*(sj2));
IkReal x524=((IkReal(1.00000000000000))*(sj1));
IkReal x525=((cj1)*(sj2));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.000251160000000000))+(((IkReal(-1.00000000000000))*(px)*(x524)))+(((cj1)*(py))));
evalcond[2]=((IkReal(0.0131002700000000))+(((IkReal(-1.00000000000000))*(cj2)*(py)*(x524)))+(((pz)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(px))));
evalcond[3]=((((cj2)*(r02)))+(((r01)*(x523)))+(((r00)*(x525))));
evalcond[4]=((IkReal(0.262444555540171))+(((px)*(x525)))+(((cj2)*(pz)))+(((py)*(x523))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r02)*(sj2)))+(((cj1)*(cj2)*(r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)))))+IKsqr(((((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r02)*(sj2)))+(((cj1)*(cj2)*(r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)))), ((((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r02)*(sj2)))+(((cj1)*(cj2)*(r00)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x526=((IkReal(1.00000000000000))*(cj2));
evalcond[0]=((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))+(IKsin(j5)));
evalcond[1]=((((IkReal(-1.00000000000000))*(r01)*(sj1)*(x526)))+(((r02)*(sj2)))+(IKcos(j5))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x526))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x527=((sj1)*(sj2));
IkReal x528=((IkReal(1.00000000000000))*(sj1));
IkReal x529=((cj1)*(sj2));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.000251160000000000))+(((IkReal(-1.00000000000000))*(px)*(x528)))+(((cj1)*(py))));
evalcond[2]=((IkReal(-0.0131002700000000))+(((IkReal(-1.00000000000000))*(cj2)*(py)*(x528)))+(((pz)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(px))));
evalcond[3]=((((cj2)*(r02)))+(((r01)*(x527)))+(((r00)*(x529))));
evalcond[4]=((IkReal(-0.347055415540171))+(((px)*(x529)))+(((cj2)*(pz)))+(((py)*(x527))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x530=((IkReal(1.00000000000000))*(cj1));
if( IKabs(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x530))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r00)*(x530)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(sj1))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x530)))))+IKsqr(((((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r00)*(x530)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(sj1)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x530)))), ((((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r00)*(x530)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(sj1)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x531=((IkReal(1.00000000000000))*(sj1));
evalcond[0]=((((cj1)*(r01)))+(IKsin(j5))+(((IkReal(-1.00000000000000))*(r00)*(x531))));
evalcond[1]=((((IkReal(-1.00000000000000))*(IKcos(j5))))+(((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x531)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x532=((sj1)*(sj2));
IkReal x533=((IkReal(1.00000000000000))*(sj1));
IkReal x534=((cj1)*(sj2));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j4)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.000251160000000000))+(((IkReal(-1.00000000000000))*(px)*(x533)))+(((cj1)*(py))));
evalcond[2]=((IkReal(0.0131002700000000))+(((IkReal(-1.00000000000000))*(cj2)*(py)*(x533)))+(((pz)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(px))));
evalcond[3]=((((cj2)*(r02)))+(((r01)*(x532)))+(((r00)*(x534))));
evalcond[4]=((IkReal(0.262444555540171))+(((px)*(x534)))+(((cj2)*(pz)))+(((py)*(x532))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r02)*(sj2)))+(((cj1)*(cj2)*(r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)))))+IKsqr(((((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r02)*(sj2)))+(((cj1)*(cj2)*(r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj1)*(r01)))), ((((cj2)*(r01)*(sj1)))+(((IkReal(-1.00000000000000))*(r02)*(sj2)))+(((cj1)*(cj2)*(r00)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x535=((IkReal(1.00000000000000))*(cj2));
evalcond[0]=((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))+(IKsin(j5)));
evalcond[1]=((((IkReal(-1.00000000000000))*(r01)*(sj1)*(x535)))+(((r02)*(sj2)))+(IKcos(j5))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(x535))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x536=((sj1)*(sj2));
IkReal x537=((IkReal(1.00000000000000))*(sj1));
IkReal x538=((cj1)*(sj2));
evalcond[0]=((IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))))))+(IKabs(((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j4)), IkReal(6.28318530717959)))))));
evalcond[1]=((IkReal(0.000251160000000000))+(((IkReal(-1.00000000000000))*(px)*(x537)))+(((cj1)*(py))));
evalcond[2]=((IkReal(-0.0131002700000000))+(((IkReal(-1.00000000000000))*(cj2)*(py)*(x537)))+(((pz)*(sj2)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(px))));
evalcond[3]=((((cj2)*(r02)))+(((r01)*(x536)))+(((r00)*(x538))));
evalcond[4]=((IkReal(-0.347055415540171))+(((px)*(x538)))+(((cj2)*(pz)))+(((py)*(x536))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x539=((IkReal(1.00000000000000))*(cj1));
if( IKabs(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x539))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r00)*(x539)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(sj1))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x539)))))+IKsqr(((((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r00)*(x539)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(sj1)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((r00)*(sj1)))+(((IkReal(-1.00000000000000))*(r01)*(x539)))), ((((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r00)*(x539)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(sj1)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x540=((IkReal(1.00000000000000))*(sj1));
evalcond[0]=((((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(x540)))+(IKsin(j5)));
evalcond[1]=((((IkReal(-1.00000000000000))*(IKcos(j5))))+(((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(cj2)*(r01)*(x540)))+(((IkReal(-1.00000000000000))*(cj1)*(cj2)*(r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x541=((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30);
IkReal x542=((r02)*(sj2));
IkReal x543=((cj3)*(sj4));
IkReal x544=((r01)*(sj1));
IkReal x545=((IkReal(1.00000000000000))*(cj4));
IkReal x546=((cj1)*(cj2)*(r00));
if( IKabs(((x541)*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj2)*(x543)*(x544)))+(((x542)*(x543)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)*(x545)))+(((IkReal(-1.00000000000000))*(sj2)*(x544)*(x545)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)*(x545)))+(((IkReal(-1.00000000000000))*(x543)*(x546))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x541)*(((((IkReal(-1.00000000000000))*(x542)))+(x546)+(((cj2)*(x544))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x541)*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj2)*(x543)*(x544)))+(((x542)*(x543)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)*(x545)))+(((IkReal(-1.00000000000000))*(sj2)*(x544)*(x545)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)*(x545)))+(((IkReal(-1.00000000000000))*(x543)*(x546)))))))+IKsqr(((x541)*(((((IkReal(-1.00000000000000))*(x542)))+(x546)+(((cj2)*(x544)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x541)*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj2)*(x543)*(x544)))+(((x542)*(x543)))+(((IkReal(-1.00000000000000))*(cj1)*(r00)*(sj2)*(x545)))+(((IkReal(-1.00000000000000))*(sj2)*(x544)*(x545)))+(((IkReal(-1.00000000000000))*(cj2)*(r02)*(x545)))+(((IkReal(-1.00000000000000))*(x543)*(x546)))))), ((x541)*(((((IkReal(-1.00000000000000))*(x542)))+(x546)+(((cj2)*(x544)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x547=IKcos(j5);
IkReal x548=IKsin(j5);
IkReal x549=((r01)*(sj1));
IkReal x550=((IkReal(1.00000000000000))*(cj2));
IkReal x551=((cj1)*(r00));
IkReal x552=((sj4)*(x547));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj3)*(x548)))+(((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))+(((sj3)*(x552))));
evalcond[1]=((((cj4)*(x547)))+(((IkReal(-1.00000000000000))*(x550)*(x551)))+(((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(x549)*(x550))));
evalcond[2]=((((sj3)*(x548)))+(((sj2)*(x549)))+(((sj2)*(x551)))+(((cj2)*(r02)))+(((cj3)*(x552))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x553=((IKabs(cj4) != 0)?((IkReal)1/(cj4)):(IkReal)1.0e30);
IkReal x554=((r01)*(sj1));
IkReal x555=((cj1)*(r00));
IkReal x556=((cj2)*(sj3)*(sj4));
IkReal x557=((IkReal(1.00000000000000))*(r02)*(sj2));
if( IKabs(((x553)*(((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(sj3)*(sj4)*(x557)))+(((cj1)*(cj4)*(r01)))+(((x554)*(x556)))+(((x555)*(x556)))+(((IkReal(-1.00000000000000))*(cj4)*(r00)*(sj1))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x553)*(((((IkReal(-1.00000000000000))*(x557)))+(((cj2)*(x555)))+(((cj2)*(x554))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x553)*(((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(sj3)*(sj4)*(x557)))+(((cj1)*(cj4)*(r01)))+(((x554)*(x556)))+(((x555)*(x556)))+(((IkReal(-1.00000000000000))*(cj4)*(r00)*(sj1)))))))+IKsqr(((x553)*(((((IkReal(-1.00000000000000))*(x557)))+(((cj2)*(x555)))+(((cj2)*(x554)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x553)*(((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(sj3)*(sj4)*(x557)))+(((cj1)*(cj4)*(r01)))+(((x554)*(x556)))+(((x555)*(x556)))+(((IkReal(-1.00000000000000))*(cj4)*(r00)*(sj1)))))), ((x553)*(((((IkReal(-1.00000000000000))*(x557)))+(((cj2)*(x555)))+(((cj2)*(x554)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x558=IKcos(j5);
IkReal x559=IKsin(j5);
IkReal x560=((r01)*(sj1));
IkReal x561=((IkReal(1.00000000000000))*(cj2));
IkReal x562=((cj1)*(r00));
IkReal x563=((sj4)*(x558));
evalcond[0]=((((sj3)*(x563)))+(((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))+(((IkReal(-1.00000000000000))*(cj3)*(x559))));
evalcond[1]=((((cj4)*(x558)))+(((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(x560)*(x561)))+(((IkReal(-1.00000000000000))*(x561)*(x562))));
evalcond[2]=((((cj3)*(x563)))+(((sj3)*(x559)))+(((cj2)*(r02)))+(((sj2)*(x562)))+(((sj2)*(x560))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x564=(sj3)*(sj3);
IkReal x565=(cj3)*(cj3);
IkReal x566=((IkReal(1.00000000000000))*(sj1));
IkReal x567=((cj3)*(r00));
IkReal x568=((sj2)*(sj3));
IkReal x569=((IkReal(1.00000000000000))*(cj1));
IkReal x570=((cj3)*(r01));
IkReal x571=((IkReal(1.00000000000000))*(cj2)*(r02));
if( IKabs(((((IKabs(((x564)+(x565))) != 0)?((IkReal)1/(((x564)+(x565)))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(r01)*(x566)*(x568)))+(((IkReal(-1.00000000000000))*(x566)*(x567)))+(((IkReal(-1.00000000000000))*(sj3)*(x571)))+(((IkReal(-1.00000000000000))*(r00)*(x568)*(x569)))+(((cj1)*(x570))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((sj4)*(x565)))+(((sj4)*(x564))))) != 0)?((IkReal)1/(((((sj4)*(x565)))+(((sj4)*(x564)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(sj2)*(x567)*(x569)))+(((IkReal(-1.00000000000000))*(cj3)*(x571)))+(((IkReal(-1.00000000000000))*(sj2)*(x566)*(x570)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x569)))+(((r00)*(sj1)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((x564)+(x565))) != 0)?((IkReal)1/(((x564)+(x565)))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(r01)*(x566)*(x568)))+(((IkReal(-1.00000000000000))*(x566)*(x567)))+(((IkReal(-1.00000000000000))*(sj3)*(x571)))+(((IkReal(-1.00000000000000))*(r00)*(x568)*(x569)))+(((cj1)*(x570)))))))+IKsqr(((((IKabs(((((sj4)*(x565)))+(((sj4)*(x564))))) != 0)?((IkReal)1/(((((sj4)*(x565)))+(((sj4)*(x564)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(sj2)*(x567)*(x569)))+(((IkReal(-1.00000000000000))*(cj3)*(x571)))+(((IkReal(-1.00000000000000))*(sj2)*(x566)*(x570)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x569)))+(((r00)*(sj1)*(sj3)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IKabs(((x564)+(x565))) != 0)?((IkReal)1/(((x564)+(x565)))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(r01)*(x566)*(x568)))+(((IkReal(-1.00000000000000))*(x566)*(x567)))+(((IkReal(-1.00000000000000))*(sj3)*(x571)))+(((IkReal(-1.00000000000000))*(r00)*(x568)*(x569)))+(((cj1)*(x570)))))), ((((IKabs(((((sj4)*(x565)))+(((sj4)*(x564))))) != 0)?((IkReal)1/(((((sj4)*(x565)))+(((sj4)*(x564)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(sj2)*(x567)*(x569)))+(((IkReal(-1.00000000000000))*(cj3)*(x571)))+(((IkReal(-1.00000000000000))*(sj2)*(x566)*(x570)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x569)))+(((r00)*(sj1)*(sj3)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x572=IKcos(j5);
IkReal x573=IKsin(j5);
IkReal x574=((r01)*(sj1));
IkReal x575=((IkReal(1.00000000000000))*(cj2));
IkReal x576=((cj1)*(r00));
IkReal x577=((sj4)*(x572));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj3)*(x573)))+(((cj1)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(sj1)))+(((sj3)*(x577))));
evalcond[1]=((((r02)*(sj2)))+(((IkReal(-1.00000000000000))*(x574)*(x575)))+(((IkReal(-1.00000000000000))*(x575)*(x576)))+(((cj4)*(x572))));
evalcond[2]=((((cj2)*(r02)))+(((cj3)*(x577)))+(((sj2)*(x576)))+(((sj2)*(x574)))+(((sj3)*(x573))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j1;
vinfos[0].indices[0] = _ij1[0];
vinfos[0].indices[1] = _ij1[1];
vinfos[0].maxsolutions = _nj1;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j2;
vinfos[1].indices[0] = _ij2[0];
vinfos[1].indices[1] = _ij2[1];
vinfos[1].maxsolutions = _nj2;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j3;
vinfos[2].indices[0] = _ij3[0];
vinfos[2].indices[1] = _ij3[1];
vinfos[2].maxsolutions = _nj3;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j4;
vinfos[3].indices[0] = _ij4[0];
vinfos[3].indices[1] = _ij4[1];
vinfos[3].maxsolutions = _nj4;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
    }
}
return solutions.GetNumSolutions()>0;
}

static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    IkReal tol = 1e-5*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        if( IKabs(wi[i]) < tol*100 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:genericrobot - robotican_arm (72937408218c0a950f20694bd6d35f42)>"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
